--- sdla_aft_te1.c	2007-04-24 19:14:40.000000000 -0400
+++ /common/wanpipe/sdla_aft_te1.c	2007-05-12 18:59:46.000000000 -0400
@@ -149,6 +149,12 @@
 #undef AFT_API_SUPPORT
 #endif
 
+#if defined(__LINUX__)
+# define AFT_RTP_SUPPORT 1
+#else
+# undef AFT_RTP_SUPPORT
+#endif
+
 
 /* Trigger on Number of transactions 
  * 1= 1x8 byte transactions
@@ -378,12 +384,10 @@
 static void aft_port_task (void * card_ptr, int arg);
 #endif  
 
-#if defined(__LINUX__)
+#if defined(AFT_RTP_SUPPORT)
 static void 	aft_rtp_config(sdla_t *card);
 static void 	aft_rtp_unconfig(sdla_t *card); 
-#if 0
-static void 	aft_rtp_tap(sdla_t *card, private_area_t *chan, u8* rx, u8* tx, u32 len);   
-#endif
+static void 	aft_rtp_tap(void *card_ptr, u8 chan, u8* rx, u8* tx, u32 len);   
 #endif
 
 static int 	aft_devel_ioctl(sdla_t *card,struct ifreq *ifr);
@@ -417,8 +421,8 @@
 static int 	aft_dma_tx (sdla_t *card,private_area_t *chan);
 static void 	aft_tx_dma_chain_handler(unsigned long data, int wdt, int reset);
 static void 	aft_tx_dma_voice_handler(unsigned long data, int wdt, int reset);
-static void 	aft_tx_dma_chain_init(private_area_t *chan, aft_dma_chain_t *);
-static void 	aft_rx_dma_chain_init(private_area_t *chan, aft_dma_chain_t *);
+static void 	aft_tx_dma_chain_init(private_area_t *chan, wan_dma_descr_t *);
+static void 	aft_rx_dma_chain_init(private_area_t *chan, wan_dma_descr_t *);
 static void 	aft_index_tx_rx_dma_chains(private_area_t *chan);
 static void 	aft_init_tx_rx_dma_descr(private_area_t *chan);
 static void 	aft_free_rx_complete_list(private_area_t *chan);
@@ -662,7 +666,7 @@
 
 	/* Make special hardware initialization for Analog board */
 	memcpy(&card->fe.fe_cfg, &conf->fe_cfg, sizeof(sdla_fe_cfg_t));
-	wp_remora_iface_init(&card->wandev.fe_iface);
+	wp_remora_iface_init(&card->fe, &card->wandev.fe_iface);
 	card->fe.name		= card->devname;
 	card->fe.card		= card;
 	card->fe.write_fe_reg	= aft_analog_write_fe;
@@ -742,9 +746,9 @@
 		memcpy(&card->fe.fe_cfg, &conf->fe_cfg, sizeof(sdla_fe_cfg_t));
 		if (card->u.aft.firm_id == AFT_DS_FE_CORE_ID) {
 			max_ports = 8;
-			sdla_ds_te1_iface_init(&card->wandev.fe_iface);
+			sdla_ds_te1_iface_init(&card->fe, &card->wandev.fe_iface);
 		}else{
-			sdla_te_iface_init(&card->wandev.fe_iface);
+			sdla_te_iface_init(&card->fe, &card->wandev.fe_iface);
 		}
 		card->fe.name		= card->devname;
 		card->fe.card		= card;
@@ -755,7 +759,7 @@
 		card->wandev.fe_enable_timer = enable_timer;
 		card->wandev.ec_enable_timer = enable_ec_timer;
 		card->wandev.te_link_state = handle_front_end_state;
-		conf->interface =
+		conf->electrical_interface =
 			IS_T1_CARD(card) ? WANOPT_V35 : WANOPT_RS232;
 
 		if (card->wandev.comm_port == WANOPT_PRI){
@@ -842,7 +846,7 @@
 			return -EINVAL;
 		}
 */
-		sdla_56k_iface_init(&card->wandev.fe_iface);
+		sdla_56k_iface_init(&card->fe, &card->wandev.fe_iface);
 
 		card->fe.name		= card->devname;
 		card->fe.card		= card;
@@ -882,7 +886,7 @@
 	card->wandev.clocking 			= conf->clocking;
 	card->wandev.ignore_front_end_status 	= conf->ignore_front_end_status;
 	card->wandev.ttl 			= conf->ttl;
-	card->wandev.interface 			= conf->interface;
+	card->wandev.electrical_interface 			= conf->electrical_interface;
 	card->wandev.comm_port 			= conf->comm_port;
 	card->wandev.udp_port   		= conf->udp_port;
 	card->wandev.new_if_cnt 		= 0;
@@ -962,7 +966,6 @@
 		card->u.aft.cfg.mru = card->wandev.mtu;
 	}
 
-
 	
 	if (card->u.aft.cfg.mru > MAX_WP_PRI_MTU ||
 	    card->u.aft.cfg.mru < MIN_WP_PRI_MTU){
@@ -1114,8 +1117,9 @@
 
 	card->disable_comm = &disable_comm;
 
-        aft_rtp_config(card); 
-
+#if defined(AFT_RTP_SUPPORT)
+        aft_rtp_config(card);
+#endif 
 	
 	card->wandev.read_ec = aft_read_ec;
 	card->wandev.write_ec = aft_write_ec;
@@ -1158,12 +1162,12 @@
  */
 static int update (wan_device_t* wandev)
 {
-	sdla_t* card = wandev->private;
+	sdla_t* card = wandev->priv;
  	netdevice_t* dev;
         volatile private_area_t* chan;
 
 	/* sanity checks */
-	if((wandev == NULL) || (wandev->private == NULL))
+	if((wandev == NULL) || (wandev->priv == NULL))
 		return -EFAULT;
 
 	if(wandev->state == WAN_UNCONFIGURED)
@@ -1508,11 +1512,11 @@
 
 static int new_if_private (wan_device_t* wandev, netdevice_t* dev, wanif_conf_t* conf, int channelized, int dchan)
 {
-	sdla_t* card = wandev->private;
+	sdla_t* card = wandev->priv;
 	private_area_t* chan;
 	int dma_per_ch=card->u.aft.cfg.dma_per_ch;
-	int err = 0;
-
+	int	err = 0, dma_alignment = 4, i =0;
+	
 	DEBUG_EVENT( "%s: Configuring Interface: %s\n",
 			card->devname, wan_netif_name(dev));
 
@@ -1838,11 +1842,7 @@
 		
        	chan->dma_mru = chan->mtu;
 
-#if defined(__LINUX__)
 	chan->dma_mru = aft_valid_mtu(chan->dma_mru);
-#else
-	chan->dma_mru = aft_valid_mtu(chan->dma_mru);
-#endif
 	if (!chan->dma_mru){
 		DEBUG_EVENT("%s:%s: Error invalid MTU %d  MRU %d\n",
 			card->devname,
@@ -1966,7 +1966,84 @@
 			chan->single_dma_chain?"Off":"On",
 			card->wandev.ec_enable_map?"On":"Off");
 
-          
+	/* New DMA support A-DMA */
+	dma_alignment = 4;
+	if (chan->channelized_cfg && !chan->hdlc_eng){
+		dma_alignment = 0x200;
+	}
+	
+	err = card->hw_iface.busdma_tag_create(	card->hw, 
+						&chan->rx_dma_chain_table[0],
+						dma_alignment,
+						chan->dma_mru,
+						MAX_AFT_DMA_CHAINS);
+	if (err) {
+		DEBUG_EVENT("%s: Failed to allocate DMA Rx mtag!\n",
+					card->devname);
+		err = -EINVAL;
+		goto new_if_error;
+	}
+	err = card->hw_iface.busdma_tag_create(	card->hw, 
+						&chan->tx_dma_chain_table[0],
+						dma_alignment,
+						chan->dma_mru,
+						MAX_AFT_DMA_CHAINS);
+	if (err) {
+		DEBUG_EVENT("%s: Failed to allocate DMA Tx mtag!\n",
+					card->devname);
+		err = card->hw_iface.busdma_tag_destroy(
+						card->hw, 
+						&chan->rx_dma_chain_table[0],
+						MAX_AFT_DMA_CHAINS);
+		err = -EINVAL;
+		goto new_if_error;
+	}
+
+	for (i=0;i<MAX_AFT_DMA_CHAINS;i++){
+
+		err = card->hw_iface.busdma_alloc(card->hw,&chan->tx_dma_chain_table[i]);
+		if (err){
+			DEBUG_EVENT("%s:%s: Unable to load TX DMA buffer %d (%d)!\n",
+					card->devname, chan->if_name, i, err);
+			err = -EINVAL;
+			break;
+		}
+		DEBUG_DMA("%s:%s: Alloc DMA TX buffer %d virt=%p len=%d\n",
+					card->devname, chan->if_name, i,
+					chan->tx_dma_chain_table[i].dma_virt,
+					chan->dma_mru);
+			
+		err = card->hw_iface.busdma_alloc(card->hw,&chan->rx_dma_chain_table[i]);
+		if (err){
+			DEBUG_EVENT("%s:%s: Unable to load RX DMA buffer %d (%d)!\n",
+					card->devname, chan->if_name, i, err);
+			err = -EINVAL;
+			break;
+		}
+		DEBUG_DMA("%s:%s: Alloc DMA RX buffer %d virt=%p len=%d\n",
+					card->devname, chan->if_name, i,
+					chan->rx_dma_chain_table[i].dma_virt,
+					chan->dma_mru);
+	}
+	if (err){
+
+		for (i=0;i<MAX_AFT_DMA_CHAINS;i++){
+
+			card->hw_iface.busdma_free(card->hw,&chan->rx_dma_chain_table[i]);
+			card->hw_iface.busdma_free(card->hw,&chan->tx_dma_chain_table[i]);
+		} 
+		err = card->hw_iface.busdma_tag_destroy(
+						card->hw,
+						&chan->rx_dma_chain_table[0],
+						MAX_AFT_DMA_CHAINS);
+		err = card->hw_iface.busdma_tag_destroy(
+						card->hw,
+						&chan->tx_dma_chain_table[0],
+						MAX_AFT_DMA_CHAINS);
+		err = -EINVAL;
+		goto new_if_error;
+	}
+
 	
 	err=aft_alloc_rx_dma_buff(card, chan, dma_per_ch,0);
 	if (err){
@@ -2085,7 +2162,7 @@
 static int new_if (wan_device_t* wandev, netdevice_t* dev, wanif_conf_t* conf)
 {
 	int err=-EINVAL;
-	sdla_t *card=wandev->private;
+	sdla_t *card=wandev->priv;
 
         wan_netif_set_priv(dev, NULL); 
 
@@ -2247,6 +2324,7 @@
 	sdla_t*			card;
 	netskb_t 		*skb;
 	wan_smp_flag_t 		flags;
+	int	i;
 
 	if (!chan){
 		DEBUG_EVENT("%s: Critical Error del_if_private() chan=NULL!\n",
@@ -2308,7 +2386,21 @@
 
 	aft_free_tx_descriptors(chan);
 	aft_free_rx_descriptors(chan);
-	
+
+	for (i=0;i<MAX_AFT_DMA_CHAINS;i++){
+
+		card->hw_iface.busdma_free(card->hw,&chan->rx_dma_chain_table[i]);
+		card->hw_iface.busdma_free(card->hw,&chan->tx_dma_chain_table[i]);
+	} 
+	card->hw_iface.busdma_tag_destroy(
+					card->hw,
+					&chan->rx_dma_chain_table[0],
+					MAX_AFT_DMA_CHAINS);
+	card->hw_iface.busdma_tag_destroy(
+					card->hw,
+					&chan->tx_dma_chain_table[0],
+					MAX_AFT_DMA_CHAINS);	
+
 	while ((skb=wan_skb_dequeue(&chan->wp_rx_free_list)) != NULL) {
 #ifdef __LINUX__
         	if (skb_shinfo(skb)->frag_list ||
@@ -2422,7 +2514,7 @@
 		aft_fifo_intr_ctrl(card, 0);
 		
 		/* Disable RTP Tap */
-		card->u.aft.rtp_len=0;
+		card->wandev.rtp_len=0;
 
 #if defined(CONFIG_PRODUCT_WANPIPE_TDM_VOICE)
 		if (card->wan_tdmv.sc) {
@@ -2705,7 +2797,7 @@
 
 static void disable_comm (sdla_t *card)
 {
-	wan_smp_flag_t flags,flags1;
+	wan_smp_flag_t smp_flags,smp_flags1;
 	int used_cnt;
 
 	AFT_FUNC_DEBUG();
@@ -2714,51 +2806,51 @@
 #else
 
    	/* Unconfiging, only on shutdown */
-	if (IS_TE1_CARD(card) || IS_56K_CARD(card)) {
-		wan_smp_flag_t smp_flags,smp_flags1;
-		if (card->wandev.fe_iface.pre_release){
-			card->wandev.fe_iface.pre_release(&card->fe);
-		}
-		card->hw_iface.hw_lock(card->hw,&smp_flags1);
-		wan_spin_lock_irq(&card->wandev.lock, &smp_flags);
-		__aft_fe_intr_ctrl(card, 0);
-		if (card->wandev.fe_iface.unconfig){
-			card->wandev.fe_iface.unconfig(&card->fe);
-		}
-		__aft_fe_intr_ctrl(card, 1);
-		wan_spin_unlock_irq(&card->wandev.lock, &smp_flags);
-		card->hw_iface.hw_unlock(card->hw,&smp_flags1);
-
+	if (card->wandev.fe_iface.pre_release){
+		card->wandev.fe_iface.pre_release(&card->fe);
 	}
-	
-	wan_spin_lock_irq(&card->wandev.lock,&flags);
-
-	wan_set_bit(CARD_DOWN,&card->wandev.critical);
+	card->hw_iface.hw_lock(card->hw,&smp_flags1);
+	wan_spin_lock_irq(&card->wandev.lock, &smp_flags);
+	__aft_fe_intr_ctrl(card, 0);
+	if (card->wandev.fe_iface.unconfig){
+		card->wandev.fe_iface.unconfig(&card->fe);
+	}
+	__aft_fe_intr_ctrl(card, 1);
+	wan_spin_unlock_irq(&card->wandev.lock, &smp_flags);
+	card->hw_iface.hw_unlock(card->hw,&smp_flags1);
 
 	/* Disable DMA ENGINE before we perform 
          * core reset.  Otherwise, we will receive
          * rx fifo errors on subsequent resetart. */
-	disable_data_error_intr(card,DEVICE_DOWN);
-	
+	wan_spin_lock_irq(&card->wandev.lock,&smp_flags);
+	disable_data_error_intr(card,LINK_DOWN);
+#if defined(AFT_RTP_SUPPORT)
 	aft_rtp_unconfig(card);
-
-	wan_spin_unlock_irq(&card->wandev.lock,&flags);
-
+#endif
+	wan_spin_unlock_irq(&card->wandev.lock,&smp_flags);
+	
 	aft_chip_unconfigure(card);
 
+	/* Only disable the irq completely once the
+	   chip unconfigure is executed */
+	wan_spin_lock_irq(&card->wandev.lock,&smp_flags);
+        disable_data_error_intr(card,DEVICE_DOWN);
+	wan_set_bit(CARD_DOWN,&card->wandev.critical);
+	wan_spin_unlock_irq(&card->wandev.lock,&smp_flags);
+	
 	WP_DELAY(10);
 	
 
 	card->hw_iface.getcfg(card->hw, SDLA_USEDCNT, &used_cnt);
 	
-	card->hw_iface.hw_lock(card->hw,&flags1);
-	wan_spin_lock_irq(&card->wandev.lock,&flags);
+	card->hw_iface.hw_lock(card->hw,&smp_flags1);
+	wan_spin_lock_irq(&card->wandev.lock,&smp_flags);
        	__aft_fe_intr_ctrl(card, 0);
 	aft_hwdev[card->wandev.card_type].aft_led_ctrl(card, WAN_AFT_RED, 0,WAN_AFT_ON);
 	aft_hwdev[card->wandev.card_type].aft_led_ctrl(card, WAN_AFT_GREEN, 0, WAN_AFT_ON);
        	__aft_fe_intr_ctrl(card, 1);
-	wan_spin_unlock_irq(&card->wandev.lock,&flags);
-	card->hw_iface.hw_unlock(card->hw,&flags1);
+	wan_spin_unlock_irq(&card->wandev.lock,&smp_flags);
+	card->hw_iface.hw_unlock(card->hw,&smp_flags1);
 
 	__sdla_pull_ptr_isr_array(card->hw,card,card->wandev.comm_port);
 
@@ -2766,9 +2858,9 @@
 		DEBUG_EVENT("%s: Global Chip Shutdown Usage=%d\n",
 				card->devname,used_cnt);
 
-		wan_spin_lock_irq(&card->wandev.lock,&flags);
+		wan_spin_lock_irq(&card->wandev.lock,&smp_flags);
 		aft_global_chip_disable(card);		
-		wan_spin_unlock_irq(&card->wandev.lock,&flags);
+		wan_spin_unlock_irq(&card->wandev.lock,&smp_flags);
 	}
 
 	
@@ -3134,7 +3226,6 @@
 	if (card) {
 #if defined(CONFIG_PRODUCT_WANPIPE_TDM_VOICE)
       		if (card->wan_tdmv.sc &&
-		    !card->u.aft.rtp_len &&
 		    card->wandev.config_id != WANCONFIG_AFT_ANALOG && 
 		    chan->common.usedby == TDM_VOICE) {
 			chan->if_stats.rx_packets = card->wandev.stats.rx_packets;
@@ -3171,9 +3262,7 @@
 {
 	private_area_t* chan= (private_area_t*)wan_netif_priv(dev);
 	sdla_t *card;
-#if defined(__LINUX__)
 	wan_smp_flag_t smp_flags;
-#endif
 	wan_udp_pkt_t *wan_udp_pkt;
 	int err=-EOPNOTSUPP;
 
@@ -4013,7 +4102,6 @@
 			if (chan->common.usedby != API && data_error){
 				goto rx_comp_error;
 			}	
-
 		}
 	}
 
@@ -4044,7 +4132,6 @@
 	}
 
 
-
 	*pkt_error=rx_el->pkt_error;
 
 	/* After a RX FIFO overflow, we must mark max 7 
@@ -4069,12 +4156,14 @@
 		}
 	}
 
-
 	if (len > aft_rx_copyback){
 		/* The rx size is big enough, thus
 		 * send this buffer up the stack
 		 * and allocate another one */
 		memset(wan_skb_data(skb),0,sizeof(wp_rx_element_t));
+#if defined(__FreeBSD__)
+		wan_skb_trim(skb,sizeof(wp_rx_element_t));	
+#endif
 		wan_skb_put(skb,len);	
 		wan_skb_pull(skb, sizeof(wp_rx_element_t));
 		*new_skb=skb;
@@ -4094,6 +4183,9 @@
 		}
 
 		buf=wan_skb_put((*new_skb),len);
+#if defined(__FreeBSD__)
+		wan_skb_trim(skb,sizeof(wp_rx_element_t));	
+#endif
 		memcpy(buf,wan_skb_tail(skb),len);
 
 		aft_init_requeue_free_skb(chan, skb);
@@ -4387,8 +4479,6 @@
 		
 		new_skb=NULL;
 		pkt_error=0;
-	
-
 		
 		/* The post function will take care
 		 * of the skb and new_skb buffer.
@@ -5031,8 +5121,7 @@
 				}
 				
 #if defined(CONFIG_PRODUCT_WANPIPE_TDM_VOICE)
-				if (tmp_card->wan_tdmv.sc &&
-		    		    !tmp_card->u.aft.rtp_len) {
+				if (tmp_card->wan_tdmv.sc) {
 					aft_voice_span_rx_tx(tmp_card,
 							     ring_buf_enabled);
 				}else
@@ -5067,7 +5156,6 @@
 #endif
 #if defined(CONFIG_PRODUCT_WANPIPE_TDM_VOICE)
 		if (card->wan_tdmv.sc &&
-		    !card->u.aft.rtp_len &&
 		    card->wandev.config_id != WANCONFIG_AFT_ANALOG) {
 			u32 dmareg;
 		        aft_voice_span_rx_tx(card, 0);
@@ -7076,7 +7164,7 @@
 	private_area_t *chan = (private_area_t *)data;
 	sdla_t *card = chan->card;
 	u32 reg,dma_descr,dma_status;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 
 	if (wan_test_and_set_bit(TX_HANDLER_BUSY,&chan->dma_status)){
 		DEBUG_EVENT("%s: SMP Critical in %s\n",
@@ -7180,7 +7268,7 @@
 	private_area_t *chan = (private_area_t *)data;
 	sdla_t *card = chan->card;
 	u32 reg,dma_descr;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 
 	if (wan_test_and_set_bit(TX_HANDLER_BUSY,&chan->dma_status)){
 		DEBUG_EVENT("%s: SMP Critical in %s\n",
@@ -7273,7 +7361,7 @@
  * aft_dma_chain_tx
  *
  */
-static int aft_dma_chain_tx(aft_dma_chain_t *dma_chain,private_area_t *chan, int intr,int fifo)
+static int aft_dma_chain_tx(wan_dma_descr_t *dma_chain,private_area_t *chan, int intr,int fifo)
 {
 
 #define dma_descr   dma_chain->dma_descr
@@ -7288,8 +7376,9 @@
 	dma_descr=(chan->logic_ch_num<<4) + (dma_ch_indx*AFT_DMA_INDEX_OFFSET) + 
 		  AFT_PORT_REG(card,AFT_TX_DMA_HI_DESCR_BASE_REG);
 
-	DEBUG_DMA("%s:%d: chan logic ch=%ld chain=%d dma_descr=0x%x set!\n",
-                    __FUNCTION__,__LINE__,chan->logic_ch_num,dma_ch_indx,dma_descr);
+	DEBUG_DMA("%s: %s:%s: LogicCh=%ld ChIndex=%d DmaDesc=0x%x set\n",
+                    		__FUNCTION__, card->devname, chan->if_name,
+				chan->logic_ch_num,dma_ch_indx,dma_descr);
 
 	card->hw_iface.bus_read_4(card->hw,dma_descr,&reg);
 
@@ -7340,8 +7429,9 @@
 		len_align=1;
 	}
 
-	DEBUG_DMA("%s: TXDMA_LO=0x%X PhyAddr=0x%X DmaDescr=0x%X Len=%i\n",
-			__FUNCTION__,reg,(int)dma_chain->dma_addr,dma_descr,len);
+	DEBUG_DMA("%s: %s:%s: TXDMA_LO=0x%X PhyAddr=0x%X DmaDescr=0x%X Len=%d\n",
+			__FUNCTION__,card->devname,chan->if_name,
+			reg,dma_chain->dma_addr,dma_descr,len);
 
 	card->hw_iface.bus_write_4(card->hw,dma_descr,reg);
 
@@ -7404,8 +7494,9 @@
 		wan_set_bit(AFT_TXDMA_HI_DMA_CMD_BIT,&reg);
 	}
 
-	DEBUG_DMA("%s: TXDMA_HI=0x%X DmaDescr=0x%X Len=%d Intr=%d\n",
-			__FUNCTION__,reg,dma_descr,len,intr);
+	DEBUG_DMA("%s:: %s:%s: TXDMA_HI=0x%X DmaDescr=0x%X Len=%d Intr=%d\n",
+			__FUNCTION__,card->devname,chan->if_name,
+			reg,dma_descr,len,intr);
 
 	card->hw_iface.bus_write_4(card->hw,dma_descr,reg);
 
@@ -7426,15 +7517,17 @@
  * aft_dma_chain_init
  *
  */
-static void aft_tx_dma_chain_init(private_area_t *chan, aft_dma_chain_t *dma_chain)
+static void aft_tx_dma_chain_init(private_area_t *chan, wan_dma_descr_t *dma_chain)
 {
+#define card	    chan->card
 
-	if (dma_chain->dma_addr){
-		chan->card->hw_iface.pci_unmap_dma(chan->card->hw,
-			 dma_chain->dma_addr-dma_chain->dma_offset,
-	 		 dma_chain->dma_map_len,
-	 		 PCI_DMA_TODEVICE);
-	}
+	card->hw_iface.busdma_sync(	card->hw,
+					dma_chain,
+					1, 1,
+					SDLA_DMA_POSTWRITE);
+	card->hw_iface.busdma_unmap(	card->hw,
+					dma_chain,
+					SDLA_DMA_POSTWRITE);
 
 	if (dma_chain->skb){
 		if (!chan->hdlc_eng){
@@ -7451,34 +7544,28 @@
 			dma_chain->skb=NULL;
 		}
 	}
-	
-	dma_chain->dma_addr=0;
-	dma_chain->dma_len=0;
-	dma_chain->dma_map_len=dma_chain->dma_len;
-			
 	wan_clear_bit(0,&dma_chain->init);
+#undef card
 }
 
-static void aft_rx_dma_chain_init(private_area_t *chan, aft_dma_chain_t *dma_chain)
+static void aft_rx_dma_chain_init(private_area_t *chan, wan_dma_descr_t *dma_chain)
 {
+#define card	chan->card
 
-	if (dma_chain->dma_addr){
-		chan->card->hw_iface.pci_unmap_dma(chan->card->hw,
-			 dma_chain->dma_addr-dma_chain->dma_offset,
-	 		 dma_chain->dma_map_len,
-	 		 PCI_DMA_FROMDEVICE);
-	}
+	card->hw_iface.busdma_sync(	card->hw,
+					dma_chain,
+					1, 1,
+					SDLA_DMA_POSTREAD);
+	card->hw_iface.busdma_unmap(	card->hw,
+					dma_chain,
+					SDLA_DMA_POSTREAD);
 
 	if (dma_chain->skb){
 		aft_init_requeue_free_skb(chan,dma_chain->skb);
 		dma_chain->skb=NULL;
 	}
-	
-	dma_chain->dma_addr=0;
-	dma_chain->dma_len=0;
-	dma_chain->dma_map_len=0;
-			
 	wan_clear_bit(0,&dma_chain->init);
+#undef card
 }
 
 
@@ -7486,7 +7573,7 @@
 static int aft_dma_voice_tx(sdla_t *card, private_area_t *chan)
 {
 	int err=0;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 reg, dma_ram_desc;
 
 	if (wan_test_and_set_bit(TX_DMA_BUSY,&chan->dma_status)){
@@ -7498,6 +7585,10 @@
 	
 	dma_chain = &chan->tx_dma_chain_table[0];
 
+	DEBUG_DMA("%s: %s:%s:: Chain %d  Used %ld\n",
+			__FUNCTION__,card->devname,chan->if_name,
+			dma_chain->index,dma_chain->init);
+	
 	/* If the current DMA chain is in use,then
 	 * all chains are busy */
 	if (wan_test_and_set_bit(0,&dma_chain->init)){
@@ -7533,29 +7624,19 @@
 		buf=wan_skb_put(dma_chain->skb,chan->mtu*2);
 		memset(buf,chan->idle_flag,chan->mtu*2);
 
-		dma_chain->dma_addr = card->hw_iface.pci_map_dma(card->hw,
-                                           wan_skb_data(dma_chain->skb),
-					   chan->dma_mru,
-					   PCI_DMA_TODEVICE);
-		
-        	if (dma_chain->dma_addr & AFT_TDMV_BUF_MASK) {
-                	dma_chain->dma_offset = 
-				AFT_TDMV_BUF_MASK - (dma_chain->dma_addr & AFT_TDMV_BUF_MASK) + 1;
-
-			dma_chain->dma_virt = wan_skb_data(dma_chain->skb) + dma_chain->dma_offset;
-			dma_chain->dma_addr += dma_chain->dma_offset;
-
-		} else {
-                       dma_chain->dma_offset=0; 
-                       dma_chain->dma_virt = wan_skb_data(dma_chain->skb);
-		}               	
-		
-		dma_chain->dma_len = wan_skb_len(dma_chain->skb);
-		dma_chain->dma_map_len=chan->dma_mru;
-
+		/* A-DMA */
+		card->hw_iface.busdma_map(	card->hw,
+						dma_chain,
+						wan_skb_data(dma_chain->skb),
+						wan_skb_len(dma_chain->skb),
+						chan->dma_mru,
+						SDLA_DMA_PREWRITE);
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						1, 1,
+						SDLA_DMA_PREWRITE);
 	}
 
-
 	dma_ram_desc=chan->logic_ch_num*4 + 
 			AFT_PORT_REG(card,AFT_DMA_CHAIN_RAM_BASE_REG);
 	card->hw_iface.bus_read_4(card->hw,dma_ram_desc,&reg);
@@ -7590,7 +7671,7 @@
 static int aft_dma_tx (sdla_t *card,private_area_t *chan)
 {
 	int err=0, intr=0, cnt=0;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	netskb_t *skb=NULL;
 
 	if (chan->channelized_cfg && !chan->hdlc_eng){
@@ -7685,17 +7766,19 @@
 		}
 			
 		dma_chain->skb=skb;
-		
-		dma_chain->dma_addr = card->hw_iface.pci_map_dma(card->hw,
+
+		/* A-DMA */
+		card->hw_iface.busdma_map(	card->hw,
+						dma_chain,
 						wan_skb_data(dma_chain->skb),
 						wan_skb_len(dma_chain->skb),
-						PCI_DMA_TODEVICE); 	
+						wan_skb_len(dma_chain->skb),
+						SDLA_DMA_PREWRITE);
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						1, chan->single_dma_chain,
+						SDLA_DMA_PREWRITE);
 
-		dma_chain->dma_len = wan_skb_len(dma_chain->skb);
-		dma_chain->dma_map_len=dma_chain->dma_len;
-		dma_chain->dma_offset=0;
-		
-	
 		DEBUG_TEST("%s: DMA Chain %d:  Cur=%d Pend=%d\n",
 				chan->if_name,dma_chain->index,
 				chan->tx_chain_indx,chan->tx_pending_chain_indx);
@@ -7763,7 +7846,7 @@
  *
  **********************************************************************/
 
-static int aft_dma_chain_rx(aft_dma_chain_t *dma_chain, private_area_t *chan, int intr, int fifo)
+static int aft_dma_chain_rx(wan_dma_descr_t *dma_chain, private_area_t *chan, int intr, int fifo)
 {
 #define dma_descr   dma_chain->dma_descr
 #define reg	    dma_chain->reg
@@ -7784,8 +7867,10 @@
     	dma_descr=(chan->logic_ch_num<<4) + (dma_ch_indx*AFT_DMA_INDEX_OFFSET) + 
 		   AFT_PORT_REG(card,AFT_RX_DMA_LO_DESCR_BASE_REG);
 
-	DEBUG_DMA("%s: RxDMA_LO(%ld) = 0x%X, DmaDescr=0x%X\n",
-		__FUNCTION__,chan->logic_ch_num,reg,dma_descr);
+	DEBUG_DMA("%s: %s:%s: RxDMA_LO(%ld) = 0x%X, PhyAddr:%X DmaDescr=0x%X (%p)\n",
+				__FUNCTION__,card->devname,chan->if_name,
+				chan->logic_ch_num,reg,
+				dma_chain->dma_addr, dma_descr,dma_chain);
 
 	card->hw_iface.bus_write_4(card->hw,dma_descr,reg);
 
@@ -7831,8 +7916,9 @@
 		wan_set_bit(AFT_RXDMA_HI_DMA_CMD_BIT,&reg);
 	}
 
-	DEBUG_DMA("%s: RXDMA_HI(%ld) = 0x%X, DmaDescr=0x%X\n",
- 	             __FUNCTION__,chan->logic_ch_num,reg,dma_descr);
+	DEBUG_DMA("%s: %s:%s: RXDMA_HI(%ld) = 0x%X, DmaDescr=0x%X\n",
+			__FUNCTION__,card->devname,chan->if_name,
+			chan->logic_ch_num,reg,dma_descr);
 
 	card->hw_iface.bus_write_4(card->hw,dma_descr,reg);
 
@@ -7849,7 +7935,7 @@
 static int aft_dma_voice_rx(sdla_t *card, private_area_t *chan)
 {
 	int err=0;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 reg, dma_ram_desc;
 
 	if (wan_test_and_set_bit(RX_DMA_BUSY,&chan->dma_status)){
@@ -7860,6 +7946,9 @@
 
 	dma_chain = &chan->rx_dma_chain_table[0];
 
+	DEBUG_DMA("%s: %s:%s: Chain %d  Used %ld\n",
+			__FUNCTION__,card->devname,chan->if_name,
+			dma_chain->index,dma_chain->init);
 	
 	/* If the current DMA chain is in use,then
 	 * all chains are busy */
@@ -7886,50 +7975,21 @@
 
 		wan_skb_init(dma_chain->skb,16);
 		wan_skb_trim(dma_chain->skb,0);
-		
-#if defined(__LINUX__)
-		dma_chain->dma_addr = card->hw_iface.pci_map_dma(card->hw,
+	
+		/* A-DMA */
+		card->hw_iface.busdma_map(	card->hw,
+						dma_chain,
 						wan_skb_tail(dma_chain->skb),
 						chan->dma_mru,
-		    		       		PCI_DMA_FROMDEVICE); 
-
-		if (dma_chain->dma_addr & AFT_TDMV_BUF_MASK) {
-                	dma_chain->dma_offset = 
-				AFT_TDMV_BUF_MASK - (dma_chain->dma_addr & AFT_TDMV_BUF_MASK) + 1;
-
-			dma_chain->dma_virt = wan_skb_tail(dma_chain->skb) + dma_chain->dma_offset;
-			dma_chain->dma_addr += dma_chain->dma_offset;
-
-		} else {
-                       	dma_chain->dma_offset=0; 
-                       	dma_chain->dma_virt = wan_skb_tail(dma_chain->skb);
-		}
-		
-		dma_chain->dma_len  = chan->dma_mru-dma_chain->dma_offset;
-		dma_chain->dma_map_len=dma_chain->dma_len;
-
-		DEBUG_TEST("%s: RXDMA PHY = 0x%08X VIRT = %p \n", 
+						chan->dma_mru,
+						SDLA_DMA_PREREAD);
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						MAX_AFT_DMA_CHAINS, chan->single_dma_chain,
+						SDLA_DMA_PREREAD);
+		DEBUG_DMA("%s: RXDMA PHY = 0x%08X VIRT = %p \n", 
 				chan->if_name,
 				dma_chain->dma_addr,wan_skb_tail(dma_chain->skb)+dma_chain->dma_offset);
-#else
-		dma_chain->dma_addr = 
-			       	virt_to_phys(wan_skb_tail(dma_chain->skb));
-
-                if (dma_chain->dma_addr & AFT_TDMV_BUF_MASK) {
-		      	dma_chain->dma_offset = 
-				AFT_TDMV_BUF_MASK - 
-				(dma_chain->dma_addr & AFT_TDMV_BUF_MASK) + 1;
-			dma_chain->dma_virt = wan_skb_tail(dma_chain->skb) + dma_chain->dma_offset;
-			dma_chain->dma_addr = virt_to_phys(wan_skb_tail(dma_chain->dma_virt));
-		} else {
-			dma_chain->dma_offset=0; 
-                        dma_chain->dma_virt = wan_skb_tail(dma_chain->skb); 
-		}
-		
-		dma_chain->dma_len  = chan->dma_mru;
-		dma_chain->dma_map_len=dma_chain->dma_len;
-		
-#endif
 	}else{
 		wan_skb_init(dma_chain->skb,16);
 		wan_skb_trim(dma_chain->skb,0);
@@ -7959,11 +8019,10 @@
 static int aft_dma_rx(sdla_t *card, private_area_t *chan)
 {
 	int err=0, intr=0;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	int cur_dma_ptr, i,max_dma_cnt,free_queue_len;
 	u32 reg, dma_ram_desc;
 
-
 	if (chan->channelized_cfg && !chan->hdlc_eng){
 		return aft_dma_voice_rx(card,chan);
 	}
@@ -8042,16 +8101,17 @@
 			}
 			
 		}
-		
-		dma_chain->dma_addr = card->hw_iface.pci_map_dma(card->hw,
-			      	       		wan_skb_tail(dma_chain->skb),
-						chan->dma_mru,
-		    		       		PCI_DMA_FROMDEVICE);
-
-		dma_chain->dma_len  = chan->dma_mru;
-		dma_chain->dma_map_len=dma_chain->dma_len;
-		dma_chain->dma_offset=0;
 
+		card->hw_iface.busdma_map(	card->hw,
+						dma_chain,
+						wan_skb_tail(dma_chain->skb),
+						chan->dma_mru,
+						chan->dma_mru,
+						SDLA_DMA_PREREAD);
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						1, chan->single_dma_chain,
+						SDLA_DMA_PREREAD);
 		intr=0;
 		if (!wan_test_bit(RX_INTR_PENDING,&chan->dma_chain_status)){
 			
@@ -8128,7 +8188,7 @@
 	sdla_t *card = chan->card;
 	u32 reg,dma_descr;
 	wp_rx_element_t *rx_el;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	int i,max_dma_cnt, cur_dma_ptr;
 	int rx_data_available=0;
 	u32 dma_ram_desc;
@@ -8210,11 +8270,6 @@
 			wan_clear_bit(RX_INTR_PENDING,&chan->dma_chain_status);	
 		}
 
-		card->hw_iface.pci_unmap_dma(card->hw,
-				 dma_chain->dma_addr-dma_chain->dma_offset,
-				 dma_chain->dma_map_len,
-				 PCI_DMA_FROMDEVICE);
-
 		if (sizeof(wp_rx_element_t) > wan_skb_headroom(dma_chain->skb)){
 			if (WAN_NET_RATELIMIT()){
 				DEBUG_EVENT("%s: Rx error: rx_el=%u > max head room=%u\n",
@@ -8247,9 +8302,32 @@
 
 		card->hw_iface.bus_read_4(card->hw,dma_descr, &rx_el->reg);
 
+		/* New for FreeBSD/Solaris */
+		rx_el->len=rx_el->reg&AFT_RXDMA_HI_DMA_LENGTH_MASK;
+		if (chan->hdlc_eng){
+			/* In HDLC mode, calculate rx length based
+			* on alignment value, received from DMA */
+			rx_el->len=((((chan->dma_mru>>2)-1)-rx_el->len)<<2) - (~(rx_el->align)&AFT_RXDMA_LO_ALIGN_MASK);	
+		}else{
+			/* In Transparent mode, our RX buffer will always be
+			* aligned to the 32bit (word) boundary, because
+			* the RX buffers are all of equal length  */
+			rx_el->len=(((chan->mru>>2)-rx_el->len)<<2) - (~(0x03)&AFT_RXDMA_LO_ALIGN_MASK);
+		}
+
 		rx_el->pkt_error= dma_chain->pkt_error;
 		rx_el->dma_addr = dma_chain->dma_addr;
 
+		/* A-DMA */
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						1, chan->single_dma_chain,
+						SDLA_DMA_POSTREAD);
+		dma_chain->dma_len = rx_el->len;	/* update real dma len*/
+		card->hw_iface.busdma_unmap(	card->hw,
+						dma_chain,
+						SDLA_DMA_POSTREAD);
+
 		wan_skb_queue_tail(&chan->wp_rx_complete_list,dma_chain->skb);
 		rx_data_available=1;
 
@@ -8262,9 +8340,6 @@
 
 rx_hndlr_skip_rx:
 		dma_chain->skb=NULL;
-		dma_chain->dma_addr=0;
-		dma_chain->dma_len=0;
-		dma_chain->dma_map_len=dma_chain->dma_len;
 		dma_chain->pkt_error=0;
 		wan_clear_bit(0,&dma_chain->init);
 
@@ -8369,7 +8444,7 @@
 #if 0
 	u32 reg,cur_dma_ptr;
 	sdla_t *card=chan->card;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 dma_descr;
 	int i;
 	u32 dma_ram_desc;
@@ -8401,7 +8476,7 @@
 {
 	u32 reg,cur_dma_ptr,lo_reg;
 	sdla_t *card=chan->card;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 dma_descr;
 	int i;
 	u32 dma_ram_desc;
@@ -8455,7 +8530,7 @@
 {
 	u32 reg,cur_dma_ptr,lo_reg;
 	sdla_t *card=chan->card;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 dma_descr;
 	int i;
 	u32 dma_ram_desc;
@@ -8549,7 +8624,7 @@
 {
 	u32 reg;
 	sdla_t *card=chan->card;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	u32 dma_descr;
 	int i;
 	unsigned int dma_cnt=MAX_AFT_DMA_CHAINS;
@@ -8582,19 +8657,19 @@
 		reg=0;
 		card->hw_iface.bus_write_4(card->hw,dma_descr,reg);
 
-		card->hw_iface.pci_unmap_dma(card->hw,
-				dma_chain->dma_addr-dma_chain->dma_offset,
-				dma_chain->dma_map_len,
-				PCI_DMA_FROMDEVICE);
+		card->hw_iface.busdma_sync(	card->hw,
+						dma_chain,
+						1, chan->single_dma_chain,
+						SDLA_DMA_POSTREAD);
+		card->hw_iface.busdma_unmap(	card->hw,
+						dma_chain,
+						SDLA_DMA_POSTREAD);
 
 		if (dma_chain->skb){
 			aft_init_requeue_free_skb(chan, dma_chain->skb);
 		}
 
 		dma_chain->skb=NULL;
-		dma_chain->dma_addr=0;
-		dma_chain->dma_len=0;
-		dma_chain->dma_map_len=dma_chain->dma_len;
 		dma_chain->pkt_error=0;
 		wan_clear_bit(0,&dma_chain->init);
 	}
@@ -8637,7 +8712,7 @@
 {
 	u32 reg,dma_descr;
 	sdla_t *card=chan->card;
-	aft_dma_chain_t *dma_chain;
+	wan_dma_descr_t *dma_chain;
 	int i;
 	void *skb;
 	unsigned int dma_cnt=MAX_AFT_DMA_CHAINS;
@@ -8893,8 +8968,12 @@
 static void aft_port_task (void * card_ptr, int arg)
 #endif
 {
-#if defined(__LINUX__) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))   
+#if defined(__LINUX__)
+# if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,20))   
         sdla_t 		*card = (sdla_t *)container_of(work, sdla_t, u.aft.port_task);
+# else
+	sdla_t 		*card = (sdla_t *)card_ptr;
+# endif
 #else
 	sdla_t 		*card = (sdla_t *)card_ptr;
 #endif 
@@ -9414,7 +9493,7 @@
 static int gtmp_cnt=0;
 static void aft_set_channel(sdla_t *card, int ch)
 {
-	aft_dma_chain_t	*tx_dma_chain;
+	wan_dma_descr_t	*tx_dma_chain;
 	u8		*buf;
 	private_area_t	*chan=(private_area_t*)card->u.aft.dev_to_ch_map[ch];
 	
@@ -9479,8 +9558,8 @@
 	u32	rx_offset=0;
 	u32	tx_offset=0;
 
-	aft_dma_chain_t *tx_dma_chain;
-	aft_dma_chain_t *rx_dma_chain;
+	wan_dma_descr_t *tx_dma_chain;
+	wan_dma_descr_t *rx_dma_chain;
 
 	tx_dma_chain = &chan->tx_dma_chain_table[0];
 	rx_dma_chain = &chan->rx_dma_chain_table[0]; 
@@ -9532,8 +9611,8 @@
 
 #if 0 
 defined(AFT_TDMV_BH_ENABLE) 
-			aft_dma_chain_t *tx_bh_dma_chain = &chan->tx_dma_chain_table[1];
-			aft_dma_chain_t *rx_bh_dma_chain = &chan->rx_dma_chain_table[1];
+			wan_dma_descr_t *tx_bh_dma_chain = &chan->tx_dma_chain_table[1];
+			wan_dma_descr_t *rx_bh_dma_chain = &chan->rx_dma_chain_table[1];
 
 			if (!rx_bh_dma_chain->skb){
 				rx_bh_dma_chain->skb=wan_skb_dequeue(&chan->wp_rx_free_list);
@@ -9576,20 +9655,10 @@
 					card->devname,chan->logic_ch_num,
 					chan->tdmv_chan);
 #if 1
-
-#if 0			
-#warning "RTP TAP ENABLED Not Finished"
-                        if (card->u.aft.rtp_len) { 
-		       		aft_rtp_tap(card,chan,
-				    	rx_dma_chain->dma_virt+rx_offset,
-				    	tx_dma_chain->dma_virt+tx_offset, 
-				    	chan->mtu);
-			}	
-#endif   		
 			WAN_TDMV_CALL(rx_chan,
 					(&card->wan_tdmv,chan->tdmv_chan,
-					rx_dma_chain->dma_virt+rx_offset,
-					tx_dma_chain->dma_virt+tx_offset),
+					(unsigned char*)rx_dma_chain->dma_virt+rx_offset,
+					(unsigned char*)tx_dma_chain->dma_virt+tx_offset),
 					err);
 #else
 #warning "NCDEBUG rx_chan disabled irq"
@@ -9660,7 +9729,26 @@
 	
 #else
 #if 1
+
+			card->hw_iface.busdma_sync(	card->hw,
+							&chan->tx_dma_chain_table[0],
+							MAX_AFT_DMA_CHAINS,
+							chan->single_dma_chain,
+							SDLA_DMA_POSTREAD);
+
 			WAN_TDMV_CALL(rx_tx_span, (card), err);
+
+			card->hw_iface.busdma_sync(	card->hw,
+							&chan->tx_dma_chain_table[0],
+							MAX_AFT_DMA_CHAINS,
+							chan->single_dma_chain,
+							SDLA_DMA_PREWRITE);
+			card->hw_iface.busdma_sync(	card->hw,
+							&chan->rx_dma_chain_table[0],
+							MAX_AFT_DMA_CHAINS,
+							chan->single_dma_chain,
+							SDLA_DMA_PREREAD);
+
 #else
 #warning "NCDEBUG: rx_tx_span disabled irq"
 #endif   
@@ -10567,13 +10655,6 @@
 	aft_hwdev[card->wandev.card_type].aft_led_ctrl(card, WAN_AFT_GREEN, 0, WAN_AFT_OFF);
 }
 
-enum {
-	WAN_TDM_RTP_NO_CHANGE,
-	WAN_TDM_RTP_CALL_START,
-	WAN_TDM_RTP_CALL_STOP
-};
-
-
 static int aft_hwec_config (sdla_t *card, private_area_t *chan, wanif_conf_t *conf, int ctrl)
 {
 	int err = 0;
@@ -10619,34 +10700,48 @@
 }               
 
 
-#if defined(__LINUX__)
+#if defined(AFT_RTP_SUPPORT)
+enum {
+	WAN_TDM_RTP_NO_CHANGE,
+	WAN_TDM_RTP_CALL_START,
+	WAN_TDM_RTP_CALL_STOP
+};
 
 static void aft_rtp_unconfig(sdla_t *card)  
 {
-        netskb_t *skb;
+	wan_rtp_chan_t *rtp_chan;
+	int i;
+	
+	card->wandev.rtp_len=0;  
 	
 	card->u.aft.cfg.rtp_ip=0;
 	card->u.aft.cfg.rtp_sample=0;
-	card->u.aft.rtp_len=0;    
-	if (card->u.aft.rtp_dev) {
-              	dev_put(card->u.aft.rtp_dev);
-		card->u.aft.rtp_dev=NULL;
+	  
+	if (card->wandev.rtp_dev) {
+              	dev_put(card->wandev.rtp_dev);
+		card->wandev.rtp_dev=NULL;
 	}
 
-	if ((skb=card->u.aft.rx_rtp_skb)) {
-		card->u.aft.rx_rtp_skb=NULL;
-         	wan_skb_free(skb);
+	for (i=0;i<32;i++) {
+		rtp_chan=&card->wandev.rtp_chan[i];
+		if (rtp_chan->rx_skb) {
+			wan_skb_free(rtp_chan->rx_skb);
+			rtp_chan->rx_skb=NULL;
+		}
+		if (rtp_chan->tx_skb) {
+			wan_skb_free(rtp_chan->tx_skb);
+			rtp_chan->rx_skb=NULL;
+		}
 	}
-
+	
 }           
+#endif
 
+#if defined(AFT_RTP_SUPPORT)
 static void aft_rtp_config(sdla_t *card)
 {
-
-/* RTP TAP Not finished yet */
-	return;
-
 	
+	return;
 #if 0
 	if (!card->u.aft.cfg.rtp_ip || !card->u.aft.cfg.rtp_sample) {
 		goto aft_rtp_init_exit;
@@ -10667,16 +10762,20 @@
 	card->u.aft.cfg.rtp_port=9000;
 	card->u.aft.cfg.rtp_ip=0x0100007F;
 	card->u.aft.cfg.rtp_sample=100;
-	card->u.aft.rtp_len = (card->u.aft.cfg.rtp_sample * 8) + sizeof(wan_rtp_pkt_t); 
+	card->wandev.rtp_len = (card->u.aft.cfg.rtp_sample * 8) + sizeof(wan_rtp_pkt_t); 
 	sprintf(card->u.aft.cfg.rtp_devname,"lo");
 
-	if ((card->u.aft.rtp_dev=dev_get_by_name(card->u.aft.cfg.rtp_devname)) == NULL){
+	if ((card->wandev.rtp_dev=dev_get_by_name(card->u.aft.cfg.rtp_devname)) == NULL){
 		DEBUG_EVENT("%s: Failed to open rtp tx device %s\n", 
 				card->devname,
 				card->u.aft.cfg.rtp_devname);
         	goto aft_rtp_init_exit;	
 	}	
 
+	card->wandev.rtp_tap=aft_rtp_tap;
+	
+	memset(card->wandev.rtp_chan,0,sizeof(card->wandev.rtp_chan));
+	
 	DEBUG_EVENT("%s: Configured rtp tap!\n",card->devname);
 	return;
 
@@ -10690,52 +10789,20 @@
 }
 
 
-#if 0
-static void aft_rtp_tap(sdla_t *card, private_area_t *chan, u8* rx, u8* tx, u32 len) 
+static __inline void aft_rtp_tap_chan(sdla_t *card, u8 *data, u32 len, 
+                                    netskb_t **skb_q, 
+				    u8 call_status, u8 chan)
 {
 	wan_rtp_pkt_t *pkt;
 	u8 *buf;
 	netskb_t *skb;	
-	u32 ecmap, call_status=WAN_TDM_RTP_NO_CHANGE;
-	
-	if (!card->u.aft.cfg.rtp_ip || 
-	    !card->u.aft.cfg.rtp_sample ||
-	    !card->u.aft.rtp_len ||
-	    !card->u.aft.rtp_dev) {
-         	return;
-	}
 
-	if (IS_T1_CARD(card)) {
-	 	ecmap=card->wandev.ec_map;
-        } else {
-		ecmap=card->wandev.ec_map << 1;    
-	}
-
-	if (1) { //wan_test_bit(chan->first_time_slot,&ecmap)) {
-		if (!wan_test_and_set_bit(0,&chan->tdm_call_status)) {
-        		/* Start of the call */
-			call_status=WAN_TDM_RTP_CALL_START;
-			DEBUG_TEST("%s: CALL Start on ch %i\n",
-					chan->if_name,chan->first_time_slot);
-		}
-	} else {
-               	if (!wan_test_bit(0,&chan->tdm_call_status)) {  
-			/* Call not up */
-        	     	return;   	
-		} 
-		call_status=WAN_TDM_RTP_CALL_STOP; 		
-	       	DEBUG_TEST("%s: CALL Stop on ch %i\n",
-	       		chan->if_name,chan->first_time_slot);
-	}
-
-	 	
-	if (!(skb=chan->rx_rtp_skb)) {
-		card->u.aft.rtp_len = (card->u.aft.cfg.rtp_sample * 8) + sizeof(wan_rtp_pkt_t);
-		chan->rx_rtp_skb=wan_skb_alloc(card->u.aft.rtp_len+128);
-		if (!chan->rx_rtp_skb) {
+	if (!(skb=*skb_q)) {
+		*skb_q=wan_skb_alloc(card->wandev.rtp_len+128);
+		if (!*skb_q) {
                  	return;
 		}
-		skb=chan->rx_rtp_skb;
+		skb=*skb_q;
 		pkt = (wan_rtp_pkt_t*)wan_skb_put(skb,sizeof(wan_rtp_pkt_t));
 		memset(pkt,0,sizeof(wan_rtp_pkt_t));
 		pkt->rtp_hdr.version=2;
@@ -10754,21 +10821,21 @@
 	}
 
 	buf=wan_skb_put(skb,len);
-	memcpy(buf,rx,len);
+	memcpy(buf,data,len);
 	pkt->rtp_hdr.ts++;
 
-        if (wan_skb_len(skb) >= card->u.aft.rtp_len || 
+        if (wan_skb_len(skb) >= card->wandev.rtp_len || 
 	    call_status==WAN_TDM_RTP_CALL_STOP) {
 	        netskb_t *nskb;
 		wan_ip_udp_setup(card,
 				 card->u.aft.cfg.rtp_ip,
-				 card->u.aft.cfg.rtp_port+chan->first_time_slot,
+				 card->u.aft.cfg.rtp_port+chan,
 				 wan_skb_data(skb),
 				 wan_skb_len(skb)-sizeof(wan_rtp_pkt_t)); 
 		nskb=wan_skb_clone(skb);
 		if (nskb) {
                 	nskb->next = nskb->prev = NULL;
-			nskb->dev = card->u.aft.rtp_dev;
+			nskb->dev = card->wandev.rtp_dev;
 			nskb->protocol = htons(ETH_P_802_2);
 			nskb->mac.raw  = wan_skb_data(nskb);  
 			//nskb->nh.raw   = wan_skb_data(nskb);
@@ -10779,14 +10846,58 @@
 
 		#if 0
 		/* Disable rtp (debugging) */
-		card->u.aft.rtp_len=0;
+		card->wandev.rtp_len=0;
 		#endif
-		
 	}	
 }
-#endif
-#endif
 
+static void aft_rtp_tap(void *card_ptr, u8 chan, u8* rx, u8* tx, u32 len) 
+{
+	sdla_t *card = (sdla_t *)card_ptr;
+	u8 call_status=WAN_TDM_RTP_NO_CHANGE;
+	wan_rtp_chan_t *rtp_chan;
+	int span = card->tdmv_conf.span_no-1;
+	
+	
+	if (!card->u.aft.cfg.rtp_ip || 
+	    !card->u.aft.cfg.rtp_sample ||
+	    !card->wandev.rtp_len ||
+	    !card->wandev.rtp_dev) {
+         	return;
+	}
+	
+	if (chan >= 32) {
+		if (WAN_NET_RATELIMIT()) {
+			DEBUG_EVENT("%s: Internal Error: rtp tap chan out of range %i\n",
+					card->devname,chan);
+		}
+		return;
+	}
+	
+	rtp_chan = &card->wandev.rtp_chan[chan];
+
+	if (1) { //wan_test_bit(chan,&card->wandev.rtp_tap_call_map)) {
+		if (!wan_test_and_set_bit(chan,card->wandev.rtp_tap_call_status)) {
+        		/* Start of the call */
+			call_status=WAN_TDM_RTP_CALL_START;
+			DEBUG_EVENT("%s: CALL Start on ch %i\n",
+					card->devname,chan);
+		}
+	} else {
+               	if (!wan_test_bit(chan,card->wandev.rtp_tap_call_status)) {  
+			/* Call not up */
+        	     	return;   	
+		} 
+		call_status=WAN_TDM_RTP_CALL_STOP; 		
+	       	DEBUG_EVENT("%s: CALL Stop on ch %i\n",
+	       		card->devname,chan);
+	}
+
+	aft_rtp_tap_chan(card, rx, len, &rtp_chan->rx_skb, call_status, span+chan);
+	aft_rtp_tap_chan(card, tx, len, &rtp_chan->tx_skb, call_status, span+chan+1);	
+	
+}
+#endif
 
 static int aft_find_master_if_and_dchan(sdla_t *card, int *master_if, u32 active_ch)
 {
@@ -10905,12 +11016,15 @@
 	memcpy(buf, wan_udp_pkt->wan_udp_data, wan_udp_pkt->wan_udp_data_len);
 
 
+#if defined(__LINUX__)
 	skb->next = skb->prev = NULL;
         skb->dev = dev;
         skb->protocol = htons(ETH_P_IP);
         skb->mac.raw  = wan_skb_data(skb);
         dev_queue_xmit(skb);
-
+#elif defined(__FreeBSD__) || defined(__OpenBSD__)
+# warning "FIXME: Add code for digital loop test"
+#endif
 	return 0;
 }
 /****** End ****************************************************************/
