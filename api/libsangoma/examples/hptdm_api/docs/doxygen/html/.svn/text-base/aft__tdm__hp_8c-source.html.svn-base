<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>hptdm_api: aft_tdm_hp.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<h1>aft_tdm_hp.c</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*****************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">* aft_tdm_hp.c: Example code for HP TDM API Library</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* Author(s):    Nenad Corbic &lt;ncorbic@sangoma.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* Copyright:    (c) 2008 Sangoma Technologies Inc.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">*               This program is free software; you can redistribute it and/or</span>
<a name="l00009"></a>00009 <span class="comment">*               modify it under the terms of the GNU General Public License</span>
<a name="l00010"></a>00010 <span class="comment">*               as published by the Free Software Foundation; either version</span>
<a name="l00011"></a>00011 <span class="comment">*               2 of the License, or (at your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">* ============================================================================</span>
<a name="l00013"></a>00013 <span class="comment">* Description:</span>
<a name="l00014"></a>00014 <span class="comment">*</span>
<a name="l00015"></a>00015 <span class="comment">*/</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include "aft_tdm_hp.h"</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="comment">/*</span>
<a name="l00021"></a>00021 <span class="comment"> * Global flags used by this program</span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 <span class="keyword">static</span> <span class="keywordtype">int</span> system_flag=0;
<a name="l00024"></a>00024 <span class="keyword">static</span> <span class="keywordtype">int</span> system_threads=0;
<a name="l00025"></a>00025 <span class="keyword">static</span> <span class="keywordtype">int</span> system_debug=10;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">/*</span>
<a name="l00028"></a>00028 <span class="comment"> * Global defines for our program.  Create an array of spans and chans.</span>
<a name="l00029"></a>00029 <span class="comment"> */</span>
<a name="l00030"></a>00030 <a class="code" href="structspan__idx.html">span_idx_t</a> span_list[MAX_SPANS];
<a name="l00031"></a>00031 <a class="code" href="structchan__idx.html">chan_idx_t</a> chan_list[MAX_SPANS][MAX_CHANS];
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">/*------------------------------------------</span>
<a name="l00034"></a>00034 <span class="comment">  Utilites</span>
<a name="l00035"></a>00035 <span class="comment"> *-----------------------------------------*/</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">/*</span>
<a name="l00038"></a>00038 <span class="comment"> * Utility used to print packets</span>
<a name="l00039"></a>00039 <span class="comment"> */</span>
<a name="l00040"></a>00040 <span class="keywordtype">void</span> print_packet(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *buf, <span class="keywordtype">int</span> len)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042         <span class="keywordtype">int</span> x;
<a name="l00043"></a>00043         printf(<span class="stringliteral">"{  | "</span>);
<a name="l00044"></a>00044         <span class="keywordflow">for</span> (x=0;x&lt;len;x++){
<a name="l00045"></a>00045                 <span class="keywordflow">if</span> (x &amp;&amp; x%24 == 0){
<a name="l00046"></a>00046                         printf(<span class="stringliteral">"\n  "</span>);
<a name="l00047"></a>00047                 }
<a name="l00048"></a>00048                 <span class="keywordflow">if</span> (x &amp;&amp; x%8 == 0)
<a name="l00049"></a>00049                         printf(<span class="stringliteral">" | "</span>);
<a name="l00050"></a>00050                 printf(<span class="stringliteral">"%02x "</span>,buf[x]);
<a name="l00051"></a>00051         }
<a name="l00052"></a>00052         printf(<span class="stringliteral">"}\n"</span>);
<a name="l00053"></a>00053 }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/*</span>
<a name="l00057"></a>00057 <span class="comment"> * Utility used to implement print to syslog</span>
<a name="l00058"></a>00058 <span class="comment"> */</span>
<a name="l00059"></a>00059 <span class="keywordtype">void</span> __log_printf(<span class="keywordtype">int</span> level, FILE *fp, <span class="keywordtype">char</span> *file, <span class="keyword">const</span> <span class="keywordtype">char</span> *func, <span class="keywordtype">int</span> line, <span class="keywordtype">char</span> *fmt, ...)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="keywordtype">char</span> *data;
<a name="l00062"></a>00062     <span class="keywordtype">int</span> ret = 0;
<a name="l00063"></a>00063     va_list ap;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="keywordflow">if</span> (socket &lt; 0) {
<a name="l00066"></a>00066                 <span class="keywordflow">return</span>;
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="keywordflow">if</span> (level &amp;&amp; level &gt; system_debug) {
<a name="l00070"></a>00070                 <span class="keywordflow">return</span>;
<a name="l00071"></a>00071     }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     va_start(ap, fmt);
<a name="l00074"></a>00074 <span class="preprocessor">#ifdef SOLARIS</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>    data = (<span class="keywordtype">char</span> *) smg_malloc(2048);
<a name="l00076"></a>00076     vsnprintf(data, 2048, fmt, ap);
<a name="l00077"></a>00077 <span class="preprocessor">#else</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>    ret = vasprintf(&amp;data, fmt, ap);
<a name="l00079"></a>00079 <span class="preprocessor">#endif</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>    va_end(ap);
<a name="l00081"></a>00081     <span class="keywordflow">if</span> (ret == -1) {
<a name="l00082"></a>00082                 fprintf(stderr, <span class="stringliteral">"Memory Error\n"</span>);
<a name="l00083"></a>00083     } <span class="keywordflow">else</span> {
<a name="l00084"></a>00084                 <span class="keywordtype">char</span> date[80] = <span class="stringliteral">""</span>;
<a name="l00085"></a>00085                 <span class="keyword">struct </span>tm now;
<a name="l00086"></a>00086                 time_t epoch;
<a name="l00087"></a>00087 
<a name="l00088"></a>00088                 <span class="keywordflow">if</span> (time(&amp;epoch) &amp;&amp; localtime_r(&amp;epoch, &amp;now)) {
<a name="l00089"></a>00089                         strftime(date, <span class="keyword">sizeof</span>(date), <span class="stringliteral">"%Y-%m-%d %T"</span>, &amp;now);
<a name="l00090"></a>00090                 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="preprocessor">#ifdef USE_SYSLOG</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span>                syslog(LOG_DEBUG | LOG_LOCAL2, data);
<a name="l00094"></a>00094 <span class="preprocessor">#else</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>                <span class="keywordflow">if</span> (fp) {
<a name="l00096"></a>00096                 fprintf(fp, <span class="stringliteral">"[%d] %s %s:%d %s() %s"</span>, getpid(), date, file, line, func, data);
<a name="l00097"></a>00097                 }
<a name="l00098"></a>00098 <span class="preprocessor">#endif</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>                free(data);
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101 <span class="preprocessor">#ifndef USE_SYSLOG</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>    fflush(fp);
<a name="l00103"></a>00103 <span class="preprocessor">#endif</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span>}
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="keywordtype">void</span> sig_end(<span class="keywordtype">int</span> sigid)
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108         printf(<span class="stringliteral">"%d: Got Signal %i\n"</span>,getpid(),sigid);
<a name="l00109"></a>00109         aft_clear_flag(system_flag,SYSTEM_RUNNING);
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">/*</span>
<a name="l00115"></a>00115 <span class="comment"> * Main pthread thread used to implement a span-&gt;run_span() thread.</span>
<a name="l00116"></a>00116 <span class="comment"> * All this thread does is call span-&gt;run_span() method.</span>
<a name="l00117"></a>00117 <span class="comment"> * span-&gt;run-span method is defined in libsangoma library and it</span>
<a name="l00118"></a>00118 <span class="comment"> * implements rx/tx/oob on span hw interface.</span>
<a name="l00119"></a>00119 <span class="comment"> */</span>
<a name="l00120"></a>00120 <span class="keyword">static</span> <span class="keywordtype">void</span> *hp_tdmapi_span_run(<span class="keywordtype">void</span> *obj)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122         <a class="code" href="structspan__idx.html">span_idx_t</a> *<a class="code" href="structspan__idx.html">span_idx</a> = (<a class="code" href="structspan__idx.html">span_idx_t</a>*)obj;
<a name="l00123"></a>00123         <span class="keywordtype">int</span> err;
<a name="l00124"></a>00124         sangoma_hptdm_span_t *span = span_idx-&gt;<a class="code" href="structspan__idx.html#156090ba70aab34076f7090b0f7b3b9e">span</a>;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         span_idx-&gt;<a class="code" href="structspan__idx.html#450f92b10c61414a39a1ad3f8ed1ed8e">init</a> = 1;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         log_printf(0,NULL,<span class="stringliteral">"Starting span %i!\n"</span>,span-&gt;span_no+1);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         <span class="keywordflow">while</span>(aft_test_flag(system_flag,SYSTEM_RUNNING)){
<a name="l00131"></a>00131 
<a name="l00132"></a>00132                 <span class="keywordflow">if</span> (!span-&gt;run_span) {
<a name="l00133"></a>00133                         <span class="keywordflow">break</span>;
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136                 err = span-&gt;run_span(span);
<a name="l00137"></a>00137                 <span class="keywordflow">if</span> (err) {
<a name="l00138"></a>00138                         log_printf(0,NULL,<span class="stringliteral">"Span %i run_span exited err=%i!\n"</span>,span-&gt;span_no+1,err);
<a name="l00139"></a>00139                         usleep(5000);
<a name="l00140"></a>00140                         <span class="keywordflow">continue</span>;
<a name="l00141"></a>00141                 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <span class="keywordflow">if</span> (span-&gt;close_span) {
<a name="l00146"></a>00146                 span-&gt;close_span(span);
<a name="l00147"></a>00147         }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149         span_idx-&gt;<a class="code" href="structspan__idx.html#450f92b10c61414a39a1ad3f8ed1ed8e">init</a> = 0;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151         <span class="comment">/* Arbitrary delay - implementation specific */</span>
<a name="l00152"></a>00152         sleep(3);
<a name="l00153"></a>00153         log_printf(0,NULL,<span class="stringliteral">"Stopping span %i!\n"</span>,span-&gt;span_no+1);
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         pthread_exit(NULL);
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">/*</span>
<a name="l00159"></a>00159 <span class="comment"> * Span Thrad Launcher.</span>
<a name="l00160"></a>00160 <span class="comment"> * Spawn a span thread, give the thread span object poiner.</span>
<a name="l00161"></a>00161 <span class="comment"> * This implementation should be user specific.</span>
<a name="l00162"></a>00162 <span class="comment"> */</span>
<a name="l00163"></a>00163 <span class="keyword">static</span> <span class="keywordtype">int</span> launch_hptdm_api_span_thread(pthread_t *threadid, <span class="keywordtype">void</span> *span)
<a name="l00164"></a>00164 {
<a name="l00165"></a>00165         pthread_attr_t attr;
<a name="l00166"></a>00166         <span class="keywordtype">int</span> result = 0;
<a name="l00167"></a>00167         <span class="keyword">struct </span>sched_param param;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         param.sched_priority = 5;
<a name="l00170"></a>00170         result = pthread_attr_init(&amp;attr);
<a name="l00171"></a>00171         pthread_attr_setinheritsched(&amp;attr, PTHREAD_EXPLICIT_SCHED);
<a name="l00172"></a>00172         pthread_attr_setschedpolicy(&amp;attr, SCHED_RR);
<a name="l00173"></a>00173         pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);
<a name="l00174"></a>00174         pthread_attr_setstacksize(&amp;attr, MGD_STACK_SIZE);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176         result = pthread_attr_setschedparam (&amp;attr, &amp;param);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         result = pthread_create(threadid, &amp;attr, hp_tdmapi_span_run, span);
<a name="l00179"></a>00179         <span class="keywordflow">if</span> (result) {
<a name="l00180"></a>00180                 log_printf(0, NULL, <span class="stringliteral">"%s: Error: Creating Thread! %s\n"</span>,
<a name="l00181"></a>00181                            __FUNCTION__,strerror(errno));
<a name="l00182"></a>00182         }
<a name="l00183"></a>00183         pthread_attr_destroy(&amp;attr);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="keywordflow">return</span> result;
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="comment">/*</span>
<a name="l00190"></a>00190 <span class="comment"> * Channel callback function. When channel has a chunk of data</span>
<a name="l00191"></a>00191 <span class="comment"> * ready for us, this function will be called to deliver the</span>
<a name="l00192"></a>00192 <span class="comment"> * rx chunk.  The user should implement the logic here of</span>
<a name="l00193"></a>00193 <span class="comment"> * what to do with that rx chunk.</span>
<a name="l00194"></a>00194 <span class="comment"> *</span>
<a name="l00195"></a>00195 <span class="comment"> * If we return 0 - channel will continue to operate normally.</span>
<a name="l00196"></a>00196 <span class="comment"> * If we return -1 - channel will get closed and we will not</span>
<a name="l00197"></a>00197 <span class="comment"> *                  receive any more data on this channel until</span>
<a name="l00198"></a>00198 <span class="comment"> *                  channel is opened again.</span>
<a name="l00199"></a>00199 <span class="comment"> */</span>
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="keyword">static</span> <span class="keywordtype">int</span> media_rx_ready(<span class="keywordtype">void</span> *p, <span class="keywordtype">char</span> *data, <span class="keywordtype">int</span> len)
<a name="l00202"></a>00202 {
<a name="l00203"></a>00203         <a class="code" href="structchan__idx.html">chan_idx_t</a> *<a class="code" href="structchan__idx.html">chan_idx</a> = (<a class="code" href="structchan__idx.html">chan_idx_t</a> *)p;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205         <span class="keywordflow">if</span> (!chan_idx-&gt;<a class="code" href="structchan__idx.html#fde66d9f6eda7b8c05b52278cefbf1ed">init</a>) {
<a name="l00206"></a>00206                 <span class="keywordflow">return</span> -1;
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         log_printf(15,NULL,<span class="stringliteral">"Chan s%ic%i Rx Data Len %i \n"</span>,
<a name="l00210"></a>00210                                 chan_idx-&gt;<a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>+1,chan_idx-&gt;<a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">chan_no</a>+1,len);
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="preprocessor">#if 0</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>        print_packet((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)data,len);
<a name="l00214"></a>00214 <span class="preprocessor">#endif</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>
<a name="l00216"></a>00216         <span class="comment">/* FIXME: ADD CODE HERE</span>
<a name="l00217"></a>00217 <span class="comment">        Do something with rx chunk of data for this channel</span>
<a name="l00218"></a>00218 <span class="comment">        */</span>
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="comment">/* If we return -1 here the library will close the channel */</span>
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         <span class="keywordflow">return</span> 0;
<a name="l00224"></a>00224 }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="comment">/*</span>
<a name="l00228"></a>00228 <span class="comment"> * Main pthread thread used to implement a channel thread.</span>
<a name="l00229"></a>00229 <span class="comment"> * Since this is a channel TX thread, user would wait on</span>
<a name="l00230"></a>00230 <span class="comment"> * some UDP socket for data to be transmitted to this channel.</span>
<a name="l00231"></a>00231 <span class="comment"> *</span>
<a name="l00232"></a>00232 <span class="comment"> * The channel thread opens the channel on a span using</span>
<a name="l00233"></a>00233 <span class="comment"> * the library span-&gt;open_chan method.  Once the channel</span>
<a name="l00234"></a>00234 <span class="comment"> * object is obtained, this thread can start pushing</span>
<a name="l00235"></a>00235 <span class="comment"> * arbitrary data chunks into the channel.</span>
<a name="l00236"></a>00236 <span class="comment"> *</span>
<a name="l00237"></a>00237 <span class="comment"> */</span>
<a name="l00238"></a>00238 <span class="keyword">static</span> <span class="keywordtype">void</span> *hp_tdmapi_chan_run(<span class="keywordtype">void</span> *obj)
<a name="l00239"></a>00239 {
<a name="l00240"></a>00240         <a class="code" href="structchan__idx.html">chan_idx_t</a> *chan_idx = (<a class="code" href="structchan__idx.html">chan_idx_t</a>*)obj;
<a name="l00241"></a>00241         <span class="keywordtype">int</span> err;
<a name="l00242"></a>00242         <span class="keywordtype">char</span> data[1024];
<a name="l00243"></a>00243         <span class="keywordtype">int</span> len=160; <span class="comment">/* 20ms worth of ulaw/alaw */</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245         sangoma_hptdm_span_t *span;
<a name="l00246"></a>00246         sangoma_hptdm_chan_reg_t channel_reg;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248         <span class="comment">/* Grab a span based on the span_no - integer starting from 0 */</span>
<a name="l00249"></a>00249         <a class="code" href="structspan__idx.html">span_idx_t</a> *span_idx = &amp;span_list[chan_idx-&gt;<a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>];
<a name="l00250"></a>00250         span = span_idx-&gt;<a class="code" href="structspan__idx.html#156090ba70aab34076f7090b0f7b3b9e">span</a>;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252         log_printf(0,NULL,<span class="stringliteral">"Starting chan s%ic%i ...\n"</span>,
<a name="l00253"></a>00253                                 chan_idx-&gt;<a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>+1,chan_idx-&gt;<a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">chan_no</a>+1);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         <span class="comment">/* Configure channel registration structure */</span>
<a name="l00256"></a>00256         memset(&amp;channel_reg,0,<span class="keyword">sizeof</span>(channel_reg));
<a name="l00257"></a>00257         channel_reg.p = (<span class="keywordtype">void</span>*)chan_idx;
<a name="l00258"></a>00258         channel_reg.rx_data = media_rx_ready;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         <span class="comment">/* Set the local channel index to configured */</span>
<a name="l00261"></a>00261         chan_idx-&gt;<a class="code" href="structchan__idx.html#fde66d9f6eda7b8c05b52278cefbf1ed">init</a> = 1;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263         <span class="comment">/* Open a channel based on chan_no integer starting from 0, on a specific span */</span>
<a name="l00264"></a>00264         err = span-&gt;open_chan(span, &amp;channel_reg, chan_idx-&gt;<a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">chan_no</a>, &amp;chan_idx-&gt;<a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">chan</a>);
<a name="l00265"></a>00265         <span class="keywordflow">if</span> (err){
<a name="l00266"></a>00266                 log_printf(0,NULL,<span class="stringliteral">"Error openeing chan s%ic%i ...\n"</span>,
<a name="l00267"></a>00267                                 chan_idx-&gt;<a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>+1,chan_idx-&gt;<a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">chan_no</a>+1);
<a name="l00268"></a>00268                 pthread_exit(NULL);
<a name="l00269"></a>00269         }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         memset(data,0,<span class="keyword">sizeof</span>(data));
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         <span class="keywordflow">while</span> (aft_test_flag(system_flag,SYSTEM_RUNNING)) {
<a name="l00276"></a>00276 
<a name="l00277"></a>00277                 <span class="comment">/* FIXME: Wait for AUDIO from a UDP socket here</span>
<a name="l00278"></a>00278 <span class="comment">                          once you receive data to tx to a channel</span>
<a name="l00279"></a>00279 <span class="comment">                          use the push() funciton to pass the chunk</span>
<a name="l00280"></a>00280 <span class="comment">                          into the channel.  The size can be of any length</span>
<a name="l00281"></a>00281 <span class="comment">                          up to the MAX CHUNK SIZE */</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283                 <span class="comment">/* In this example we dont have a socket to wait on</span>
<a name="l00284"></a>00284 <span class="comment">                   so we just use a delay */</span>
<a name="l00285"></a>00285                 usleep(1000);
<a name="l00286"></a>00286 
<a name="l00287"></a>00287                 err=chan_idx-&gt;<a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">chan</a>-&gt;push(chan_idx-&gt;<a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">chan</a>,
<a name="l00288"></a>00288                                          data,len);
<a name="l00289"></a>00289                 <span class="comment">/*</span>
<a name="l00290"></a>00290 <span class="comment">                -1 = packet too large, -2 = channel closed, 1 = busy, 0 = tx ok</span>
<a name="l00291"></a>00291 <span class="comment">                */</span>
<a name="l00292"></a>00292                 <span class="keywordflow">switch</span> (err) {
<a name="l00293"></a>00293                 <span class="keywordflow">case</span> 0:
<a name="l00294"></a>00294                         <span class="comment">/* Data tx ok */</span>
<a name="l00295"></a>00295                         <span class="keywordflow">break</span>;
<a name="l00296"></a>00296                 <span class="keywordflow">case</span> -1:
<a name="l00297"></a>00297                         <span class="comment">/* packet too large */</span>
<a name="l00298"></a>00298                         <span class="keywordflow">break</span>;
<a name="l00299"></a>00299                 <span class="keywordflow">case</span> -2:
<a name="l00300"></a>00300                         <span class="comment">/* channel closed */</span>
<a name="l00301"></a>00301                         <span class="keywordflow">break</span>;
<a name="l00302"></a>00302                 <span class="keywordflow">case</span> 1:
<a name="l00303"></a>00303                         <span class="comment">/* failed to tx, channel busy - try again later - in 20ms or so */</span>
<a name="l00304"></a>00304                         <span class="keywordflow">break</span>;
<a name="l00305"></a>00305                 }
<a name="l00306"></a>00306         }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308         <span class="comment">/* Once we are done, close the channel */</span>
<a name="l00309"></a>00309         span-&gt;close_chan(chan_idx-&gt;<a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">chan</a>);
<a name="l00310"></a>00310 
<a name="l00311"></a>00311         <span class="comment">/* Set the local channel index to free */</span>
<a name="l00312"></a>00312         chan_idx-&gt;<a class="code" href="structchan__idx.html#fde66d9f6eda7b8c05b52278cefbf1ed">init</a> = 0;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314         pthread_exit(NULL);
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="comment">/*</span>
<a name="l00318"></a>00318 <span class="comment"> * Channel Thrad Launcher.</span>
<a name="l00319"></a>00319 <span class="comment"> * Spawn a channel thread, give the thread chan object poiner.</span>
<a name="l00320"></a>00320 <span class="comment"> * This implementation should be user specific.</span>
<a name="l00321"></a>00321 <span class="comment"> */</span>
<a name="l00322"></a>00322 <span class="keyword">static</span> <span class="keywordtype">int</span> launch_hptdm_api_chan_thread(pthread_t *threadid, <span class="keywordtype">void</span> *chan)
<a name="l00323"></a>00323 {
<a name="l00324"></a>00324     pthread_attr_t attr;
<a name="l00325"></a>00325     <span class="keywordtype">int</span> result = 0;
<a name="l00326"></a>00326     <span class="keyword">struct </span>sched_param param;
<a name="l00327"></a>00327 
<a name="l00328"></a>00328     param.sched_priority = 1;
<a name="l00329"></a>00329     result = pthread_attr_init(&amp;attr);
<a name="l00330"></a>00330     pthread_attr_setinheritsched(&amp;attr, PTHREAD_EXPLICIT_SCHED);
<a name="l00331"></a>00331     pthread_attr_setschedpolicy(&amp;attr, SCHED_RR);
<a name="l00332"></a>00332     pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);
<a name="l00333"></a>00333     pthread_attr_setstacksize(&amp;attr, MGD_STACK_SIZE);
<a name="l00334"></a>00334 
<a name="l00335"></a>00335     result = pthread_attr_setschedparam (&amp;attr, &amp;param);
<a name="l00336"></a>00336 
<a name="l00337"></a>00337     result = pthread_create(threadid, &amp;attr, hp_tdmapi_chan_run, chan);
<a name="l00338"></a>00338     <span class="keywordflow">if</span> (result) {
<a name="l00339"></a>00339          log_printf(0, NULL, <span class="stringliteral">"%s: Error: Creating Thread! %s\n"</span>,
<a name="l00340"></a>00340                          __FUNCTION__,strerror(result));
<a name="l00341"></a>00341     }
<a name="l00342"></a>00342     pthread_attr_destroy(&amp;attr);
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     <span class="keywordflow">return</span> result;
<a name="l00345"></a>00345 }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="comment">/*</span>
<a name="l00348"></a>00348 <span class="comment"> * Start all spans and channels.</span>
<a name="l00349"></a>00349 <span class="comment"> *</span>
<a name="l00350"></a>00350 <span class="comment"> * This exmaple codes automatically starts all spans and channels together.</span>
<a name="l00351"></a>00351 <span class="comment"> * The real world application would start all spans on startup.</span>
<a name="l00352"></a>00352 <span class="comment"> * Jowever the channels would only get started once the signalling stack indicates</span>
<a name="l00353"></a>00353 <span class="comment"> * a call on that specific channel.</span>
<a name="l00354"></a>00354 <span class="comment"> *</span>
<a name="l00355"></a>00355 <span class="comment"> * This implementation should be user specific.</span>
<a name="l00356"></a>00356 <span class="comment"> */</span>
<a name="l00357"></a>00357 <span class="keywordtype">int</span> smg_init_spans(<span class="keywordtype">void</span>)
<a name="l00358"></a>00358 {
<a name="l00359"></a>00359         <span class="keywordtype">int</span> span,i;
<a name="l00360"></a>00360         <span class="keywordtype">int</span> err=-1;
<a name="l00361"></a>00361         sangoma_hptdm_span_reg_t lib_callback;
<a name="l00362"></a>00362         lib_callback.log=__log_printf;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364         <span class="keywordflow">for</span> (span=0;span&lt;16;span++) {
<a name="l00365"></a>00365                 span_list[span].span_no=span;
<a name="l00366"></a>00366                 span_list[span].<a class="code" href="structspan__idx.html#156090ba70aab34076f7090b0f7b3b9e">span</a> = sangoma_hptdm_api_span_init(span, &amp;lib_callback);
<a name="l00367"></a>00367                 <span class="keywordflow">if</span> (!span_list[span].span) {
<a name="l00368"></a>00368                         log_printf(0, NULL, <span class="stringliteral">"Error: Failed to initialize span %i\n"</span>,
<a name="l00369"></a>00369                                         span+1);
<a name="l00370"></a>00370                         <span class="keywordflow">break</span>;
<a name="l00371"></a>00371                 } <span class="keywordflow">else</span> {
<a name="l00372"></a>00372                         log_printf(0, NULL, <span class="stringliteral">"HP TDM API Span: %d configured...\n"</span>,
<a name="l00373"></a>00373                                         span+1);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375                         err=launch_hptdm_api_span_thread(&amp;span_list[span].thread,&amp;span_list[span]);
<a name="l00376"></a>00376                         <span class="keywordflow">if</span> (err) {
<a name="l00377"></a>00377                                 <span class="keywordflow">return</span> err;
<a name="l00378"></a>00378                         }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380                         <span class="keywordflow">for</span> (i=0;i&lt;31;i++) {
<a name="l00381"></a>00381                                 chan_list[span][i].chan_no=i;
<a name="l00382"></a>00382                                 chan_list[span][i].<a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>=span;
<a name="l00383"></a>00383 
<a name="l00384"></a>00384                                 err=launch_hptdm_api_chan_thread(&amp;chan_list[span][i].thread,
<a name="l00385"></a>00385                                                                  &amp;chan_list[span][i]);
<a name="l00386"></a>00386                                 <span class="keywordflow">if</span> (err) {
<a name="l00387"></a>00387                                         <span class="keywordflow">return</span> err;
<a name="l00388"></a>00388                                 }
<a name="l00389"></a>00389                         }
<a name="l00390"></a>00390                 }
<a name="l00391"></a>00391         }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393         <span class="keywordflow">return</span> err;
<a name="l00394"></a>00394 }
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="comment">/*</span>
<a name="l00397"></a>00397 <span class="comment"> * Applicatoin Main Function</span>
<a name="l00398"></a>00398 <span class="comment"> *</span>
<a name="l00399"></a>00399 <span class="comment"> * This implementation should be user specific!</span>
<a name="l00400"></a>00400 <span class="comment"> *</span>
<a name="l00401"></a>00401 <span class="comment"> * Configure and initialize application</span>
<a name="l00402"></a>00402 <span class="comment"> * Set a global sytem flag indicating that app is running.</span>
<a name="l00403"></a>00403 <span class="comment"> *</span>
<a name="l00404"></a>00404 <span class="comment"> * Start all SPANS by calling span init function and</span>
<a name="l00405"></a>00405 <span class="comment"> * launching a thread per span. In span thread calling run_span().</span>
<a name="l00406"></a>00406 <span class="comment"> *</span>
<a name="l00407"></a>00407 <span class="comment"> * Start all channels by launching a thread per channel and</span>
<a name="l00408"></a>00408 <span class="comment"> * calling span-&gt;chan_open.  Every 20ms send chunk down each channel.</span>
<a name="l00409"></a>00409 <span class="comment"> *</span>
<a name="l00410"></a>00410 <span class="comment"> * This implementation should be user specific!</span>
<a name="l00411"></a>00411 <span class="comment"> */</span>
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00414"></a>00414 {
<a name="l00415"></a>00415         <span class="keywordtype">int</span> err=0;
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         nice(-10);
<a name="l00418"></a>00418 
<a name="l00419"></a>00419         signal(SIGINT,&amp;sig_end);
<a name="l00420"></a>00420         signal(SIGTERM,&amp;sig_end);
<a name="l00421"></a>00421 
<a name="l00422"></a>00422         aft_set_flag(system_flag,SYSTEM_RUNNING);
<a name="l00423"></a>00423 
<a name="l00424"></a>00424         log_printf(0, NULL, <span class="stringliteral">"HP TDM API MAIN Process Starting\n"</span>);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426         err=smg_init_spans();
<a name="l00427"></a>00427         <span class="keywordflow">if</span> (err) {
<a name="l00428"></a>00428                 aft_clear_flag(system_flag,SYSTEM_RUNNING);
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430 
<a name="l00431"></a>00431         <span class="keywordflow">while</span>(aft_test_flag(system_flag,SYSTEM_RUNNING)){
<a name="l00432"></a>00432                 sleep(1);
<a name="l00433"></a>00433         }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435         sleep(5);
<a name="l00436"></a>00436         log_printf(0, NULL, <span class="stringliteral">"HP TDM API MAIN Process Exiting\n"</span>);
<a name="l00437"></a>00437 
<a name="l00438"></a>00438         <span class="keywordflow">return</span> 0;
<a name="l00439"></a>00439 };
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Aug 18 00:00:36 2008 for hptdm_api by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
