<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>hptdm_api: aft_tdm_hp.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<h1>aft_tdm_hp.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*****************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">* aft_tdm_hp.c: Example code for HP TDM API Library</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* Author(s):    Nenad Corbic &lt;ncorbic@sangoma.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* Copyright:    (c) 2008 Sangoma Technologies Inc.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">*               This program is free software; you can redistribute it and/or</span>
<a name="l00009"></a>00009 <span class="comment">*               modify it under the terms of the GNU General Public License</span>
<a name="l00010"></a>00010 <span class="comment">*               as published by the Free Software Foundation; either version</span>
<a name="l00011"></a>00011 <span class="comment">*               2 of the License, or (at your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">* ============================================================================</span>
<a name="l00013"></a>00013 <span class="comment">* Description:</span>
<a name="l00014"></a>00014 <span class="comment">*</span>
<a name="l00015"></a>00015 <span class="comment">*/</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef __AFT_TDM_HP_H_</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define __AFT_TDM_HP_H_</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span>
<a name="l00020"></a>00020 <span class="preprocessor">#define _GNU_SOURCE</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;sys/types.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sys/socket.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;netinet/in.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;arpa/inet.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;netdb.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;poll.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;pthread.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;netinet/tcp.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;sys/mman.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;syslog.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;linux/wanpipe.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;libsangoma.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;libhpsangoma.h&gt;</span>
<a name="l00044"></a>00044 
<a name="l00046"></a>00046 <span class="preprocessor">#define MAX_SPANS 16</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#define MAX_CHANS 31</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="preprocessor">#define USE_SYSLOG 1</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="preprocessor">#define MGD_STACK_SIZE 1024 * 240</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="keywordtype">void</span> __log_printf(<span class="keywordtype">int</span> level, FILE *fp, <span class="keywordtype">char</span> *file, <span class="keyword">const</span> <span class="keywordtype">char</span> *func, <span class="keywordtype">int</span> line, <span class="keywordtype">char</span> *fmt, ...);
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#define ysleep(usec) sched_yield() ; usleep(usec);</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#define log_printf(level, fp, fmt, ...) __log_printf(level, fp, __FILE__, __FUNCTION__, __LINE__, fmt, ##__VA_ARGS__)</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>
<a name="l00063"></a>00063 <span class="keyword">enum</span> {
<a name="l00064"></a>00064         SYSTEM_RUNNING=1,
<a name="l00065"></a>00065 };
<a name="l00066"></a>00066 
<a name="l00071"></a><a class="code" href="structspan__idx.html">00071</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structspan__idx.html">span_idx</a>
<a name="l00072"></a>00072 {
<a name="l00074"></a><a class="code" href="structspan__idx.html#450f92b10c61414a39a1ad3f8ed1ed8e">00074</a>         <span class="keywordtype">int</span> <a class="code" href="structspan__idx.html#450f92b10c61414a39a1ad3f8ed1ed8e">init</a>;
<a name="l00076"></a><a class="code" href="structspan__idx.html#a6f8224d6aa40ee0c8e00507603fec12">00076</a>         <span class="keywordtype">int</span> <a class="code" href="structspan__idx.html#a6f8224d6aa40ee0c8e00507603fec12">span_no</a>;
<a name="l00078"></a><a class="code" href="structspan__idx.html#ac2811f203add0cf57eab48798cc2edd">00078</a>         pthread_t <a class="code" href="structspan__idx.html#ac2811f203add0cf57eab48798cc2edd">thread</a>;
<a name="l00080"></a><a class="code" href="structspan__idx.html#156090ba70aab34076f7090b0f7b3b9e">00080</a>         sangoma_hptdm_span_t *<a class="code" href="structspan__idx.html#156090ba70aab34076f7090b0f7b3b9e">span</a>;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         <span class="comment">/* Other private span variables insert here */</span>
<a name="l00083"></a>00083 } <a class="code" href="structspan__idx.html">span_idx_t</a>;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00090"></a><a class="code" href="structchan__idx.html">00090</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structchan__idx.html">chan_idx</a>
<a name="l00091"></a>00091 {
<a name="l00093"></a><a class="code" href="structchan__idx.html#fde66d9f6eda7b8c05b52278cefbf1ed">00093</a>         <span class="keywordtype">int</span> <a class="code" href="structchan__idx.html#fde66d9f6eda7b8c05b52278cefbf1ed">init</a>;
<a name="l00095"></a><a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">00095</a>         <span class="keywordtype">int</span> <a class="code" href="structchan__idx.html#9ab707b8f4c2b31e63d56d643b9af7a7">chan_no</a>;
<a name="l00097"></a><a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">00097</a>         <span class="keywordtype">int</span> <a class="code" href="structchan__idx.html#15f8deecab0679c26aee9cf9ab5ca423">span_no</a>;
<a name="l00099"></a><a class="code" href="structchan__idx.html#212d186ed3499c5ea81a5f5dfee60438">00099</a>         pthread_t <a class="code" href="structchan__idx.html#212d186ed3499c5ea81a5f5dfee60438">thread</a>;
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">00102</a>         sangoma_hptdm_chan_t *<a class="code" href="structchan__idx.html#16c4ba07df6da03dccb6f00deb98e3d1">chan</a>;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         <span class="comment">/* Other private channel variables insert here */</span>
<a name="l00105"></a>00105 } <a class="code" href="structchan__idx.html">chan_idx_t</a>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00112"></a>00112 <span class="preprocessor">#define aft_test_flag(p,flag)           ({ \</span>
<a name="l00113"></a>00113 <span class="preprocessor">                                        (p &amp; (flag)); \</span>
<a name="l00114"></a>00114 <span class="preprocessor">                                        })</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="preprocessor">#define aft_set_flag(p,flag)            do { \</span>
<a name="l00117"></a>00117 <span class="preprocessor">                                        (p |= (flag)); \</span>
<a name="l00118"></a>00118 <span class="preprocessor">                                        } while (0)</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>
<a name="l00120"></a>00120 <span class="preprocessor">#define aft_clear_flag(p,flag)          do { \</span>
<a name="l00121"></a>00121 <span class="preprocessor">                                        (p &amp;= ~(flag)); \</span>
<a name="l00122"></a>00122 <span class="preprocessor">                                        } while (0)</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="preprocessor">#endif</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>
<a name="l00127"></a>00127 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Aug 18 00:00:36 2008 for hptdm_api by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
