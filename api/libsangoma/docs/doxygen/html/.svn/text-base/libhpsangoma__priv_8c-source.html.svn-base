<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>libhpsangoma: libhpsangoma_priv.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<h1>libhpsangoma_priv.c</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*****************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment"> * libhpsangoma_priv.c:  Sangoma High Performance TDM API - Span Based Library</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * Author(s):   Nenad Corbic &lt;ncorbic@sangoma.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * Copyright:   (c) 2008 Nenad Corbic &lt;ncorbic@sangoma.com&gt;</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *              This program is free software; you can redistribute it and/or</span>
<a name="l00009"></a>00009 <span class="comment"> *              modify it under the terms of the GNU General Public License</span>
<a name="l00010"></a>00010 <span class="comment"> *              as published by the Free Software Foundation; either version</span>
<a name="l00011"></a>00011 <span class="comment"> *              2 of the License, or (at your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * ============================================================================</span>
<a name="l00013"></a>00013 <span class="comment"> *</span>
<a name="l00014"></a>00014 <span class="comment"> */</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include "libhpsangoma.h"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "libhpsangoma_priv.h"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#define DFT_CARD "wanpipe1"</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span>
<a name="l00020"></a>00020 
<a name="l00031"></a>00031 <span class="keywordtype">int</span> sangoma_readmsg_hp_tdm(<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *hdrbuf, <span class="keywordtype">int</span> hdrlen, <span class="keywordtype">void</span> *databuf, <span class="keywordtype">int</span> datalen, <span class="keywordtype">int</span> flag)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033         <span class="keywordtype">int</span> <a class="code" href="structsangoma__hptdm__span.html#88165ecfc96fcdc432154d7cdc93b7aa">rx_len</a>=0;
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#if defined(WIN32)</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037 <span class="preprocessor">#error "WINDOWS HP TDMAPI NOT DEFINED"</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span>
<a name="l00039"></a>00039 <span class="preprocessor">#else</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>        <span class="keyword">struct </span>msghdr msg;
<a name="l00041"></a>00041         <span class="keyword">struct </span>iovec iov[2];
<a name="l00042"></a>00042 
<a name="l00043"></a>00043         memset(&amp;msg,0,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> msghdr));
<a name="l00044"></a>00044 
<a name="l00045"></a>00045         iov[0].iov_len=hdrlen;
<a name="l00046"></a>00046         iov[0].iov_base=hdrbuf;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048         iov[1].iov_len=datalen;
<a name="l00049"></a>00049         iov[1].iov_base=databuf;
<a name="l00050"></a>00050 
<a name="l00051"></a>00051         msg.msg_iovlen=2;
<a name="l00052"></a>00052         msg.msg_iov=iov;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054         rx_len = recvmsg(fd,&amp;msg,0);
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         <span class="keywordflow">if</span> (rx_len &lt;= <span class="keyword">sizeof</span>(api_rx_hdr_t)){
<a name="l00057"></a>00057                 <span class="keywordflow">return</span> -EINVAL;
<a name="l00058"></a>00058         }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060         rx_len-=<span class="keyword">sizeof</span>(api_rx_hdr_t);
<a name="l00061"></a>00061 <span class="preprocessor">#endif</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063         <span class="keywordflow">return</span> rx_len;
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 
<a name="l00078"></a>00078 <span class="keywordtype">int</span> sangoma_writemsg_hp_tdm(<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *hdrbuf, <span class="keywordtype">int</span> hdrlen, <span class="keywordtype">void</span> *databuf, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> datalen, <span class="keywordtype">int</span> flag)
<a name="l00079"></a>00079 {
<a name="l00080"></a>00080         <span class="keywordtype">int</span> bsent;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="preprocessor">#if defined(WIN32)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>
<a name="l00084"></a>00084 <span class="preprocessor">#error "Windows TX not implemented"</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>
<a name="l00086"></a>00086 <span class="preprocessor">#else</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>        <span class="keyword">struct </span>msghdr msg;
<a name="l00088"></a>00088         <span class="keyword">struct </span>iovec iov[2];
<a name="l00089"></a>00089 
<a name="l00090"></a>00090         memset(&amp;msg,0,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> msghdr));
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         iov[0].iov_len=hdrlen;
<a name="l00093"></a>00093         iov[0].iov_base=hdrbuf;
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         iov[1].iov_len=datalen;
<a name="l00096"></a>00096         iov[1].iov_base=databuf;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098         msg.msg_iovlen=2;
<a name="l00099"></a>00099         msg.msg_iov=iov;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         bsent = sendmsg(fd,&amp;msg,0);
<a name="l00102"></a>00102         <span class="keywordflow">if</span> (bsent &gt; 0){
<a name="l00103"></a>00103                 bsent-=<span class="keyword">sizeof</span>(api_tx_hdr_t);
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105 <span class="preprocessor">#endif</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>        <span class="keywordflow">return</span> bsent;
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00114"></a>00114 <span class="keywordtype">int</span> do_wanpipemon_cmd(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00115"></a>00115 {
<a name="l00116"></a>00116         <span class="keyword">struct </span>ifreq ifr;
<a name="l00117"></a>00117         memset(&amp;ifr,0,<span class="keyword">sizeof</span>(ifr));
<a name="l00118"></a>00118         ifr.ifr_data = (<span class="keywordtype">void</span>*)&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>;
<a name="l00119"></a>00119         sprintf (ifr.ifr_name, <span class="stringliteral">"%s"</span>, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#ea2f0206a546ae74962f84e482f63276">if_name</a>);
<a name="l00120"></a>00120         <span class="keywordflow">return</span> ioctl(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>,SIOC_WANPIPE_PIPEMON,&amp;ifr);
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00128"></a>00128 <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> sangoma_get_cfg(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_command = READ_CONFIGURATION;
<a name="l00131"></a>00131         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_data_len = 0;
<a name="l00132"></a>00132         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_return_code = 0xaa;
<a name="l00133"></a>00133         do_wanpipemon_cmd(span);
<a name="l00134"></a>00134         <span class="keywordflow">if</span> (span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_return_code != 0){
<a name="l00135"></a>00135                 lib_printf(0,NULL,<span class="stringliteral">"Error: SPAN %i management command failed 0x02Xs (%s)"</span>,
<a name="l00136"></a>00136                         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_return_code,strerror(errno));
<a name="l00137"></a>00137                 <span class="keywordflow">return</span> -1;
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         memcpy(&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#000b5bc46e96a6ce6ce0601b262758a4">span_cfg</a>,&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#06aa115c3c6f6cf024484fdd6bf1bff4">wan_udp</a>.wan_udphdr_data[0],<span class="keyword">sizeof</span>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#000b5bc46e96a6ce6ce0601b262758a4">span_cfg</a>));
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="keywordflow">return</span> 0;
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00152"></a>00152 <span class="keywordtype">int</span> sangoma_hptdm_span_open(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154         <span class="keyword">struct </span>wan_sockaddr_ll  sa;
<a name="l00155"></a>00155         <span class="keywordtype">char</span> if_name[100];
<a name="l00156"></a>00156         <span class="keywordtype">int</span> sock=-1;
<a name="l00157"></a>00157         <span class="keywordtype">int</span> err;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         memset(&amp;sa,0,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> wan_sockaddr_ll));
<a name="l00160"></a>00160         sock = socket(AF_WANPIPE, SOCK_RAW, 0);
<a name="l00161"></a>00161         <span class="keywordflow">if</span>( sock &lt; 0 ) {
<a name="l00162"></a>00162                 perror(<span class="stringliteral">"Socket"</span>);
<a name="l00163"></a>00163                 <span class="keywordflow">return</span> -1;
<a name="l00164"></a>00164         } <span class="comment">/* if */</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166         sprintf(if_name, <span class="stringliteral">"w%ig1"</span>, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1);
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         strcpy( (<span class="keywordtype">char</span>*)sa.sll_device, if_name);
<a name="l00169"></a>00169         strcpy( (<span class="keywordtype">char</span>*)sa.sll_card, DFT_CARD);
<a name="l00170"></a>00170         sa.sll_protocol = htons(PVC_PROT);
<a name="l00171"></a>00171         sa.sll_family=AF_WANPIPE;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173         <span class="keywordflow">if</span>(bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;sa, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> wan_sockaddr_ll)) &lt; 0){
<a name="l00174"></a>00174         lib_printf(0,NULL,<span class="stringliteral">"bind failed on span span %i %s\n"</span>,
<a name="l00175"></a>00175                 span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1,strerror(errno));
<a name="l00176"></a>00176                         <span class="keywordflow">return</span> -1;
<a name="l00177"></a>00177         }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>=sock;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         err= sangoma_get_cfg(span);
<a name="l00182"></a>00182         <span class="keywordflow">if</span> (err) {
<a name="l00183"></a>00183                 <span class="keywordflow">goto</span> sangoma_hptdm_span_open_error;
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186         lib_printf(0,NULL,<span class="stringliteral">"libhp: span %i opened\n"</span>,
<a name="l00187"></a>00187                         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1);
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         <span class="keywordflow">return</span> 0;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 sangoma_hptdm_span_open_error:
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="keywordflow">if</span> (span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>) {
<a name="l00194"></a>00194                 close(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>);
<a name="l00195"></a>00195                 span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>=-1;
<a name="l00196"></a>00196         }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198         <span class="keywordflow">return</span> err;
<a name="l00199"></a>00199 }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00208"></a>00208 <span class="keywordtype">int</span> sangoma_hp_tdm_handle_oob_event(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00209"></a>00209 {
<a name="l00210"></a>00210         <span class="keywordtype">int</span> err;
<a name="l00211"></a>00211         hp_tdmapi_rx_event_t *rx_event;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213         err = recv(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>, <span class="keyword">sizeof</span>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>), MSG_OOB);
<a name="l00214"></a>00214         <span class="keywordflow">if</span> (err &gt; 0) {
<a name="l00215"></a>00215                 rx_event=(hp_tdmapi_rx_event_t*)&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>;
<a name="l00216"></a>00216                 if (span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#30987897dd298e9f5e604e8c6cef9081">rx_event</a> &amp;&amp; span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#23010e26a1e33a91d94fa7f22fe588c1">p</a>) {
<a name="l00217"></a>00217                         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#30987897dd298e9f5e604e8c6cef9081">rx_event</a>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#23010e26a1e33a91d94fa7f22fe588c1">p</a>, rx_event);
<a name="l00218"></a>00218                 }
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220         <span class="comment">/* For now treat all err as socket reload */</span>
<a name="l00221"></a>00221         <span class="keywordflow">return</span> 1;
<a name="l00222"></a>00222 }
<a name="l00223"></a>00223 
<a name="l00230"></a>00230 <span class="keywordtype">int</span> sangoma_hp_tdm_push_rx_data(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00231"></a>00231 {
<a name="l00232"></a>00232         <span class="keywordtype">int</span> i=0,x=0,err=0;
<a name="l00233"></a>00233         <a class="code" href="structsangoma__hptdm__chan.html">sangoma_hptdm_chan_t</a> *chan=NULL;
<a name="l00234"></a>00234         <a class="code" href="structhp__tdm__chunk.html">hp_tmd_chunk_t</a> *chunk=NULL;
<a name="l00235"></a>00235         <span class="keywordtype">int</span> chan_no_hw;
<a name="l00236"></a>00236         <span class="keywordtype">char</span> *rx_data = &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>[<span class="keyword">sizeof</span>(api_rx_hdr_t)];
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         <span class="keywordflow">for</span> (i=0;i&lt;SMG_HP_TDM_MAX_CHANS;i++) {
<a name="l00240"></a>00240                 chan = &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#63de8342af835a970d8105c2fe5282dc">chan_idx</a>[i].<a class="code" href="structsangoma__hptdm__chan__map.html#65a3733433aa931afb5002994bb4a4cf">chan</a>;
<a name="l00241"></a>00241                 if (!chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#7a43df2f36462e48e1104704fe38ccc1">init</a>) {
<a name="l00242"></a>00242                         <span class="keywordflow">continue</span>;
<a name="l00243"></a>00243                 }
<a name="l00244"></a>00244                 chan_no_hw = span-&gt;<a class="code" href="structsangoma__hptdm__span.html#63de8342af835a970d8105c2fe5282dc">chan_idx</a>[i].<a class="code" href="structsangoma__hptdm__chan__map.html#895d7b39838f0245ac6829cd72489818">chan_no_hw</a>;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246                 lib_printf(15,NULL, <span class="stringliteral">"SPAN %i Chan %i Chunk %i Channelizing\n"</span>,
<a name="l00247"></a>00247                                 span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1, chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#5e5053195c086b7e5bfa683573484e8c">chan_no</a>+1, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249                 chunk = &amp;chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#c8d95d0d59d5f34fd70a9d700f6896f0">rx_chunk</a>;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251                 <span class="keywordflow">for</span> (x=0;x&lt;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>;x++) {
<a name="l00252"></a>00252                         chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#2ef17e4e751a2e523849c09a43727cb6">data</a>[x] = rx_data[(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#9efd139e4214d62b07060147acfd2849">max_chans</a>*x)+chan_no_hw];
<a name="l00253"></a>00253                 }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255                 chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#985fc4301c6bc466ae05e2bc57b0d37c">len</a> = span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>;
<a name="l00256"></a>00256                 <span class="keywordflow">if</span> (chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#0a79dfe92034591ad20bd1656e585776">chan_reg</a>.<a class="code" href="structsangoma__hptdm__chan__reg.html#5c1df036c59cdb8dbf90bc5f39dab51e">p</a> &amp;&amp; chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#0a79dfe92034591ad20bd1656e585776">chan_reg</a>.<a class="code" href="structsangoma__hptdm__chan__reg.html#1caaaa25e6cafef313bca8ea29c6b612">rx_data</a>) {
<a name="l00257"></a>00257                         err=chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#0a79dfe92034591ad20bd1656e585776">chan_reg</a>.<a class="code" href="structsangoma__hptdm__chan__reg.html#1caaaa25e6cafef313bca8ea29c6b612">rx_data</a>(chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#0a79dfe92034591ad20bd1656e585776">chan_reg</a>.<a class="code" href="structsangoma__hptdm__chan__reg.html#5c1df036c59cdb8dbf90bc5f39dab51e">p</a>,chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#2ef17e4e751a2e523849c09a43727cb6">data</a>,chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#985fc4301c6bc466ae05e2bc57b0d37c">len</a>);
<a name="l00258"></a>00258                 } <span class="keywordflow">else</span> {
<a name="l00259"></a>00259                         err=1;
<a name="l00260"></a>00260                 }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262                 <span class="keywordflow">if</span> (err) {
<a name="l00263"></a>00263                         chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#7a43df2f36462e48e1104704fe38ccc1">init</a>=0;
<a name="l00264"></a>00264                         chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#0a79dfe92034591ad20bd1656e585776">chan_reg</a>.<a class="code" href="structsangoma__hptdm__chan__reg.html#5c1df036c59cdb8dbf90bc5f39dab51e">p</a>=NULL;
<a name="l00265"></a>00265                 }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         <span class="keywordflow">return</span> err;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 
<a name="l00280"></a>00280 <span class="keywordtype">int</span> sangoma_hp_tdm_handle_read_event(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282         <span class="keywordtype">int</span> err;
<a name="l00283"></a>00283         hp_tdmapi_rx_event_t *rx_event = (hp_tdmapi_rx_event_t*)&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>[0];
<a name="l00284"></a>00284 
<a name="l00285"></a>00285         err = sangoma_readmsg_hp_tdm(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>,
<a name="l00286"></a>00286                                      &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>[0],<span class="keyword">sizeof</span>(api_rx_hdr_t),
<a name="l00287"></a>00287                                      &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>[<span class="keyword">sizeof</span>(api_rx_hdr_t)],
<a name="l00288"></a>00288                                      <span class="keyword">sizeof</span>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#917ee1efbde4fef0550aff1b1a5ae5cf">rx_data</a>) - <span class="keyword">sizeof</span>(api_rx_hdr_t),
<a name="l00289"></a>00289                                      0);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         <span class="keywordflow">if</span> (err &gt;  <span class="keyword">sizeof</span>(api_rx_hdr_t)) {
<a name="l00292"></a>00292 
<a name="l00293"></a>00293                 lib_printf(15,NULL, <span class="stringliteral">"SPAN %i Read Len = %i\n"</span>,span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1,err);
<a name="l00294"></a>00294 
<a name="l00295"></a>00295                 <span class="keywordflow">if</span> (rx_event-&gt;event_type) {
<a name="l00296"></a>00296 
<a name="l00297"></a>00297                         <span class="keywordflow">if</span> (span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#30987897dd298e9f5e604e8c6cef9081">rx_event</a> &amp;&amp; span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#23010e26a1e33a91d94fa7f22fe588c1">p</a>) {
<a name="l00298"></a>00298                                 span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#30987897dd298e9f5e604e8c6cef9081">rx_event</a>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#3fe0c377ed097e61a98b9b278a2ec870">span_reg</a>.<a class="code" href="structsangoma__hptdm__span__reg.html#23010e26a1e33a91d94fa7f22fe588c1">p</a>, rx_event);
<a name="l00299"></a>00299                         }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301                 } <span class="keywordflow">else</span> {
<a name="l00302"></a>00302 
<a name="l00303"></a>00303                         <span class="keywordflow">if</span> (err % span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>) {
<a name="l00304"></a>00304                                 lib_printf(0,NULL, <span class="stringliteral">"Error: SPAN %i Read Len = %i Block not chunk %i aligned! \n"</span>,span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1,err,span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>);
<a name="l00305"></a>00305                                 <span class="comment">/* Received chunk size is not aligned drop it for now */</span>
<a name="l00306"></a>00306                                 <span class="keywordflow">return</span> 0;
<a name="l00307"></a>00307                         }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309                         sangoma_hp_tdm_push_rx_data(span);
<a name="l00310"></a>00310                 }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312                 err=0;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314         } <span class="keywordflow">else</span> {
<a name="l00315"></a>00315                 <span class="keywordflow">if</span> (errno == EAGAIN) {
<a name="l00316"></a>00316                         err = 0;
<a name="l00317"></a>00317                 } <span class="keywordflow">else</span> {
<a name="l00318"></a>00318                         err=-1;
<a name="l00319"></a>00319                 }
<a name="l00320"></a>00320         }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322         <span class="keywordflow">return</span> err;
<a name="l00323"></a>00323 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00331"></a>00331 <span class="keywordtype">int</span> sangoma_hp_tdm_handle_write_event(<a class="code" href="structsangoma__hptdm__span.html">sangoma_hptdm_span_t</a> *span)
<a name="l00332"></a>00332 {
<a name="l00333"></a>00333         <span class="keywordtype">int</span> i=0,x=0,err=0;
<a name="l00334"></a>00334         <a class="code" href="structsangoma__hptdm__chan.html">sangoma_hptdm_chan_t</a> *chan;
<a name="l00335"></a>00335         <a class="code" href="structhp__tdm__chunk.html">hp_tmd_chunk_t</a> *chunk;
<a name="l00336"></a>00336         <span class="keywordtype">int</span> chan_no_hw=0;
<a name="l00337"></a>00337         <span class="keywordtype">char</span> *tx_data = &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#79ae4bccb7e92866e20e816a629c9ce7">tx_data</a>[<span class="keyword">sizeof</span>(api_tx_hdr_t)];
<a name="l00338"></a>00338 
<a name="l00339"></a>00339         memset(&amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#79ae4bccb7e92866e20e816a629c9ce7">tx_data</a>,span-&gt;<a class="code" href="structsangoma__hptdm__span.html#15230551ba1429679eda4ac11cf7ebf7">idle</a>,<span class="keyword">sizeof</span>(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#79ae4bccb7e92866e20e816a629c9ce7">tx_data</a>));
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 
<a name="l00342"></a>00342         <span class="keywordflow">for</span> (i=0;i&lt;SMG_HP_TDM_MAX_CHANS;i++) {
<a name="l00343"></a>00343                 chan = &amp;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#63de8342af835a970d8105c2fe5282dc">chan_idx</a>[i].<a class="code" href="structsangoma__hptdm__chan__map.html#65a3733433aa931afb5002994bb4a4cf">chan</a>;
<a name="l00344"></a>00344                 if (!chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#7a43df2f36462e48e1104704fe38ccc1">init</a>) {
<a name="l00345"></a>00345                         <span class="comment">/* This channel is not open */</span>
<a name="l00346"></a>00346                         <span class="keywordflow">continue</span>;
<a name="l00347"></a>00347                 }
<a name="l00348"></a>00348                 chan_no_hw=span-&gt;<a class="code" href="structsangoma__hptdm__span.html#63de8342af835a970d8105c2fe5282dc">chan_idx</a>[i].<a class="code" href="structsangoma__hptdm__chan__map.html#895d7b39838f0245ac6829cd72489818">chan_no_hw</a>;
<a name="l00349"></a>00349 
<a name="l00350"></a>00350                 chunk = &amp;chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#7e12d6e901b165fc5589bd9b88cf15fc">tx_idx</a>[chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>];
<a name="l00351"></a>00351                 <span class="keywordflow">if</span> (!chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#499da7fa85efbeef88ef5e2a499e2191">init</a>) {
<a name="l00352"></a>00352                         lib_printf(15,NULL,<span class="stringliteral">"span write s%ic%i tx chunk underrun out %i \n"</span>,
<a name="l00353"></a>00353                                         chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#1604a853c601891fe97c0e1dfef97430">span_no</a>+1,chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#5e5053195c086b7e5bfa683573484e8c">chan_no</a>+1,chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>);
<a name="l00354"></a>00354                         <span class="comment">/* There is no tx data for this channel */</span>
<a name="l00355"></a>00355                         <span class="keywordflow">continue</span>;
<a name="l00356"></a>00356                 }
<a name="l00357"></a>00357 
<a name="l00358"></a>00358                 <span class="keywordflow">for</span> (x=0;x&lt;span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c8ea25063a09267bbe22084e6cb7a32c">chunk_sz</a>;x++) {
<a name="l00359"></a>00359 
<a name="l00360"></a>00360                         tx_data[(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#9efd139e4214d62b07060147acfd2849">max_chans</a>*x)+chan_no_hw] = chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#2ef17e4e751a2e523849c09a43727cb6">data</a>[chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#959a167c4d18c409c56f500982026e2a">offset</a>];
<a name="l00361"></a>00361                         chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#959a167c4d18c409c56f500982026e2a">offset</a>++;
<a name="l00362"></a>00362 
<a name="l00363"></a>00363                         if (chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#959a167c4d18c409c56f500982026e2a">offset</a> &gt;= chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#985fc4301c6bc466ae05e2bc57b0d37c">len</a>) {
<a name="l00364"></a>00364                                 chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#499da7fa85efbeef88ef5e2a499e2191">init</a>=0;
<a name="l00365"></a>00365 
<a name="l00366"></a>00366                                 lib_printf(15,NULL,<span class="stringliteral">"span write s%ic%i tx chunk out %i \n"</span>,
<a name="l00367"></a>00367                                         chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#1604a853c601891fe97c0e1dfef97430">span_no</a>+1,chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#5e5053195c086b7e5bfa683573484e8c">chan_no</a>+1,chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>);
<a name="l00368"></a>00368 
<a name="l00369"></a>00369                                 chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>++;
<a name="l00370"></a>00370                                 if (chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a> &gt;= SMG_HP_TDM_CHUNK_IDX_SZ) {
<a name="l00371"></a>00371                                         chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>=0;
<a name="l00372"></a>00372                                 }
<a name="l00373"></a>00373                                 chunk=&amp;chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#7e12d6e901b165fc5589bd9b88cf15fc">tx_idx</a>[chan-&gt;<a class="code" href="structsangoma__hptdm__chan.html#f006a684b96712e6ad2a14b13a2665cc">tx_idx_out</a>];
<a name="l00374"></a>00374                                 <span class="keywordflow">if</span> (!chunk-&gt;<a class="code" href="structhp__tdm__chunk.html#499da7fa85efbeef88ef5e2a499e2191">init</a>) {
<a name="l00375"></a>00375                                         <span class="comment">/* We are out of tx data on this channel */</span>
<a name="l00376"></a>00376                                         <span class="keywordflow">break</span>;
<a name="l00377"></a>00377                                 }
<a name="l00378"></a>00378                         }
<a name="l00379"></a>00379                 }
<a name="l00380"></a>00380         }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 
<a name="l00383"></a>00383         err = sangoma_writemsg_hp_tdm(span-&gt;<a class="code" href="structsangoma__hptdm__span.html#2beb9a0490cfda191875bbaf58e79453">sock</a>,
<a name="l00384"></a>00384                                      span-&gt;<a class="code" href="structsangoma__hptdm__span.html#79ae4bccb7e92866e20e816a629c9ce7">tx_data</a>,<span class="keyword">sizeof</span>(api_tx_hdr_t),
<a name="l00385"></a>00385                                      tx_data, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c3bad0a028665de4385f792bf0be3c55">tx_size</a>,
<a name="l00386"></a>00386                                      0);
<a name="l00387"></a>00387 
<a name="l00388"></a>00388         lib_printf(15, NULL, <span class="stringliteral">"SPAN %i TX Len %i Expecting %i\n"</span>,
<a name="l00389"></a>00389                         span-&gt;<a class="code" href="structsangoma__hptdm__span.html#6ddf12c36674099ef529234d9057e5ef">span_no</a>+1, err, span-&gt;<a class="code" href="structsangoma__hptdm__span.html#c3bad0a028665de4385f792bf0be3c55">tx_size</a>+<span class="keyword">sizeof</span>(api_tx_hdr_t));
<a name="l00390"></a>00390 
<a name="l00391"></a>00391         <span class="keywordflow">if</span> (err &lt; span-&gt;tx_size) {
<a name="l00392"></a>00392                 <span class="keywordflow">if</span> (errno == EAGAIN) {
<a name="l00393"></a>00393                         <span class="keywordflow">return</span> 0;
<a name="l00394"></a>00394                 } <span class="keywordflow">else</span> {
<a name="l00395"></a>00395                         <span class="keywordflow">return</span> -1;
<a name="l00396"></a>00396                 }
<a name="l00397"></a>00397         } <span class="keywordflow">else</span> {
<a name="l00398"></a>00398                 err=0;
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401         <span class="keywordflow">return</span> err;
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun Aug 17 23:56:55 2008 for libhpsangoma by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
