diff -dur /root/3.1.X/wanpipe/util/wancfg/conf_file_reader.cpp wancfg/conf_file_reader.cpp
--- /root/3.1.X/wanpipe/util/wancfg/conf_file_reader.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/conf_file_reader.cpp	2007-06-04 14:55:32.000000000 -0400
@@ -23,21 +23,6 @@
 #define DBG_CONF_FILE_READER	  1
 #define DBG_CONF_FILE_READER_AFT  1
 
-#define smemof(TYPE, MEMBER) offsetof(TYPE,MEMBER),(sizeof(((TYPE *)0)->MEMBER))
-
-static void SIZEOFASSERT (key_word_t* dtab, unsigned int type_size)
-{
-      if (dtab->size != type_size) {
-		fprintf(stderr,"\n==========CRITICAL ERROR============\n\n");
-		fprintf(stderr,"Size Mismatch: Type Size %i != %i\n",dtab->size, type_size);
-		fprintf(stderr,"======================================\n\n");
-		fprintf(stderr,"Plese email /var/log/wanrouter file to Sangoma Support\n");
-		fprintf(stderr,"Email to techdesk@sangoma.com\n");
-		fprintf(stderr,"======================================\n\n");
-      }
-}
-
-
 //////////////////////////////////////////////////////////////////////////////////////////
 
 /****** Global Data *********************************************************/
@@ -49,115 +34,114 @@
  */
 key_word_t common_conftab[] =	/* Common configuration parameters */
 {
-  { "IOPORT",     smemof(wandev_conf_t, ioport),     DTYPE_UINT },
-  { "MEMADDR",    smemof(wandev_conf_t, maddr),       DTYPE_UINT },
-  { "MEMSIZE",    smemof(wandev_conf_t, msize),       DTYPE_UINT },
-  { "IRQ",        smemof(wandev_conf_t, irq),         DTYPE_UINT },
-  { "DMA",        smemof(wandev_conf_t, dma),         DTYPE_UINT },
-  { "CARD_TYPE",  smemof(wandev_conf_t, card_type),	DTYPE_UCHAR },
-  { "S514CPU",    smemof(wandev_conf_t, S514_CPU_no), DTYPE_STR },
-  { "PCISLOT",    smemof(wandev_conf_t, PCI_slot_no), DTYPE_UINT },
-  { "PCIBUS", 	  smemof(wandev_conf_t, pci_bus_no),	DTYPE_UINT },
-  { "AUTO_PCISLOT",smemof(wandev_conf_t, auto_pci_cfg), DTYPE_UCHAR },
-  { "COMMPORT",   smemof(wandev_conf_t, comm_port),   DTYPE_UINT },
+  { "IOPORT",     offsetof(wandev_conf_t, ioport),     DTYPE_UINT },
+  { "MEMADDR",    offsetof(wandev_conf_t, maddr),       DTYPE_UINT },
+  { "MEMSIZE",    offsetof(wandev_conf_t, msize),       DTYPE_UINT },
+  { "IRQ",        offsetof(wandev_conf_t, irq),         DTYPE_UINT },
+  { "DMA",        offsetof(wandev_conf_t, dma),         DTYPE_UINT },
+  { "CARD_TYPE",  offsetof(wandev_conf_t, card_type),	DTYPE_UCHAR },
+  { "S514CPU",    offsetof(wandev_conf_t, S514_CPU_no), DTYPE_STR },
+  { "PCISLOT",    offsetof(wandev_conf_t, PCI_slot_no), DTYPE_UINT },
+  { "PCIBUS", 	  offsetof(wandev_conf_t, pci_bus_no),	DTYPE_UINT },
+  { "AUTO_PCISLOT",offsetof(wandev_conf_t, auto_pci_cfg), DTYPE_UCHAR },
+  { "COMMPORT",   offsetof(wandev_conf_t, comm_port),   DTYPE_UINT },
 
   /* Front-End parameters */
-  { "FE_MEDIA",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, media), DTYPE_UCHAR },
-  { "FE_LCODE",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, lcode), DTYPE_UCHAR },
-  { "FE_FRAME",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, frame), DTYPE_UCHAR },
-  { "FE_LINE",     offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, line_no),  DTYPE_UINT },
-  { "FE_TXTRISTATE", offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, tx_tristate_mode),  DTYPE_UCHAR },
+  { "FE_MEDIA",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, media), DTYPE_UCHAR },
+  { "FE_LCODE",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, lcode), DTYPE_UCHAR },
+  { "FE_FRAME",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, frame), DTYPE_UCHAR },
+  { "FE_LINE",     offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, line_no),  DTYPE_UINT },
+  { "FE_TXTRISTATE", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, tx_tristate_mode),  DTYPE_UCHAR },
 
   /* Front-End parameters (old style) */
-  { "MEDIA",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, media), DTYPE_UCHAR },
-  { "LCODE",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, lcode), DTYPE_UCHAR },
-  { "FRAME",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, frame), DTYPE_UCHAR },
+  { "MEDIA",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, media), DTYPE_UCHAR },
+  { "LCODE",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, lcode), DTYPE_UCHAR },
+  { "FRAME",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, frame), DTYPE_UCHAR },
   /* T1/E1 Front-End parameters */
-  { "TE_LBO", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, lbo), DTYPE_UCHAR },
-  { "TE_CLOCK",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, te_clock),
+  { "TE_LBO", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, lbo), DTYPE_UCHAR },
+  { "TE_CLOCK",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, te_clock),
 	 DTYPE_UCHAR },
-  { "TE_ACTIVE_CH",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, active_ch),
+  { "TE_ACTIVE_CH",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, active_ch),
+	 DTYPE_ULONG },
+  { "TE_HIGHIMPEDANCE", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, high_impedance_mode), DTYPE_UCHAR },
+  { "TE_REF_CLOCK",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, te_ref_clock),
 	 DTYPE_UINT },
-  { "TE_HIGHIMPEDANCE", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, high_impedance_mode), DTYPE_UCHAR },
-
-  { "TE_REF_CLOCK",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, te_ref_clock),
-	 DTYPE_UCHAR },
-  { "TE_SIG_MODE",     offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, sig_mode), DTYPE_UINT },
+  { "TE_SIG_MODE",     offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, sig_mode), DTYPE_UINT },
   /* T1/E1 Front-End parameters (old style) */
-  { "LBO",           offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, lbo), DTYPE_UCHAR },
-  { "ACTIVE_CH",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, active_ch), DTYPE_UINT },
-  { "HIGHIMPEDANCE", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te_cfg_t, high_impedance_mode), DTYPE_UCHAR },
+  { "LBO",           offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, lbo), DTYPE_UCHAR },
+  { "ACTIVE_CH",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, active_ch), DTYPE_ULONG },
+  { "HIGHIMPEDANCE", offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te_cfg_t, high_impedance_mode), DTYPE_UCHAR },
   /* T3/E3 Front-End parameters */
-  { "TE3_FRACTIONAL",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te3_cfg_t, fractional), DTYPE_UCHAR },
-  { "TE3_RDEVICE",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te3_cfg_t, rdevice_type), DTYPE_UCHAR },
-  { "TE3_FCS",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te3_cfg_t, fcs), DTYPE_UINT },
+  { "TE3_FRACTIONAL",offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, fractional), DTYPE_UCHAR },
+  { "TE3_RDEVICE",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, rdevice_type), DTYPE_UCHAR },
+  { "TE3_FCS",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, fcs), DTYPE_UINT },
 
-  { "TE3_RXEQ",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + smemof(sdla_te3_liu_cfg_t, rx_equal), DTYPE_UINT },
+  { "TE3_RXEQ",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + offsetof(sdla_te3_liu_cfg_t, rx_equal), DTYPE_UINT },
 
-  { "TE3_TAOS",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + smemof(sdla_te3_liu_cfg_t, taos), DTYPE_UINT },
+  { "TE3_TAOS",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + offsetof(sdla_te3_liu_cfg_t, taos), DTYPE_UINT },
   
-  { "TE3_LBMODE",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + smemof(sdla_te3_liu_cfg_t, lb_mode), DTYPE_UINT },
+  { "TE3_LBMODE",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + offsetof(sdla_te3_liu_cfg_t, lb_mode), DTYPE_UINT },
   
-  { "TE3_TXLBO",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + smemof(sdla_te3_liu_cfg_t, tx_lbo), DTYPE_UINT },
+  { "TE3_TXLBO",	offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, liu_cfg) + offsetof(sdla_te3_liu_cfg_t, tx_lbo), DTYPE_UINT },
 
-   { "TE3_CLOCK",       offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_te3_cfg_t, clock), DTYPE_UCHAR },
+   { "TE3_CLOCK",       offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_te3_cfg_t, clock), DTYPE_UCHAR },
    
-  { "TDMV_LAW",    offsetof(wandev_conf_t, fe_cfg)+smemof(sdla_fe_cfg_t, tdmv_law), DTYPE_UINT },
+  { "TDMV_LAW",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, tdmv_law), DTYPE_UINT },
 
-  { "TDMV_OPERMODE",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_remora_cfg_t, opermode_name), DTYPE_STR },
-  { "RM_BATTTHRESH",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_remora_cfg_t, battthresh), DTYPE_UINT },
-  { "RM_BATTDEBOUNCE",  offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_remora_cfg_t, battdebounce), DTYPE_UINT },
+  { "TDMV_OPERMODE",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_remora_cfg_t, opermode_name), DTYPE_STR },
 
-    /* TDMV parameters */
-  { "TDMV_SPAN",     offsetof(wandev_conf_t, tdmv_conf)+smemof(wan_tdmv_conf_t, span_no), DTYPE_UINT},
-  { "TDMV_DCHAN",    offsetof(wandev_conf_t, tdmv_conf)+smemof(wan_tdmv_conf_t, dchan),   DTYPE_UINT},
-  { "TDMV_HW_DTMF",  offsetof(wandev_conf_t, tdmv_conf)+smemof(wan_tdmv_conf_t, hw_dtmf),    DTYPE_UCHAR},
-          
+  { "RM_NETWORK_SYNC",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + offsetof(sdla_remora_cfg_t, network_sync), DTYPE_UCHAR},
 
-  { "BAUDRATE",   smemof(wandev_conf_t, bps),         DTYPE_UINT },
-  { "MTU",        smemof(wandev_conf_t, mtu),         DTYPE_UINT },
-  { "UDPPORT",    smemof(wandev_conf_t, udp_port),    DTYPE_UINT },
-  { "TTL",	  smemof(wandev_conf_t, ttl),		DTYPE_UCHAR },
-  { "INTERFACE",  smemof(wandev_conf_t, interface),   DTYPE_UCHAR },
-  { "CLOCKING",   smemof(wandev_conf_t, clocking),    DTYPE_UCHAR },
-  { "LINECODING", smemof(wandev_conf_t, line_coding), DTYPE_UCHAR },
-  { "CONNECTION", smemof(wandev_conf_t, connection),  DTYPE_UCHAR },
-  { "LINEIDLE",   smemof(wandev_conf_t, line_idle),   DTYPE_UCHAR },
-  { "OPTION1",    smemof(wandev_conf_t, hw_opt[0]),   DTYPE_UINT },
-  { "OPTION2",    smemof(wandev_conf_t, hw_opt[1]),   DTYPE_UINT },
-  { "OPTION3",    smemof(wandev_conf_t, hw_opt[2]),   DTYPE_UINT },
-  { "OPTION4",    smemof(wandev_conf_t, hw_opt[3]),   DTYPE_UINT },
-  { "FIRMWARE",   smemof(wandev_conf_t, data_size),   DTYPE_FILENAME },
-  { "RXMODE",     smemof(wandev_conf_t, read_mode),   DTYPE_CHAR },
-  { "RECEIVE_ONLY", smemof(wandev_conf_t, receive_only), DTYPE_UCHAR},	  
-  { "BACKUP",     smemof(wandev_conf_t, backup), DTYPE_UCHAR},
-  { "TTY",        smemof(wandev_conf_t, tty), DTYPE_UCHAR},
-  { "TTY_MAJOR",  smemof(wandev_conf_t, tty_major), DTYPE_UINT},
-  { "TTY_MINOR",  smemof(wandev_conf_t, tty_minor), DTYPE_UINT},
-  { "TTY_MODE",   smemof(wandev_conf_t, tty_mode), DTYPE_UINT},
-  { "IGNORE_FRONT_END",  smemof(wandev_conf_t, ignore_front_end_status), DTYPE_UCHAR},
+/* DAVIDY: Uncomment this when RM_BATTTHRESH and RM_BATTDEBOUNCE become available in 2.3.4 drivers*/ 
+#if 0
+  { "RM_BATTTHRESH",    offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_remora_cfg_t, battthresh), DTYPE_UINT },
+  { "RM_BATTDEBOUNCE",  offsetof(wandev_conf_t, fe_cfg)+offsetof(sdla_fe_cfg_t, cfg) + smemof(sdla_remora_cfg_t, battdebounce), DTYPE_UINT },
+#endif
+  
+  { "BAUDRATE",   offsetof(wandev_conf_t, bps),         DTYPE_UINT },
+  { "MTU",        offsetof(wandev_conf_t, mtu),         DTYPE_UINT },
+  { "UDPPORT",    offsetof(wandev_conf_t, udp_port),    DTYPE_UINT },
+  { "TTL",	  offsetof(wandev_conf_t, ttl),		DTYPE_UCHAR },
+  { "INTERFACE",  offsetof(wandev_conf_t, interface),   DTYPE_UCHAR },
+  { "CLOCKING",   offsetof(wandev_conf_t, clocking),    DTYPE_UCHAR },
+  { "LINECODING", offsetof(wandev_conf_t, line_coding), DTYPE_UCHAR },
+  { "CONNECTION", offsetof(wandev_conf_t, connection),  DTYPE_UCHAR },
+  { "LINEIDLE",   offsetof(wandev_conf_t, line_idle),   DTYPE_UCHAR },
+  { "OPTION1",    offsetof(wandev_conf_t, hw_opt[0]),   DTYPE_UINT },
+  { "OPTION2",    offsetof(wandev_conf_t, hw_opt[1]),   DTYPE_UINT },
+  { "OPTION3",    offsetof(wandev_conf_t, hw_opt[2]),   DTYPE_UINT },
+  { "OPTION4",    offsetof(wandev_conf_t, hw_opt[3]),   DTYPE_UINT },
+  { "FIRMWARE",   offsetof(wandev_conf_t, data_size),   DTYPE_FILENAME },
+  { "RXMODE",     offsetof(wandev_conf_t, read_mode),   DTYPE_CHAR },
+  { "RECEIVE_ONLY", offsetof(wandev_conf_t, receive_only), DTYPE_UCHAR},	  
+  { "BACKUP",     offsetof(wandev_conf_t, backup), DTYPE_UCHAR},
+  { "TTY",        offsetof(wandev_conf_t, tty), DTYPE_UCHAR},
+  { "TTY_MAJOR",  offsetof(wandev_conf_t, tty_major), DTYPE_UINT},
+  { "TTY_MINOR",  offsetof(wandev_conf_t, tty_minor), DTYPE_UINT},
+  { "TTY_MODE",   offsetof(wandev_conf_t, tty_mode), DTYPE_UINT},
+  { "IGNORE_FRONT_END",  offsetof(wandev_conf_t, ignore_front_end_status), DTYPE_UCHAR},
 
 
-  { "MAX_RX_QUEUE", smemof(wandev_conf_t, max_rx_queue), DTYPE_UINT},
-  { "LMI_TRACE_QUEUE", smemof(wandev_conf_t, max_rx_queue), DTYPE_UINT},
+  { "MAX_RX_QUEUE", offsetof(wandev_conf_t, max_rx_queue), DTYPE_UINT},
+  { "LMI_TRACE_QUEUE", offsetof(wandev_conf_t, max_rx_queue), DTYPE_UINT},
   { NULL, 0, 0 }
 };
 
 /*
 key_word_t ppp_conftab[] =	// PPP-specific configuration (on Firmware PPP)
  {
-  { "RESTARTTIMER",   smemof(wan_ppp_conf_t, restart_tmr),   DTYPE_UINT },
-  { "AUTHRESTART",    smemof(wan_ppp_conf_t, auth_rsrt_tmr), DTYPE_UINT },
-  { "AUTHWAIT",       smemof(wan_ppp_conf_t, auth_wait_tmr), DTYPE_UINT },
+  { "RESTARTTIMER",   offsetof(wan_ppp_conf_t, restart_tmr),   DTYPE_UINT },
+  { "AUTHRESTART",    offsetof(wan_ppp_conf_t, auth_rsrt_tmr), DTYPE_UINT },
+  { "AUTHWAIT",       offsetof(wan_ppp_conf_t, auth_wait_tmr), DTYPE_UINT },
 
-  { "DTRDROPTIMER",   smemof(wan_ppp_conf_t, dtr_drop_tmr),  DTYPE_UINT },
-  { "CONNECTTIMEOUT", smemof(wan_ppp_conf_t, connect_tmout), DTYPE_UINT },
-  { "CONFIGURERETRY", smemof(wan_ppp_conf_t, conf_retry),    DTYPE_UINT },
-  { "TERMINATERETRY", smemof(wan_ppp_conf_t, term_retry),    DTYPE_UINT },
-  { "MAXCONFREJECT",  smemof(wan_ppp_conf_t, fail_retry),    DTYPE_UINT },
-  { "AUTHRETRY",      smemof(wan_ppp_conf_t, auth_retry),    DTYPE_UINT },
-  { "AUTHENTICATOR",  smemof(wan_ppp_conf_t, authenticator), DTYPE_UCHAR},
-  { "IP_MODE",        smemof(wan_ppp_conf_t, ip_mode),       DTYPE_UCHAR},
+  { "DTRDROPTIMER",   offsetof(wan_ppp_conf_t, dtr_drop_tmr),  DTYPE_UINT },
+  { "CONNECTTIMEOUT", offsetof(wan_ppp_conf_t, connect_tmout), DTYPE_UINT },
+  { "CONFIGURERETRY", offsetof(wan_ppp_conf_t, conf_retry),    DTYPE_UINT },
+  { "TERMINATERETRY", offsetof(wan_ppp_conf_t, term_retry),    DTYPE_UINT },
+  { "MAXCONFREJECT",  offsetof(wan_ppp_conf_t, fail_retry),    DTYPE_UINT },
+  { "AUTHRETRY",      offsetof(wan_ppp_conf_t, auth_retry),    DTYPE_UINT },
+  { "AUTHENTICATOR",  offsetof(wan_ppp_conf_t, authenticator), DTYPE_UCHAR},
+  { "IP_MODE",        offsetof(wan_ppp_conf_t, ip_mode),       DTYPE_UCHAR},
   { NULL, 0, 0 }
 };
 */
@@ -165,34 +149,34 @@
 #if 0
 key_word_t synch_ppp_conftab[] =	/* PPP-on LIP layer configuration */
  {
-  { "IP_MODE",        	smemof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
-  { "IP_MODE",		smemof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
-  { "PAP",   	     	smemof(wan_sppp_if_conf_t, pap),		DTYPE_UCHAR},
-  { "CHAP",          	smemof(wan_sppp_if_conf_t, chap),		DTYPE_UCHAR},
-  { "USERID",        	smemof(wan_sppp_if_conf_t, userid),	 	DTYPE_STR},
-  { "PASSWD",        	smemof(wan_sppp_if_conf_t, passwd),		DTYPE_STR},
-  { "SYSNAME",       	smemof(wan_sppp_if_conf_t, sysname),		DTYPE_STR},
+  { "IP_MODE",        	offsetof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
+  { "IP_MODE",		offsetof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
+  { "PAP",   	     	offsetof(wan_sppp_if_conf_t, pap),		DTYPE_UCHAR},
+  { "CHAP",          	offsetof(wan_sppp_if_conf_t, chap),		DTYPE_UCHAR},
+  { "USERID",        	offsetof(wan_sppp_if_conf_t, userid),	 	DTYPE_STR},
+  { "PASSWD",        	offsetof(wan_sppp_if_conf_t, passwd),		DTYPE_STR},
+  { "SYSNAME",       	offsetof(wan_sppp_if_conf_t, sysname),		DTYPE_STR},
   { NULL, 0, 0 }
 };
 #endif
 
 key_word_t sppp_conftab[] =	/* PPP-CHDLC (in LIP layer!!!) specific configuration */
  {
-  { "IP_MODE",        smemof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
+  { "IP_MODE",        offsetof(wan_sppp_if_conf_t, dynamic_ip),       DTYPE_UCHAR},
 	
-  { "AUTH_TIMER",     smemof(wan_sppp_if_conf_t, pp_auth_timer),    DTYPE_UINT},
-  { "KEEPALIVE_TIMER",smemof(wan_sppp_if_conf_t, sppp_keepalive_timer),    DTYPE_UINT},
-  { "PPP_TIMER",      smemof(wan_sppp_if_conf_t, pp_timer),    DTYPE_UINT},
+  { "AUTH_TIMER",     offsetof(wan_sppp_if_conf_t, pp_auth_timer),    DTYPE_UINT},
+  { "KEEPALIVE_TIMER",offsetof(wan_sppp_if_conf_t, sppp_keepalive_timer),    DTYPE_UINT},
+  { "PPP_TIMER",      offsetof(wan_sppp_if_conf_t, pp_timer),    DTYPE_UINT},
  
-  { "PAP",	      smemof(wan_sppp_if_conf_t, pap),    DTYPE_UCHAR},		
-  { "CHAP",	      smemof(wan_sppp_if_conf_t, chap),    DTYPE_UCHAR},		
-  { "CHAP",	      smemof(wan_sppp_if_conf_t, chap),    DTYPE_UCHAR},		
+  { "PAP",	      offsetof(wan_sppp_if_conf_t, pap),    DTYPE_UCHAR},		
+  { "CHAP",	      offsetof(wan_sppp_if_conf_t, chap),    DTYPE_UCHAR},		
+  { "CHAP",	      offsetof(wan_sppp_if_conf_t, chap),    DTYPE_UCHAR},		
 
-  { "USERID",         smemof(wan_sppp_if_conf_t, userid), 	DTYPE_STR},
-  { "PASSWD",         smemof(wan_sppp_if_conf_t, passwd),	DTYPE_STR},
-  { "SYSNAME",        smemof(wan_sppp_if_conf_t, sysname),	DTYPE_STR},
+  { "USERID",         offsetof(wan_sppp_if_conf_t, userid), 	DTYPE_STR},
+  { "PASSWD",         offsetof(wan_sppp_if_conf_t, passwd),	DTYPE_STR},
+  { "SYSNAME",        offsetof(wan_sppp_if_conf_t, sysname),	DTYPE_STR},
 
-  { "KEEPALIVE_ERROR_MARGIN", smemof(wan_sppp_if_conf_t, keepalive_err_margin),    DTYPE_UINT },
+  { "KEEPALIVE_ERROR_MARGIN", offsetof(wan_sppp_if_conf_t, keepalive_err_margin),    DTYPE_UINT },
 
   { NULL, 0, 0 }
 };
@@ -201,40 +185,44 @@
 //not used by MP_CHDLC!! - it is all in 'wanif_conf_t'
 key_word_t chdlc_conftab[] =	/* Cisco HDLC-specific configuration - in FIRMWARE!!*/
  {
-  { "IGNORE_DCD", smemof(wan_chdlc_conf_t, ignore_dcd), DTYPE_UCHAR},
-  { "IGNORE_CTS", smemof(wan_chdlc_conf_t, ignore_cts), DTYPE_UCHAR},
-  { "IGNORE_KEEPALIVE", smemof(wan_chdlc_conf_t, ignore_keepalive), DTYPE_UCHAR},
-  { "HDLC_STREAMING", smemof(wan_chdlc_conf_t, hdlc_streaming), DTYPE_UCHAR},
-  { "KEEPALIVE_TX_TIMER", smemof(wan_chdlc_conf_t, keepalive_tx_tmr), DTYPE_UINT },
-  { "KEEPALIVE_RX_TIMER", smemof(wan_chdlc_conf_t, keepalive_rx_tmr), DTYPE_UINT },
-  { "KEEPALIVE_ERR_MARGIN", smemof(wan_chdlc_conf_t, keepalive_err_margin),    DTYPE_UINT },
-  { "SLARP_TIMER", smemof(wan_chdlc_conf_t, slarp_timer),    DTYPE_UINT },
-  { "FAST_ISR", smemof(wan_chdlc_conf_t,fast_isr), DTYPE_UCHAR },
+  { "IGNORE_DCD", offsetof(wan_chdlc_conf_t, ignore_dcd), DTYPE_UCHAR},
+  { "IGNORE_CTS", offsetof(wan_chdlc_conf_t, ignore_cts), DTYPE_UCHAR},
+  { "IGNORE_KEEPALIVE", offsetof(wan_chdlc_conf_t, ignore_keepalive), DTYPE_UCHAR},
+  { "HDLC_STREAMING", offsetof(wan_chdlc_conf_t, hdlc_streaming), DTYPE_UCHAR},
+  { "KEEPALIVE_TX_TIMER", offsetof(wan_chdlc_conf_t, keepalive_tx_tmr), DTYPE_UINT },
+  { "KEEPALIVE_RX_TIMER", offsetof(wan_chdlc_conf_t, keepalive_rx_tmr), DTYPE_UINT },
+  { "KEEPALIVE_ERR_MARGIN", offsetof(wan_chdlc_conf_t, keepalive_err_margin),    DTYPE_UINT },
+  { "SLARP_TIMER", offsetof(wan_chdlc_conf_t, slarp_timer),    DTYPE_UINT },
+  { "FAST_ISR", offsetof(wan_chdlc_conf_t,fast_isr), DTYPE_UCHAR },
   { NULL, 0, 0 }
 };
 #endif
 
 key_word_t fr_conftab[] =	/* Frame relay-specific configuration */
 {
-  { "SIGNALLING",    smemof(wan_fr_conf_t, signalling),     DTYPE_UINT },
-  { "T391", 	     smemof(wan_fr_conf_t, t391),           DTYPE_UINT },
-  { "T392",          smemof(wan_fr_conf_t, t392),           DTYPE_UINT },
-  { "N391",	     smemof(wan_fr_conf_t, n391),           DTYPE_UINT },
-  { "N392",          smemof(wan_fr_conf_t, n392),           DTYPE_UINT },
-  { "N393",          smemof(wan_fr_conf_t, n393),           DTYPE_UINT },
-  { "FR_ISSUE_FS",   smemof(wan_fr_conf_t, issue_fs_on_startup),DTYPE_UCHAR },
-  { "NUMBER_OF_DLCI",    smemof(wan_fr_conf_t, dlci_num),       DTYPE_UINT },
-  { "STATION",       smemof(wan_fr_conf_t, station),     DTYPE_UCHAR },
+  { "SIGNALLING",    offsetof(wan_fr_conf_t, signalling),     DTYPE_UINT },
+  { "T391", 	     offsetof(wan_fr_conf_t, t391),           DTYPE_UINT },
+  { "T392",          offsetof(wan_fr_conf_t, t392),           DTYPE_UINT },
+  { "N391",	     offsetof(wan_fr_conf_t, n391),           DTYPE_UINT },
+  { "N392",          offsetof(wan_fr_conf_t, n392),           DTYPE_UINT },
+  { "N393",          offsetof(wan_fr_conf_t, n393),           DTYPE_UINT },
+  { "FR_ISSUE_FS",   offsetof(wan_fr_conf_t, issue_fs_on_startup),DTYPE_UCHAR },
+  { "NUMBER_OF_DLCI",    offsetof(wan_fr_conf_t, dlci_num),       DTYPE_UINT },
+  { "STATION",       offsetof(wan_fr_conf_t, station),     DTYPE_UCHAR },
   { NULL, 0, 0 }
 };
 
 key_word_t xilinx_conftab[] =	/* Xilinx specific configuration */
 {
-  { "MRU",     	     smemof(wan_xilinx_conf_t, mru),       DTYPE_USHORT },
-  { "DMA_PER_CH",    smemof(wan_xilinx_conf_t, dma_per_ch),      DTYPE_USHORT },
-  { "RBS",    	     smemof(wan_xilinx_conf_t, rbs),      DTYPE_UCHAR },
-  { "DATA_MUX_MAP",  smemof(wan_xilinx_conf_t, data_mux_map),      DTYPE_UINT },
-  { "RX_CRC_BYTES",  smemof(wan_xilinx_conf_t, rx_crc_bytes), DTYPE_UINT},
+  { "MRU",     	     offsetof(wan_xilinx_conf_t, mru),       DTYPE_USHORT },
+  { "DMA_PER_CH",    offsetof(wan_xilinx_conf_t, dma_per_ch),      DTYPE_USHORT },
+  { "RBS",    	     offsetof(wan_xilinx_conf_t, rbs),      DTYPE_UCHAR },
+  { "DATA_MUX_MAP",  offsetof(wan_xilinx_conf_t, data_mux_map),      DTYPE_UINT },
+  { "TDMV_SPAN",     offsetof(wan_xilinx_conf_t, tdmv_span_no),      DTYPE_UINT},
+  { "TDMV_DCHAN",    offsetof(wan_xilinx_conf_t, tdmv_dchan),   DTYPE_UINT},
+  //{ "TDMV_HWEC",     offsetof(wan_xilinx_conf_t, tdmv_hwec),    DTYPE_UCHAR},
+  //{ "TDMV_HWEC_MAP", offsetof(wan_xilinx_conf_t, tdmv_hwec_map),    DTYPE_UCHAR},
+  { "RX_CRC_BYTES",  offsetof(wan_xilinx_conf_t, rx_crc_bytes), DTYPE_UINT},
   { NULL, 0, 0 }
 };
 
@@ -246,227 +234,227 @@
 key_word_t bitstrm_conftab[] =	/* Bitstreaming specific configuration */
 {
  /* Bit strm options */
-  { "SYNC_OPTIONS",	       smemof(wan_bitstrm_conf_t, sync_options), DTYPE_UINT },
-  { "RX_SYNC_CHAR",	       smemof(wan_bitstrm_conf_t, rx_sync_char), DTYPE_UCHAR},
-  { "MONOSYNC_TX_TIME_FILL_CHAR", smemof(wan_bitstrm_conf_t, monosync_tx_time_fill_char), DTYPE_UCHAR},
-  { "MAX_LENGTH_TX_DATA_BLOCK", smemof(wan_bitstrm_conf_t,max_length_tx_data_block), DTYPE_UINT},
-  { "RX_COMPLETE_LENGTH",       smemof(wan_bitstrm_conf_t,rx_complete_length), DTYPE_UINT},
-  { "RX_COMPLETE_TIMER",        smemof(wan_bitstrm_conf_t,rx_complete_timer), DTYPE_UINT},	
-  { "RBS_CH_MAP",		smemof(wan_bitstrm_conf_t,rbs_map), DTYPE_UINT},
+  { "SYNC_OPTIONS",	       offsetof(wan_bitstrm_conf_t, sync_options), DTYPE_UINT },
+  { "RX_SYNC_CHAR",	       offsetof(wan_bitstrm_conf_t, rx_sync_char), DTYPE_UCHAR},
+  { "MONOSYNC_TX_TIME_FILL_CHAR", offsetof(wan_bitstrm_conf_t, monosync_tx_time_fill_char), DTYPE_UCHAR},
+  { "MAX_LENGTH_TX_DATA_BLOCK", offsetof(wan_bitstrm_conf_t,max_length_tx_data_block), DTYPE_UINT},
+  { "RX_COMPLETE_LENGTH",       offsetof(wan_bitstrm_conf_t,rx_complete_length), DTYPE_UINT},
+  { "RX_COMPLETE_TIMER",        offsetof(wan_bitstrm_conf_t,rx_complete_timer), DTYPE_UINT},	
+  { "RBS_CH_MAP",		offsetof(wan_bitstrm_conf_t,rbs_map), DTYPE_ULONG},
   { NULL, 0, 0 }
 };
 
 key_word_t atm_conftab[] =
 {
-  {"ATM_SYNC_MODE",	       smemof(wan_atm_conf_t,atm_sync_mode), DTYPE_USHORT },
-  {"ATM_SYNC_DATA",	       smemof(wan_atm_conf_t,atm_sync_data), DTYPE_USHORT },
-  {"ATM_SYNC_OFFSET", 	       smemof(wan_atm_conf_t,atm_sync_offset), DTYPE_USHORT },
-  {"ATM_HUNT_TIMER", 	       smemof(wan_atm_conf_t,atm_hunt_timer), DTYPE_USHORT },
-  {"ATM_CELL_CFG", 	       smemof(wan_atm_conf_t,atm_cell_cfg), DTYPE_UCHAR },
-  {"ATM_CELL_PT", 	       smemof(wan_atm_conf_t,atm_cell_pt), DTYPE_UCHAR },
-  {"ATM_CELL_CLP", 	       smemof(wan_atm_conf_t,atm_cell_clp), DTYPE_UCHAR },
-  {"ATM_CELL_PAYLOAD", 	       smemof(wan_atm_conf_t,atm_cell_payload), DTYPE_UCHAR },
+  {"ATM_SYNC_MODE",	       offsetof(wan_atm_conf_t,atm_sync_mode), DTYPE_USHORT },
+  {"ATM_SYNC_DATA",	       offsetof(wan_atm_conf_t,atm_sync_data), DTYPE_USHORT },
+  {"ATM_SYNC_OFFSET", 	       offsetof(wan_atm_conf_t,atm_sync_offset), DTYPE_USHORT },
+  {"ATM_HUNT_TIMER", 	       offsetof(wan_atm_conf_t,atm_hunt_timer), DTYPE_USHORT },
+  {"ATM_CELL_CFG", 	       offsetof(wan_atm_conf_t,atm_cell_cfg), DTYPE_UCHAR },
+  {"ATM_CELL_PT", 	       offsetof(wan_atm_conf_t,atm_cell_pt), DTYPE_UCHAR },
+  {"ATM_CELL_CLP", 	       offsetof(wan_atm_conf_t,atm_cell_clp), DTYPE_UCHAR },
+  {"ATM_CELL_PAYLOAD", 	       offsetof(wan_atm_conf_t,atm_cell_payload), DTYPE_UCHAR },
   { NULL, 0, 0 }
 };
 
 key_word_t atm_if_conftab[] =
 {
-  {"ENCAPMODE",        smemof(wan_atm_conf_if_t, encap_mode), DTYPE_UCHAR },
-  {"VCI", 	       smemof(wan_atm_conf_if_t, vci), DTYPE_USHORT },
-  {"VPI", 	       smemof(wan_atm_conf_if_t, vpi), DTYPE_USHORT },
+  {"ENCAPMODE",        offsetof(wan_atm_conf_if_t, encap_mode), DTYPE_UCHAR },
+  {"VCI", 	       offsetof(wan_atm_conf_if_t, vci), DTYPE_USHORT },
+  {"VPI", 	       offsetof(wan_atm_conf_if_t, vpi), DTYPE_USHORT },
 
-  {"OAM_LOOPBACK",	smemof(wan_atm_conf_if_t,atm_oam_loopback),  DTYPE_UCHAR },
-  {"OAM_LOOPBACK_INT",  smemof(wan_atm_conf_if_t,atm_oam_loopback_intr),  DTYPE_UCHAR },
-  {"OAM_CC_CHECK",	smemof(wan_atm_conf_if_t,atm_oam_continuity),  DTYPE_UCHAR },
-  {"OAM_CC_CHECK_INT",	smemof(wan_atm_conf_if_t,atm_oam_continuity_intr),  DTYPE_UCHAR },
-  {"ATMARP",		smemof(wan_atm_conf_if_t,atm_arp),  DTYPE_UCHAR },
-  {"ATMARP_INT",	smemof(wan_atm_conf_if_t,atm_arp_intr),  DTYPE_UCHAR },
-  {"MTU",		smemof(wan_atm_conf_if_t,mtu),  DTYPE_USHORT },
+  {"OAM_LOOPBACK",	offsetof(wan_atm_conf_if_t,atm_oam_loopback),  DTYPE_UCHAR },
+  {"OAM_LOOPBACK_INT",  offsetof(wan_atm_conf_if_t,atm_oam_loopback_intr),  DTYPE_UCHAR },
+  {"OAM_CC_CHECK",	offsetof(wan_atm_conf_if_t,atm_oam_continuity),  DTYPE_UCHAR },
+  {"OAM_CC_CHECK_INT",	offsetof(wan_atm_conf_if_t,atm_oam_continuity_intr),  DTYPE_UCHAR },
+  {"ATMARP",		offsetof(wan_atm_conf_if_t,atm_arp),  DTYPE_UCHAR },
+  {"ATMARP_INT",	offsetof(wan_atm_conf_if_t,atm_arp_intr),  DTYPE_UCHAR },
+  {"MTU",		offsetof(wan_atm_conf_if_t,mtu),  DTYPE_USHORT },
   { NULL, 0, 0 }
 };
 
 key_word_t xilinx_if_conftab[] =
 {
-  { "SIGNALLING",     smemof(wan_xilinx_conf_if_t, signalling),  DTYPE_UINT },
-  { "STATION",        smemof(wan_xilinx_conf_if_t, station),     DTYPE_UCHAR },
-  { "SEVEN_BIT_HDLC", smemof(wan_xilinx_conf_if_t, seven_bit_hdlc), DTYPE_CHAR },
-  { "MRU",     	smemof(wan_xilinx_conf_if_t, mru),  DTYPE_UINT },
-  { "MTU",     	smemof(wan_xilinx_conf_if_t, mtu),  DTYPE_UINT },
-  { "IDLE_FLAG",     smemof(wan_xilinx_conf_if_t, idle_flag),  DTYPE_UCHAR},
-  { "DATA_MUX",    smemof(wan_xilinx_conf_if_t, data_mux),  DTYPE_UCHAR},
+  { "SIGNALLING",     offsetof(wan_xilinx_conf_if_t, signalling),  DTYPE_UINT },
+  { "STATION",        offsetof(wan_xilinx_conf_if_t, station),     DTYPE_UCHAR },
+  { "SEVEN_BIT_HDLC", offsetof(wan_xilinx_conf_if_t, seven_bit_hdlc), DTYPE_CHAR },
+  { "MRU",     	offsetof(wan_xilinx_conf_if_t, mru),  DTYPE_UINT },
+  { "MTU",     	offsetof(wan_xilinx_conf_if_t, mtu),  DTYPE_UINT },
+  { "IDLE_FLAG",     offsetof(wan_xilinx_conf_if_t, idle_flag),  DTYPE_UCHAR},
+  { "DATA_MUX",    offsetof(wan_xilinx_conf_if_t, data_mux),  DTYPE_UCHAR},
   { NULL, 0, 0 }
 };
 
 key_word_t bitstrm_if_conftab[] =
 {
-  {"MAX_TX_QUEUE", smemof(wan_bitstrm_conf_if_t,max_tx_queue_size), DTYPE_UINT },
-  {"MAX_TX_UP_SIZE", smemof(wan_bitstrm_conf_if_t,max_tx_up_size), DTYPE_UINT },
-  {"SEVEN_BIT_HDLC", smemof(wan_bitstrm_conf_if_t,seven_bit_hdlc), DTYPE_CHAR },
+  {"MAX_TX_QUEUE", offsetof(wan_bitstrm_conf_if_t,max_tx_queue_size), DTYPE_UINT },
+  {"MAX_TX_UP_SIZE", offsetof(wan_bitstrm_conf_if_t,max_tx_up_size), DTYPE_UINT },
+  {"SEVEN_BIT_HDLC", offsetof(wan_bitstrm_conf_if_t,seven_bit_hdlc), DTYPE_CHAR },
   { NULL, 0, 0 }
 };
 
 key_word_t adsl_conftab[] =
 {
-  {"ENCAPMODE", 	smemof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
+  {"ENCAPMODE", 	offsetof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
   /*Backward compatibility*/
-  {"RFC1483MODE", 	smemof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
-  {"RFC2364MODE", 	smemof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
+  {"RFC1483MODE", 	offsetof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
+  {"RFC2364MODE", 	offsetof(wan_adsl_conf_t,EncapMode), DTYPE_UCHAR },
 
-  {"VCI", 		smemof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
+  {"VCI", 		offsetof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
   /*Backward compatibility*/
-  {"RFC1483VCI",	smemof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
-  {"RFC2364VCI",	smemof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
+  {"RFC1483VCI",	offsetof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
+  {"RFC2364VCI",	offsetof(wan_adsl_conf_t,Vci), DTYPE_USHORT },
 
-  {"VPI", 		smemof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
+  {"VPI", 		offsetof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
   /*Backward compatibility*/
-  {"RFC1483VPI", 	smemof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
-  {"RFC2364VPI", 	smemof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
+  {"RFC1483VPI", 	offsetof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
+  {"RFC2364VPI", 	offsetof(wan_adsl_conf_t,Vpi), DTYPE_USHORT },
 
-  {"VERBOSE", 		smemof(wan_adsl_conf_t,Verbose), DTYPE_UCHAR },
+  {"VERBOSE", 		offsetof(wan_adsl_conf_t,Verbose), DTYPE_UCHAR },
   /*Backward compatibility*/
-  {"DSL_INTERFACE", 	smemof(wan_adsl_conf_t,Verbose), DTYPE_UCHAR },
+  {"DSL_INTERFACE", 	offsetof(wan_adsl_conf_t,Verbose), DTYPE_UCHAR },
 
-  {"RXBUFFERCOUNT", 	smemof(wan_adsl_conf_t,RxBufferCount), DTYPE_USHORT },
-  {"TXBUFFERCOUNT", 	smemof(wan_adsl_conf_t,TxBufferCount), DTYPE_USHORT },
+  {"RXBUFFERCOUNT", 	offsetof(wan_adsl_conf_t,RxBufferCount), DTYPE_USHORT },
+  {"TXBUFFERCOUNT", 	offsetof(wan_adsl_conf_t,TxBufferCount), DTYPE_USHORT },
 
-  {"ADSLSTANDARD",      smemof(wan_adsl_conf_t,Standard), DTYPE_USHORT },
-  {"ADSLTRELLIS",       smemof(wan_adsl_conf_t,Trellis), DTYPE_USHORT },
-  {"ADSLTXPOWERATTEN",  smemof(wan_adsl_conf_t,TxPowerAtten), DTYPE_USHORT },
-  {"ADSLCODINGGAIN",    smemof(wan_adsl_conf_t,CodingGain), DTYPE_USHORT },
-  {"ADSLMAXBITSPERBIN", smemof(wan_adsl_conf_t,MaxBitsPerBin), DTYPE_USHORT },
-  {"ADSLTXSTARTBIN",    smemof(wan_adsl_conf_t,TxStartBin), DTYPE_USHORT },
-  {"ADSLTXENDBIN",      smemof(wan_adsl_conf_t,TxEndBin), DTYPE_USHORT },
-  {"ADSLRXSTARTBIN",    smemof(wan_adsl_conf_t,RxStartBin), DTYPE_USHORT },
-  {"ADSLRXENDBIN",      smemof(wan_adsl_conf_t,RxEndBin), DTYPE_USHORT },
-  {"ADSLRXBINADJUST",   smemof(wan_adsl_conf_t,RxBinAdjust), DTYPE_USHORT },
-  {"ADSLFRAMINGSTRUCT", smemof(wan_adsl_conf_t,FramingStruct), DTYPE_USHORT },
-  {"ADSLEXPANDEDEXCHANGE",      smemof(wan_adsl_conf_t,ExpandedExchange), DTYPE_USHORT },
-  {"ADSLCLOCKTYPE",     smemof(wan_adsl_conf_t,ClockType), DTYPE_USHORT },
-  {"ADSLMAXDOWNRATE",   smemof(wan_adsl_conf_t,MaxDownRate), DTYPE_USHORT },
+  {"ADSLSTANDARD",      offsetof(wan_adsl_conf_t,Standard), DTYPE_USHORT },
+  {"ADSLTRELLIS",       offsetof(wan_adsl_conf_t,Trellis), DTYPE_USHORT },
+  {"ADSLTXPOWERATTEN",  offsetof(wan_adsl_conf_t,TxPowerAtten), DTYPE_USHORT },
+  {"ADSLCODINGGAIN",    offsetof(wan_adsl_conf_t,CodingGain), DTYPE_USHORT },
+  {"ADSLMAXBITSPERBIN", offsetof(wan_adsl_conf_t,MaxBitsPerBin), DTYPE_USHORT },
+  {"ADSLTXSTARTBIN",    offsetof(wan_adsl_conf_t,TxStartBin), DTYPE_USHORT },
+  {"ADSLTXENDBIN",      offsetof(wan_adsl_conf_t,TxEndBin), DTYPE_USHORT },
+  {"ADSLRXSTARTBIN",    offsetof(wan_adsl_conf_t,RxStartBin), DTYPE_USHORT },
+  {"ADSLRXENDBIN",      offsetof(wan_adsl_conf_t,RxEndBin), DTYPE_USHORT },
+  {"ADSLRXBINADJUST",   offsetof(wan_adsl_conf_t,RxBinAdjust), DTYPE_USHORT },
+  {"ADSLFRAMINGSTRUCT", offsetof(wan_adsl_conf_t,FramingStruct), DTYPE_USHORT },
+  {"ADSLEXPANDEDEXCHANGE",      offsetof(wan_adsl_conf_t,ExpandedExchange), DTYPE_USHORT },
+  {"ADSLCLOCKTYPE",     offsetof(wan_adsl_conf_t,ClockType), DTYPE_USHORT },
+  {"ADSLMAXDOWNRATE",   offsetof(wan_adsl_conf_t,MaxDownRate), DTYPE_USHORT },
 
   /*Backward compatibility*/
-  {"GTISTANDARD",      smemof(wan_adsl_conf_t,Standard), DTYPE_USHORT },
-  {"GTITRELLIS",       smemof(wan_adsl_conf_t,Trellis), DTYPE_USHORT },
-  {"GTITXPOWERATTEN",  smemof(wan_adsl_conf_t,TxPowerAtten), DTYPE_USHORT },
-  {"GTICODINGGAIN",    smemof(wan_adsl_conf_t,CodingGain), DTYPE_USHORT },
-  {"GTIMAXBITSPERBIN", smemof(wan_adsl_conf_t,MaxBitsPerBin), DTYPE_USHORT },
-  {"GTITXSTARTBIN",    smemof(wan_adsl_conf_t,TxStartBin), DTYPE_USHORT },
-  {"GTITXENDBIN",      smemof(wan_adsl_conf_t,TxEndBin), DTYPE_USHORT },
-  {"GTIRXSTARTBIN",    smemof(wan_adsl_conf_t,RxStartBin), DTYPE_USHORT },
-  {"GTIRXENDBIN",      smemof(wan_adsl_conf_t,RxEndBin), DTYPE_USHORT },
-  {"GTIRXBINADJUST",   smemof(wan_adsl_conf_t,RxBinAdjust), DTYPE_USHORT },
-  {"GTIFRAMINGSTRUCT", smemof(wan_adsl_conf_t,FramingStruct), DTYPE_USHORT },
-  {"GTIEXPANDEDEXCHANGE",      smemof(wan_adsl_conf_t,ExpandedExchange), DTYPE_USHORT },
-  {"GTICLOCKTYPE",     smemof(wan_adsl_conf_t,ClockType), DTYPE_USHORT },
-  {"GTIMAXDOWNRATE",   smemof(wan_adsl_conf_t,MaxDownRate), DTYPE_USHORT },
+  {"GTISTANDARD",      offsetof(wan_adsl_conf_t,Standard), DTYPE_USHORT },
+  {"GTITRELLIS",       offsetof(wan_adsl_conf_t,Trellis), DTYPE_USHORT },
+  {"GTITXPOWERATTEN",  offsetof(wan_adsl_conf_t,TxPowerAtten), DTYPE_USHORT },
+  {"GTICODINGGAIN",    offsetof(wan_adsl_conf_t,CodingGain), DTYPE_USHORT },
+  {"GTIMAXBITSPERBIN", offsetof(wan_adsl_conf_t,MaxBitsPerBin), DTYPE_USHORT },
+  {"GTITXSTARTBIN",    offsetof(wan_adsl_conf_t,TxStartBin), DTYPE_USHORT },
+  {"GTITXENDBIN",      offsetof(wan_adsl_conf_t,TxEndBin), DTYPE_USHORT },
+  {"GTIRXSTARTBIN",    offsetof(wan_adsl_conf_t,RxStartBin), DTYPE_USHORT },
+  {"GTIRXENDBIN",      offsetof(wan_adsl_conf_t,RxEndBin), DTYPE_USHORT },
+  {"GTIRXBINADJUST",   offsetof(wan_adsl_conf_t,RxBinAdjust), DTYPE_USHORT },
+  {"GTIFRAMINGSTRUCT", offsetof(wan_adsl_conf_t,FramingStruct), DTYPE_USHORT },
+  {"GTIEXPANDEDEXCHANGE",      offsetof(wan_adsl_conf_t,ExpandedExchange), DTYPE_USHORT },
+  {"GTICLOCKTYPE",     offsetof(wan_adsl_conf_t,ClockType), DTYPE_USHORT },
+  {"GTIMAXDOWNRATE",   offsetof(wan_adsl_conf_t,MaxDownRate), DTYPE_USHORT },
 
-  {"ATM_AUTOCFG", 	smemof(wan_adsl_conf_t,atm_autocfg), DTYPE_UCHAR },
-  {"ADSL_WATCHDOG",	smemof(wan_adsl_conf_t,atm_watchdog), DTYPE_UCHAR },
+  {"ATM_AUTOCFG", 	offsetof(wan_adsl_conf_t,atm_autocfg), DTYPE_UCHAR },
+  {"ADSL_WATCHDOG",	offsetof(wan_adsl_conf_t,atm_watchdog), DTYPE_UCHAR },
   { NULL, 0, 0 }
 };
 
 key_word_t bscstrm_conftab[]=
 {
-  {"BSCSTRM_ADAPTER_FR" , smemof(wan_bscstrm_conf_t,adapter_frequency),DTYPE_UINT},
-  {"BSCSTRM_MTU", 	smemof(wan_bscstrm_conf_t,max_data_length),DTYPE_USHORT},
-  {"BSCSTRM_EBCDIC" ,  smemof(wan_bscstrm_conf_t,EBCDIC_encoding),DTYPE_USHORT},
-  {"BSCSTRM_RB_BLOCK_TYPE", smemof(wan_bscstrm_conf_t,Rx_block_type),DTYPE_USHORT},
-  {"BSCSTRM_NO_CONSEC_PAD_EOB", smemof(wan_bscstrm_conf_t,no_consec_PADs_EOB), DTYPE_USHORT},
-  {"BSCSTRM_NO_ADD_LEAD_TX_SYN_CHARS", smemof(wan_bscstrm_conf_t,no_add_lead_Tx_SYN_chars),DTYPE_USHORT},
-  {"BSCSTRM_NO_BITS_PER_CHAR", smemof(wan_bscstrm_conf_t,no_bits_per_char),DTYPE_USHORT},
-  {"BSCSTRM_PARITY", smemof(wan_bscstrm_conf_t,parity),DTYPE_USHORT},
-  {"BSCSTRM_MISC_CONFIG_OPTIONS",  smemof(wan_bscstrm_conf_t,misc_config_options),DTYPE_USHORT},
-  {"BSCSTRM_STATISTICS_OPTIONS", smemof(wan_bscstrm_conf_t,statistics_options),  DTYPE_USHORT},
-  {"BSCSTRM_MODEM_CONFIG_OPTIONS", smemof(wan_bscstrm_conf_t,modem_config_options), DTYPE_USHORT},
+  {"BSCSTRM_ADAPTER_FR" , offsetof(wan_bscstrm_conf_t,adapter_frequency),DTYPE_ULONG},
+  {"BSCSTRM_MTU", 	offsetof(wan_bscstrm_conf_t,max_data_length),DTYPE_USHORT},
+  {"BSCSTRM_EBCDIC" ,  offsetof(wan_bscstrm_conf_t,EBCDIC_encoding),DTYPE_USHORT},
+  {"BSCSTRM_RB_BLOCK_TYPE", offsetof(wan_bscstrm_conf_t,Rx_block_type),DTYPE_USHORT},
+  {"BSCSTRM_NO_CONSEC_PAD_EOB", offsetof(wan_bscstrm_conf_t,no_consec_PADs_EOB), DTYPE_USHORT},
+  {"BSCSTRM_NO_ADD_LEAD_TX_SYN_CHARS", offsetof(wan_bscstrm_conf_t,no_add_lead_Tx_SYN_chars),DTYPE_USHORT},
+  {"BSCSTRM_NO_BITS_PER_CHAR", offsetof(wan_bscstrm_conf_t,no_bits_per_char),DTYPE_USHORT},
+  {"BSCSTRM_PARITY", offsetof(wan_bscstrm_conf_t,parity),DTYPE_USHORT},
+  {"BSCSTRM_MISC_CONFIG_OPTIONS",  offsetof(wan_bscstrm_conf_t,misc_config_options),DTYPE_USHORT},
+  {"BSCSTRM_STATISTICS_OPTIONS", offsetof(wan_bscstrm_conf_t,statistics_options),  DTYPE_USHORT},
+  {"BSCSTRM_MODEM_CONFIG_OPTIONS", offsetof(wan_bscstrm_conf_t,modem_config_options), DTYPE_USHORT},
   { NULL, 0, 0 }
 };
 
 
 key_word_t ss7_conftab[] =
 {
-  {"LINE_CONFIG_OPTIONS", smemof(wan_ss7_conf_t,line_cfg_opt),  DTYPE_UINT },
-  {"MODEM_CONFIG_OPTIONS",smemof(wan_ss7_conf_t,modem_cfg_opt), DTYPE_UINT },
-  {"MODEM_STATUS_TIMER",  smemof(wan_ss7_conf_t,modem_status_timer), DTYPE_UINT },
-  {"API_OPTIONS",	  smemof(wan_ss7_conf_t,api_options),	  DTYPE_UINT },
-  {"PROTOCOL_OPTIONS",	  smemof(wan_ss7_conf_t,protocol_options), DTYPE_UINT },
-  {"PROTOCOL_SPECIFICATION", smemof(wan_ss7_conf_t,protocol_specification), DTYPE_UINT },
-  {"STATS_HISTORY_OPTIONS", smemof(wan_ss7_conf_t,stats_history_options), DTYPE_UINT },
-  {"MAX_LENGTH_MSU_SIF", smemof(wan_ss7_conf_t,max_length_msu_sif), DTYPE_UINT },
-  {"MAX_UNACKED_TX_MSUS", smemof(wan_ss7_conf_t,max_unacked_tx_msus), DTYPE_UINT },
-  {"LINK_INACTIVITY_TIMER", smemof(wan_ss7_conf_t,link_inactivity_timer), DTYPE_UINT },
-  {"T1_TIMER",		  smemof(wan_ss7_conf_t,t1_timer),	  DTYPE_UINT },
-  {"T2_TIMER",		  smemof(wan_ss7_conf_t,t2_timer),	  DTYPE_UINT },
-  {"T3_TIMER",		  smemof(wan_ss7_conf_t,t3_timer),	  DTYPE_UINT },
-  {"T4_TIMER_EMERGENCY",  smemof(wan_ss7_conf_t,t4_timer_emergency), DTYPE_UINT },
-  {"T4_TIMER_NORMAL",  smemof(wan_ss7_conf_t,t4_timer_normal), DTYPE_UINT },
-  {"T5_TIMER",		  smemof(wan_ss7_conf_t,t5_timer),	  DTYPE_UINT },
-  {"T6_TIMER",		  smemof(wan_ss7_conf_t,t6_timer),	  DTYPE_UINT },
-  {"T7_TIMER",		  smemof(wan_ss7_conf_t,t7_timer),	  DTYPE_UINT },
-  {"T8_TIMER",		  smemof(wan_ss7_conf_t,t8_timer),	  DTYPE_UINT },
-  {"N1",		  smemof(wan_ss7_conf_t,n1),	  DTYPE_UINT },
-  {"N2",		  smemof(wan_ss7_conf_t,n2),	  DTYPE_UINT },
-  {"TIN",		  smemof(wan_ss7_conf_t,tin),	  DTYPE_UINT },
-  {"TIE",		  smemof(wan_ss7_conf_t,tie),	  DTYPE_UINT },
-  {"SUERM_ERROR_THRESHOLD", smemof(wan_ss7_conf_t,suerm_error_threshold), DTYPE_UINT},
-  {"SUERM_NUMBER_OCTETS", smemof(wan_ss7_conf_t,suerm_number_octets), DTYPE_UINT},
-  {"SUERM_NUMBER_SUS", smemof(wan_ss7_conf_t,suerm_number_sus), DTYPE_UINT},
-  {"SIE_INTERVAL_TIMER", smemof(wan_ss7_conf_t,sie_interval_timer), DTYPE_UINT},
-  {"SIO_INTERVAL_TIMER", smemof(wan_ss7_conf_t,sio_interval_timer), DTYPE_UINT},
-  {"SIOS_INTERVAL_TIMER", smemof(wan_ss7_conf_t,sios_interval_timer), DTYPE_UINT},
-  {"FISU_INTERVAL_TIMER", smemof(wan_ss7_conf_t,fisu_interval_timer), DTYPE_UINT},
+  {"LINE_CONFIG_OPTIONS", offsetof(wan_ss7_conf_t,line_cfg_opt),  DTYPE_UINT },
+  {"MODEM_CONFIG_OPTIONS",offsetof(wan_ss7_conf_t,modem_cfg_opt), DTYPE_UINT },
+  {"MODEM_STATUS_TIMER",  offsetof(wan_ss7_conf_t,modem_status_timer), DTYPE_UINT },
+  {"API_OPTIONS",	  offsetof(wan_ss7_conf_t,api_options),	  DTYPE_UINT },
+  {"PROTOCOL_OPTIONS",	  offsetof(wan_ss7_conf_t,protocol_options), DTYPE_UINT },
+  {"PROTOCOL_SPECIFICATION", offsetof(wan_ss7_conf_t,protocol_specification), DTYPE_UINT },
+  {"STATS_HISTORY_OPTIONS", offsetof(wan_ss7_conf_t,stats_history_options), DTYPE_UINT },
+  {"MAX_LENGTH_MSU_SIF", offsetof(wan_ss7_conf_t,max_length_msu_sif), DTYPE_UINT },
+  {"MAX_UNACKED_TX_MSUS", offsetof(wan_ss7_conf_t,max_unacked_tx_msus), DTYPE_UINT },
+  {"LINK_INACTIVITY_TIMER", offsetof(wan_ss7_conf_t,link_inactivity_timer), DTYPE_UINT },
+  {"T1_TIMER",		  offsetof(wan_ss7_conf_t,t1_timer),	  DTYPE_UINT },
+  {"T2_TIMER",		  offsetof(wan_ss7_conf_t,t2_timer),	  DTYPE_UINT },
+  {"T3_TIMER",		  offsetof(wan_ss7_conf_t,t3_timer),	  DTYPE_UINT },
+  {"T4_TIMER_EMERGENCY",  offsetof(wan_ss7_conf_t,t4_timer_emergency), DTYPE_UINT },
+  {"T4_TIMER_NORMAL",  offsetof(wan_ss7_conf_t,t4_timer_normal), DTYPE_UINT },
+  {"T5_TIMER",		  offsetof(wan_ss7_conf_t,t5_timer),	  DTYPE_UINT },
+  {"T6_TIMER",		  offsetof(wan_ss7_conf_t,t6_timer),	  DTYPE_UINT },
+  {"T7_TIMER",		  offsetof(wan_ss7_conf_t,t7_timer),	  DTYPE_UINT },
+  {"T8_TIMER",		  offsetof(wan_ss7_conf_t,t8_timer),	  DTYPE_UINT },
+  {"N1",		  offsetof(wan_ss7_conf_t,n1),	  DTYPE_UINT },
+  {"N2",		  offsetof(wan_ss7_conf_t,n2),	  DTYPE_UINT },
+  {"TIN",		  offsetof(wan_ss7_conf_t,tin),	  DTYPE_UINT },
+  {"TIE",		  offsetof(wan_ss7_conf_t,tie),	  DTYPE_UINT },
+  {"SUERM_ERROR_THRESHOLD", offsetof(wan_ss7_conf_t,suerm_error_threshold), DTYPE_UINT},
+  {"SUERM_NUMBER_OCTETS", offsetof(wan_ss7_conf_t,suerm_number_octets), DTYPE_UINT},
+  {"SUERM_NUMBER_SUS", offsetof(wan_ss7_conf_t,suerm_number_sus), DTYPE_UINT},
+  {"SIE_INTERVAL_TIMER", offsetof(wan_ss7_conf_t,sie_interval_timer), DTYPE_UINT},
+  {"SIO_INTERVAL_TIMER", offsetof(wan_ss7_conf_t,sio_interval_timer), DTYPE_UINT},
+  {"SIOS_INTERVAL_TIMER", offsetof(wan_ss7_conf_t,sios_interval_timer), DTYPE_UINT},
+  {"FISU_INTERVAL_TIMER", offsetof(wan_ss7_conf_t,fisu_interval_timer), DTYPE_UINT},
   { NULL, 0, 0 }
 };
 
 key_word_t x25_conftab[] =	/* X.25-specific configuration */
 {
-  { "LOWESTPVC",    smemof(wan_x25_conf_t, lo_pvc),       DTYPE_UINT },
-  { "HIGHESTPVC",   smemof(wan_x25_conf_t, hi_pvc),       DTYPE_UINT },
-  { "LOWESTSVC",    smemof(wan_x25_conf_t, lo_svc),       DTYPE_UINT },
-  { "HIGHESTSVC",   smemof(wan_x25_conf_t, hi_svc),       DTYPE_UINT },
-  { "HDLCWINDOW",   smemof(wan_x25_conf_t, hdlc_window),  DTYPE_UINT },
-  { "PACKETWINDOW", smemof(wan_x25_conf_t, pkt_window),   DTYPE_UINT },
-  { "CCITTCOMPAT",  smemof(wan_x25_conf_t, ccitt_compat), DTYPE_UINT },
-  { "X25CONFIG",    smemof(wan_x25_conf_t, x25_conf_opt), DTYPE_UINT }, 	
-  { "LAPB_HDLC_ONLY", smemof(wan_x25_conf_t, LAPB_hdlc_only), DTYPE_UCHAR },
-  { "CALL_SETUP_LOG", smemof(wan_x25_conf_t, logging), DTYPE_UCHAR },
-  { "OOB_ON_MODEM",   smemof(wan_x25_conf_t, oob_on_modem), DTYPE_UCHAR},
-  { "T1", 	    smemof(wan_x25_conf_t, t1), DTYPE_UINT },
-  { "T2", 	    smemof(wan_x25_conf_t, t2), DTYPE_UINT },	
-  { "T4", 	    smemof(wan_x25_conf_t, t4), DTYPE_UINT },
-  { "N2", 	    smemof(wan_x25_conf_t, n2), DTYPE_UINT },
-  { "T10_T20", 	    smemof(wan_x25_conf_t, t10_t20), DTYPE_UINT },
-  { "T11_T21", 	    smemof(wan_x25_conf_t, t11_t21), DTYPE_UINT },	
-  { "T12_T22", 	    smemof(wan_x25_conf_t, t12_t22), DTYPE_UINT },
-  { "T13_T23", 	    smemof(wan_x25_conf_t, t13_t23), DTYPE_UINT },
-  { "T16_T26", 	    smemof(wan_x25_conf_t, t16_t26), DTYPE_UINT },
-  { "T28", 	    smemof(wan_x25_conf_t, t28), DTYPE_UINT },
-  { "R10_R20", 	    smemof(wan_x25_conf_t, r10_r20), DTYPE_UINT },
-  { "R12_R22", 	    smemof(wan_x25_conf_t, r12_r22), DTYPE_UINT },
-  { "R13_R23", 	    smemof(wan_x25_conf_t, r13_r23), DTYPE_UINT },
-  { "STATION_ADDR", smemof(wan_x25_conf_t, local_station_address), DTYPE_UCHAR},
-  { "DEF_PKT_SIZE", smemof(wan_x25_conf_t, defPktSize),  DTYPE_UINT },
-  { "MAX_PKT_SIZE", smemof(wan_x25_conf_t, pktMTU),  DTYPE_UINT },
+  { "LOWESTPVC",    offsetof(wan_x25_conf_t, lo_pvc),       DTYPE_UINT },
+  { "HIGHESTPVC",   offsetof(wan_x25_conf_t, hi_pvc),       DTYPE_UINT },
+  { "LOWESTSVC",    offsetof(wan_x25_conf_t, lo_svc),       DTYPE_UINT },
+  { "HIGHESTSVC",   offsetof(wan_x25_conf_t, hi_svc),       DTYPE_UINT },
+  { "HDLCWINDOW",   offsetof(wan_x25_conf_t, hdlc_window),  DTYPE_UINT },
+  { "PACKETWINDOW", offsetof(wan_x25_conf_t, pkt_window),   DTYPE_UINT },
+  { "CCITTCOMPAT",  offsetof(wan_x25_conf_t, ccitt_compat), DTYPE_UINT },
+  { "X25CONFIG",    offsetof(wan_x25_conf_t, x25_conf_opt), DTYPE_UINT }, 	
+  { "LAPB_HDLC_ONLY", offsetof(wan_x25_conf_t, LAPB_hdlc_only), DTYPE_UCHAR },
+  { "CALL_SETUP_LOG", offsetof(wan_x25_conf_t, logging), DTYPE_UCHAR },
+  { "OOB_ON_MODEM",   offsetof(wan_x25_conf_t, oob_on_modem), DTYPE_UCHAR},
+  { "T1", 	    offsetof(wan_x25_conf_t, t1), DTYPE_UINT },
+  { "T2", 	    offsetof(wan_x25_conf_t, t2), DTYPE_UINT },	
+  { "T4", 	    offsetof(wan_x25_conf_t, t4), DTYPE_UINT },
+  { "N2", 	    offsetof(wan_x25_conf_t, n2), DTYPE_UINT },
+  { "T10_T20", 	    offsetof(wan_x25_conf_t, t10_t20), DTYPE_UINT },
+  { "T11_T21", 	    offsetof(wan_x25_conf_t, t11_t21), DTYPE_UINT },	
+  { "T12_T22", 	    offsetof(wan_x25_conf_t, t12_t22), DTYPE_UINT },
+  { "T13_T23", 	    offsetof(wan_x25_conf_t, t13_t23), DTYPE_UINT },
+  { "T16_T26", 	    offsetof(wan_x25_conf_t, t16_t26), DTYPE_UINT },
+  { "T28", 	    offsetof(wan_x25_conf_t, t28), DTYPE_UINT },
+  { "R10_R20", 	    offsetof(wan_x25_conf_t, r10_r20), DTYPE_UINT },
+  { "R12_R22", 	    offsetof(wan_x25_conf_t, r12_r22), DTYPE_UINT },
+  { "R13_R23", 	    offsetof(wan_x25_conf_t, r13_r23), DTYPE_UINT },
+  { "STATION_ADDR", offsetof(wan_x25_conf_t, local_station_address), DTYPE_UCHAR},
+  { "DEF_PKT_SIZE", offsetof(wan_x25_conf_t, defPktSize),  DTYPE_UINT },
+  { "MAX_PKT_SIZE", offsetof(wan_x25_conf_t, pktMTU),  DTYPE_UINT },
   { NULL, 0, 0 }
 };
 
 key_word_t lapb_annexg_conftab[] =
 {
   //LAPB STUFF
-  { "T1", smemof(wan_lapb_if_conf_t, t1),    DTYPE_UINT },
-  { "T2", smemof(wan_lapb_if_conf_t, t2),    DTYPE_UINT },
-  { "T3", smemof(wan_lapb_if_conf_t, t3),    DTYPE_UINT },
-  { "T4", smemof(wan_lapb_if_conf_t, t4),    DTYPE_UINT },
-  { "N2", smemof(wan_lapb_if_conf_t, n2),    DTYPE_UINT },
-  { "LAPB_MODE", 	smemof(wan_lapb_if_conf_t, mode),    DTYPE_UINT },
-  { "LAPB_WINDOW", 	smemof(wan_lapb_if_conf_t, window),    DTYPE_UINT },
+  { "T1", offsetof(wan_lapb_if_conf_t, t1),    DTYPE_UINT },
+  { "T2", offsetof(wan_lapb_if_conf_t, t2),    DTYPE_UINT },
+  { "T3", offsetof(wan_lapb_if_conf_t, t3),    DTYPE_UINT },
+  { "T4", offsetof(wan_lapb_if_conf_t, t4),    DTYPE_UINT },
+  { "N2", offsetof(wan_lapb_if_conf_t, n2),    DTYPE_UINT },
+  { "LAPB_MODE", 	offsetof(wan_lapb_if_conf_t, mode),    DTYPE_UINT },
+  { "LAPB_WINDOW", 	offsetof(wan_lapb_if_conf_t, window),    DTYPE_UINT },
 
-  { "LABEL",		smemof(wan_lapb_if_conf_t,label), DTYPE_STR},
-  { "VIRTUAL_ADDR",     smemof(wan_lapb_if_conf_t,virtual_addr), DTYPE_STR},
-  { "REAL_ADDR",        smemof(wan_lapb_if_conf_t,real_addr), DTYPE_STR},
+  { "LABEL",		offsetof(wan_lapb_if_conf_t,label), DTYPE_STR},
+  { "VIRTUAL_ADDR",     offsetof(wan_lapb_if_conf_t,virtual_addr), DTYPE_STR},
+  { "REAL_ADDR",        offsetof(wan_lapb_if_conf_t,real_addr), DTYPE_STR},
 
-  { "MAX_PKT_SIZE", 	smemof(wan_lapb_if_conf_t,mtu), DTYPE_UINT},
+  { "MAX_PKT_SIZE", 	offsetof(wan_lapb_if_conf_t,mtu), DTYPE_UINT},
 
-  { "STATION" ,          smemof(wan_lapb_if_conf_t, station),     DTYPE_UCHAR },
+  { "STATION" ,          offsetof(wan_lapb_if_conf_t, station),     DTYPE_UCHAR },
   
   { NULL, 0, 0 }
 };
@@ -475,50 +463,50 @@
 key_word_t x25_annexg_conftab[] =
 {
  //X25 STUFF
-  { "PACKETWINDOW", smemof(wan_x25_if_conf_t, packet_window),   DTYPE_USHORT },
-  { "CCITTCOMPAT",  smemof(wan_x25_if_conf_t, CCITT_compatibility), DTYPE_USHORT },
-  { "T10_T20", 	    smemof(wan_x25_if_conf_t, T10_T20), DTYPE_USHORT },
-  { "T11_T21", 	    smemof(wan_x25_if_conf_t, T11_T21), DTYPE_USHORT },	
-  { "T12_T22", 	    smemof(wan_x25_if_conf_t, T12_T22), DTYPE_USHORT },
-  { "T13_T23", 	    smemof(wan_x25_if_conf_t, T13_T23), DTYPE_USHORT },
-  { "T16_T26", 	    smemof(wan_x25_if_conf_t, T16_T26), DTYPE_USHORT },
-  { "T28", 	    smemof(wan_x25_if_conf_t, T28),     DTYPE_USHORT },
-  { "R10_R20", 	    smemof(wan_x25_if_conf_t, R10_R20), DTYPE_USHORT },
-  { "R12_R22", 	    smemof(wan_x25_if_conf_t, R12_R22), DTYPE_USHORT },
-  { "R13_R23", 	    smemof(wan_x25_if_conf_t, R13_R23), DTYPE_USHORT },
+  { "PACKETWINDOW", offsetof(wan_x25_if_conf_t, packet_window),   DTYPE_USHORT },
+  { "CCITTCOMPAT",  offsetof(wan_x25_if_conf_t, CCITT_compatibility), DTYPE_USHORT },
+  { "T10_T20", 	    offsetof(wan_x25_if_conf_t, T10_T20), DTYPE_USHORT },
+  { "T11_T21", 	    offsetof(wan_x25_if_conf_t, T11_T21), DTYPE_USHORT },	
+  { "T12_T22", 	    offsetof(wan_x25_if_conf_t, T12_T22), DTYPE_USHORT },
+  { "T13_T23", 	    offsetof(wan_x25_if_conf_t, T13_T23), DTYPE_USHORT },
+  { "T16_T26", 	    offsetof(wan_x25_if_conf_t, T16_T26), DTYPE_USHORT },
+  { "T28", 	    offsetof(wan_x25_if_conf_t, T28),     DTYPE_USHORT },
+  { "R10_R20", 	    offsetof(wan_x25_if_conf_t, R10_R20), DTYPE_USHORT },
+  { "R12_R22", 	    offsetof(wan_x25_if_conf_t, R12_R22), DTYPE_USHORT },
+  { "R13_R23", 	    offsetof(wan_x25_if_conf_t, R13_R23), DTYPE_USHORT },
 
-  { "X25_API_OPTIONS", smemof(wan_x25_if_conf_t, X25_API_options), DTYPE_USHORT },
-  { "X25_PROTOCOL_OPTIONS", smemof(wan_x25_if_conf_t, X25_protocol_options), DTYPE_USHORT },
-  { "X25_RESPONSE_OPTIONS", smemof(wan_x25_if_conf_t, X25_response_options), DTYPE_USHORT },
-  { "X25_STATISTICS_OPTIONS", smemof(wan_x25_if_conf_t, X25_statistics_options), DTYPE_USHORT },
+  { "X25_API_OPTIONS", offsetof(wan_x25_if_conf_t, X25_API_options), DTYPE_USHORT },
+  { "X25_PROTOCOL_OPTIONS", offsetof(wan_x25_if_conf_t, X25_protocol_options), DTYPE_USHORT },
+  { "X25_RESPONSE_OPTIONS", offsetof(wan_x25_if_conf_t, X25_response_options), DTYPE_USHORT },
+  { "X25_STATISTICS_OPTIONS", offsetof(wan_x25_if_conf_t, X25_statistics_options), DTYPE_USHORT },
 
-  { "GEN_FACILITY_1", smemof(wan_x25_if_conf_t, genl_facilities_supported_1), DTYPE_USHORT },
-  { "GEN_FACILITY_2", smemof(wan_x25_if_conf_t, genl_facilities_supported_2), DTYPE_USHORT },
-  { "CCITT_FACILITY", smemof(wan_x25_if_conf_t, CCITT_facilities_supported), DTYPE_USHORT },
-  { "NON_X25_FACILITY",	smemof(wan_x25_if_conf_t,non_X25_facilities_supported),DTYPE_USHORT },
+  { "GEN_FACILITY_1", offsetof(wan_x25_if_conf_t, genl_facilities_supported_1), DTYPE_USHORT },
+  { "GEN_FACILITY_2", offsetof(wan_x25_if_conf_t, genl_facilities_supported_2), DTYPE_USHORT },
+  { "CCITT_FACILITY", offsetof(wan_x25_if_conf_t, CCITT_facilities_supported), DTYPE_USHORT },
+  { "NON_X25_FACILITY",	offsetof(wan_x25_if_conf_t,non_X25_facilities_supported),DTYPE_USHORT },
 
-  { "DFLT_PKT_SIZE", smemof(wan_x25_if_conf_t,default_packet_size), DTYPE_USHORT },
-  { "MAX_PKT_SIZE",  smemof(wan_x25_if_conf_t,maximum_packet_size), DTYPE_USHORT },
+  { "DFLT_PKT_SIZE", offsetof(wan_x25_if_conf_t,default_packet_size), DTYPE_USHORT },
+  { "MAX_PKT_SIZE",  offsetof(wan_x25_if_conf_t,maximum_packet_size), DTYPE_USHORT },
 
-  { "LOWESTSVC",   smemof(wan_x25_if_conf_t,lowest_two_way_channel), DTYPE_USHORT },
-  { "HIGHESTSVC",  smemof(wan_x25_if_conf_t,highest_two_way_channel), DTYPE_USHORT},
+  { "LOWESTSVC",   offsetof(wan_x25_if_conf_t,lowest_two_way_channel), DTYPE_USHORT },
+  { "HIGHESTSVC",  offsetof(wan_x25_if_conf_t,highest_two_way_channel), DTYPE_USHORT},
 
-  { "LOWESTPVC",   smemof(wan_x25_if_conf_t,lowest_PVC), DTYPE_USHORT },
-  { "HIGHESTPVC",  smemof(wan_x25_if_conf_t,highest_PVC), DTYPE_USHORT},
+  { "LOWESTPVC",   offsetof(wan_x25_if_conf_t,lowest_PVC), DTYPE_USHORT },
+  { "HIGHESTPVC",  offsetof(wan_x25_if_conf_t,highest_PVC), DTYPE_USHORT},
 
-  { "X25_MODE", smemof(wan_x25_if_conf_t, mode), DTYPE_UCHAR},
-  { "CALL_BACKOFF", smemof(wan_x25_if_conf_t, call_backoff_timeout), DTYPE_UINT },
-  { "CALL_LOGGING", smemof(wan_x25_if_conf_t, call_logging), DTYPE_UCHAR },
+  { "X25_MODE", offsetof(wan_x25_if_conf_t, mode), DTYPE_UCHAR},
+  { "CALL_BACKOFF", offsetof(wan_x25_if_conf_t, call_backoff_timeout), DTYPE_UINT },
+  { "CALL_LOGGING", offsetof(wan_x25_if_conf_t, call_logging), DTYPE_UCHAR },
 
-  { "X25_CALL_STRING",      smemof(wan_x25_if_conf_t, call_string),     DTYPE_STR},
-  { "X25_ACCEPT_DST_ADDR",  smemof(wan_x25_if_conf_t, accept_called),   DTYPE_STR},
-  { "X25_ACCEPT_SRC_ADDR",  smemof(wan_x25_if_conf_t, accept_calling),  DTYPE_STR},
-  { "X25_ACCEPT_FCL_DATA",  smemof(wan_x25_if_conf_t, accept_facil),    DTYPE_STR},
-  { "X25_ACCEPT_USR_DATA",  smemof(wan_x25_if_conf_t, accept_udata),    DTYPE_STR},
+  { "X25_CALL_STRING",      offsetof(wan_x25_if_conf_t, call_string),     DTYPE_STR},
+  { "X25_ACCEPT_DST_ADDR",  offsetof(wan_x25_if_conf_t, accept_called),   DTYPE_STR},
+  { "X25_ACCEPT_SRC_ADDR",  offsetof(wan_x25_if_conf_t, accept_calling),  DTYPE_STR},
+  { "X25_ACCEPT_FCL_DATA",  offsetof(wan_x25_if_conf_t, accept_facil),    DTYPE_STR},
+  { "X25_ACCEPT_USR_DATA",  offsetof(wan_x25_if_conf_t, accept_udata),    DTYPE_STR},
 
-  { "LABEL",		smemof(wan_x25_if_conf_t,label),        DTYPE_STR},
-  { "VIRTUAL_ADDR",     smemof(wan_x25_if_conf_t,virtual_addr), DTYPE_STR},
-  { "REAL_ADDR",        smemof(wan_x25_if_conf_t,real_addr),    DTYPE_STR},
+  { "LABEL",		offsetof(wan_x25_if_conf_t,label),        DTYPE_STR},
+  { "VIRTUAL_ADDR",     offsetof(wan_x25_if_conf_t,virtual_addr), DTYPE_STR},
+  { "REAL_ADDR",        offsetof(wan_x25_if_conf_t,real_addr),    DTYPE_STR},
 
   { NULL, 0, 0 }
 };
@@ -526,90 +514,93 @@
 key_word_t dsp_annexg_conftab[] =
 {
   //DSP_20 DSP STUFF
-  { "PAD",		smemof(wan_dsp_if_conf_t, pad_type),		DTYPE_UCHAR },
-  { "T1_DSP",  		smemof(wan_dsp_if_conf_t, T1), 		DTYPE_UINT },
-  { "T2_DSP",  		smemof(wan_dsp_if_conf_t, T2), 		DTYPE_UINT },
-  { "T3_DSP",  		smemof(wan_dsp_if_conf_t, T3), 		DTYPE_UINT },
-  { "DSP_AUTO_CE",  	smemof(wan_dsp_if_conf_t, auto_ce), 		DTYPE_UCHAR },
-  { "DSP_AUTO_CALL_REQ",smemof(wan_dsp_if_conf_t, auto_call_req), 	DTYPE_UCHAR },
-  { "DSP_AUTO_ACK",  	smemof(wan_dsp_if_conf_t, auto_ack), 		DTYPE_UCHAR },
-  { "DSP_MTU",  	smemof(wan_dsp_if_conf_t, dsp_mtu), 		DTYPE_USHORT },
+  { "PAD",		offsetof(wan_dsp_if_conf_t, pad_type),		DTYPE_UCHAR },
+  { "T1_DSP",  		offsetof(wan_dsp_if_conf_t, T1), 		DTYPE_UINT },
+  { "T2_DSP",  		offsetof(wan_dsp_if_conf_t, T2), 		DTYPE_UINT },
+  { "T3_DSP",  		offsetof(wan_dsp_if_conf_t, T3), 		DTYPE_UINT },
+  { "DSP_AUTO_CE",  	offsetof(wan_dsp_if_conf_t, auto_ce), 		DTYPE_UCHAR },
+  { "DSP_AUTO_CALL_REQ",offsetof(wan_dsp_if_conf_t, auto_call_req), 	DTYPE_UCHAR },
+  { "DSP_AUTO_ACK",  	offsetof(wan_dsp_if_conf_t, auto_ack), 		DTYPE_UCHAR },
+  { "DSP_MTU",  	offsetof(wan_dsp_if_conf_t, dsp_mtu), 		DTYPE_USHORT },
   { NULL, 0, 0 }
 };
 
 key_word_t chan_conftab[] =	/* Channel configuration parameters */
 {
-  { "IDLETIMEOUT",   	smemof(wanif_conf_t, idle_timeout), 	DTYPE_UINT },
-  { "HOLDTIMEOUT",   	smemof(wanif_conf_t, hold_timeout), 	DTYPE_UINT },
-  { "X25_SRC_ADDR",   	smemof(wanif_conf_t, x25_src_addr), 	DTYPE_STR},
-  { "X25_ACCEPT_DST_ADDR",  smemof(wanif_conf_t, accept_dest_addr), DTYPE_STR},
-  { "X25_ACCEPT_SRC_ADDR",  smemof(wanif_conf_t, accept_src_addr),  DTYPE_STR},
-  { "X25_ACCEPT_USR_DATA",  smemof(wanif_conf_t, accept_usr_data),  DTYPE_STR},
-  { "CIR",           	smemof(wanif_conf_t, cir), 	   	DTYPE_UINT },
-  { "BC",            	smemof(wanif_conf_t, bc),		DTYPE_UINT },
-  { "BE", 	     	smemof(wanif_conf_t, be),		DTYPE_UINT },
-  { "MULTICAST",     	smemof(wanif_conf_t, mc),		DTYPE_UCHAR},
-  { "IPX",	     	smemof(wanif_conf_t, enable_IPX),	DTYPE_UCHAR},
-  { "NETWORK",       	smemof(wanif_conf_t, network_number),	DTYPE_UINT},
+  { "IDLETIMEOUT",   	offsetof(wanif_conf_t, idle_timeout), 	DTYPE_UINT },
+  { "HOLDTIMEOUT",   	offsetof(wanif_conf_t, hold_timeout), 	DTYPE_UINT },
+  { "X25_SRC_ADDR",   	offsetof(wanif_conf_t, x25_src_addr), 	DTYPE_STR},
+  { "X25_ACCEPT_DST_ADDR",  offsetof(wanif_conf_t, accept_dest_addr), DTYPE_STR},
+  { "X25_ACCEPT_SRC_ADDR",  offsetof(wanif_conf_t, accept_src_addr),  DTYPE_STR},
+  { "X25_ACCEPT_USR_DATA",  offsetof(wanif_conf_t, accept_usr_data),  DTYPE_STR},
+  { "CIR",           	offsetof(wanif_conf_t, cir), 	   	DTYPE_UINT },
+  { "BC",            	offsetof(wanif_conf_t, bc),		DTYPE_UINT },
+  { "BE", 	     	offsetof(wanif_conf_t, be),		DTYPE_UINT },
+  { "MULTICAST",     	offsetof(wanif_conf_t, mc),		DTYPE_UCHAR},
+  { "IPX",	     	offsetof(wanif_conf_t, enable_IPX),	DTYPE_UCHAR},
+  { "NETWORK",       	offsetof(wanif_conf_t, network_number),	DTYPE_ULONG},
   
- // { "PAP",   	     	smemof(wanif_conf_t, pap),		DTYPE_UCHAR},
- // { "CHAP",          	smemof(wanif_conf_t, chap),		DTYPE_UCHAR},
- // { "USERID",        	smemof(wanif_conf_t, userid),	 	DTYPE_STR},
- // { "PASSWD",        	smemof(wanif_conf_t, passwd),		DTYPE_STR},
- // { "SYSNAME",       	smemof(wanif_conf_t, sysname),		DTYPE_STR},
+ // { "PAP",   	     	offsetof(wanif_conf_t, pap),		DTYPE_UCHAR},
+ // { "CHAP",          	offsetof(wanif_conf_t, chap),		DTYPE_UCHAR},
+ // { "USERID",        	offsetof(wanif_conf_t, userid),	 	DTYPE_STR},
+ // { "PASSWD",        	offsetof(wanif_conf_t, passwd),		DTYPE_STR},
+ // { "SYSNAME",       	offsetof(wanif_conf_t, sysname),		DTYPE_STR},
   //PPP profile kept in "wanif_conf_t.u.ppp"
- // { "IP_MODE",       	offsetof(wanif_conf_t, u) + smemof(wan_sppp_if_conf_t, dynamic_ip),	DTYPE_UINT},
+ // { "IP_MODE",       	offsetof(wanif_conf_t, u) + offsetof(wan_sppp_if_conf_t, dynamic_ip),	DTYPE_UINT},
   
-  { "INARP", 	     	smemof(wanif_conf_t, inarp),          	DTYPE_UCHAR},
-  { "INARPINTERVAL", 	smemof(wanif_conf_t, inarp_interval), 	DTYPE_UINT },
-  { "INARP_RX",      	smemof(wanif_conf_t, inarp_rx),          	DTYPE_UCHAR},
-  { "IGNORE_DCD",  	smemof(wanif_conf_t, ignore_dcd),        	DTYPE_UCHAR},
-  { "IGNORE_CTS",    	smemof(wanif_conf_t, ignore_cts),        	DTYPE_UCHAR},
-  { "IGNORE_KEEPALIVE", smemof(wanif_conf_t, ignore_keepalive), 	DTYPE_UCHAR},
-  { "HDLC_STREAMING", 	smemof(wanif_conf_t, hdlc_streaming), 	DTYPE_UCHAR},
-  //{ "KEEPALIVE_TX_TIMER",	smemof(wanif_conf_t, keepalive_tx_tmr), 	DTYPE_UINT },
-  //{ "KEEPALIVE_RX_TIMER",	smemof(wanif_conf_t, keepalive_rx_tmr), 	DTYPE_UINT },
-  //{ "KEEPALIVE_ERR_MARGIN",	smemof(wanif_conf_t, keepalive_err_margin),	DTYPE_UINT },
-  //{ "SLARP_TIMER", 	smemof(wanif_conf_t, slarp_timer),    DTYPE_UINT },
-  { "TTL",        	smemof(wanif_conf_t, ttl),         DTYPE_UCHAR },
+  { "INARP", 	     	offsetof(wanif_conf_t, inarp),          	DTYPE_UCHAR},
+  { "INARPINTERVAL", 	offsetof(wanif_conf_t, inarp_interval), 	DTYPE_UINT },
+  { "INARP_RX",      	offsetof(wanif_conf_t, inarp_rx),          	DTYPE_UCHAR},
+  { "IGNORE_DCD",  	offsetof(wanif_conf_t, ignore_dcd),        	DTYPE_UCHAR},
+  { "IGNORE_CTS",    	offsetof(wanif_conf_t, ignore_cts),        	DTYPE_UCHAR},
+  { "IGNORE_KEEPALIVE", offsetof(wanif_conf_t, ignore_keepalive), 	DTYPE_UCHAR},
+  { "HDLC_STREAMING", 	offsetof(wanif_conf_t, hdlc_streaming), 	DTYPE_UCHAR},
+  //{ "KEEPALIVE_TX_TIMER",	offsetof(wanif_conf_t, keepalive_tx_tmr), 	DTYPE_UINT },
+  //{ "KEEPALIVE_RX_TIMER",	offsetof(wanif_conf_t, keepalive_rx_tmr), 	DTYPE_UINT },
+  //{ "KEEPALIVE_ERR_MARGIN",	offsetof(wanif_conf_t, keepalive_err_margin),	DTYPE_UINT },
+  //{ "SLARP_TIMER", 	offsetof(wanif_conf_t, slarp_timer),    DTYPE_UINT },
+  { "TTL",        	offsetof(wanif_conf_t, ttl),         DTYPE_UCHAR },
 
-  { "STATION" ,          smemof(wanif_conf_t, station),     DTYPE_UCHAR },
-  { "DYN_INTR_CFG",  	smemof(wanif_conf_t, if_down),     DTYPE_UCHAR },
-  { "GATEWAY",  	smemof(wanif_conf_t, gateway),     DTYPE_UCHAR },
-  { "TRUE_ENCODING_TYPE", smemof(wanif_conf_t,true_if_encoding), DTYPE_UCHAR },
+  { "STATION" ,          offsetof(wanif_conf_t, station),     DTYPE_UCHAR },
+  { "DYN_INTR_CFG",  	offsetof(wanif_conf_t, if_down),     DTYPE_UCHAR },
+  { "GATEWAY",  	offsetof(wanif_conf_t, gateway),     DTYPE_UCHAR },
+  { "TRUE_ENCODING_TYPE", offsetof(wanif_conf_t,true_if_encoding), DTYPE_UCHAR },
 
   /* ASYNC Options */
-  { "ASYNC_MODE",    	       smemof(wanif_conf_t, async_mode), DTYPE_UCHAR},	
-  { "ASY_DATA_TRANSPARENT",    smemof(wanif_conf_t, asy_data_trans), DTYPE_UCHAR},
-  { "RTS_HS_FOR_RECEIVE",      smemof(wanif_conf_t, rts_hs_for_receive), DTYPE_UCHAR},
-  { "XON_XOFF_HS_FOR_RECEIVE", smemof(wanif_conf_t, xon_xoff_hs_for_receive), DTYPE_UCHAR},
-  { "XON_XOFF_HS_FOR_TRANSMIT",smemof(wanif_conf_t, xon_xoff_hs_for_transmit), DTYPE_UCHAR},
-  { "DCD_HS_FOR_TRANSMIT",     smemof(wanif_conf_t, dcd_hs_for_transmit), DTYPE_UCHAR},	
-  { "CTS_HS_FOR_TRANSMIT",     smemof(wanif_conf_t, cts_hs_for_transmit), DTYPE_UCHAR},
-  { "TX_BITS_PER_CHAR",        smemof(wanif_conf_t, tx_bits_per_char),    DTYPE_UINT },
-  { "RX_BITS_PER_CHAR",        smemof(wanif_conf_t, rx_bits_per_char),    DTYPE_UINT },
-  { "STOP_BITS",               smemof(wanif_conf_t, stop_bits),    DTYPE_UINT },
-  { "PARITY",                  smemof(wanif_conf_t, parity),    DTYPE_UCHAR },
-  { "BREAK_TIMER",             smemof(wanif_conf_t, break_timer),    DTYPE_UINT },	
-  { "INTER_CHAR_TIMER",        smemof(wanif_conf_t, inter_char_timer),    DTYPE_UINT },
-  { "RX_COMPLETE_LENGTH",      smemof(wanif_conf_t, rx_complete_length),    DTYPE_UINT },
-  { "XON_CHAR",                smemof(wanif_conf_t, xon_char),    DTYPE_UINT },	
-  { "XOFF_CHAR",               smemof(wanif_conf_t, xoff_char),    DTYPE_UINT },	
-  //{ "MPPP_PROT",	       smemof(wanif_conf_t, protocol),  DTYPE_UCHAR},
-  { "PROTOCOL",      	       smemof(wanif_conf_t, protocol),  DTYPE_UCHAR},	//note!! it is read, ignored and
+  { "ASYNC_MODE",    	       offsetof(wanif_conf_t, async_mode), DTYPE_UCHAR},	
+  { "ASY_DATA_TRANSPARENT",    offsetof(wanif_conf_t, asy_data_trans), DTYPE_UCHAR},
+  { "RTS_HS_FOR_RECEIVE",      offsetof(wanif_conf_t, rts_hs_for_receive), DTYPE_UCHAR},
+  { "XON_XOFF_HS_FOR_RECEIVE", offsetof(wanif_conf_t, xon_xoff_hs_for_receive), DTYPE_UCHAR},
+  { "XON_XOFF_HS_FOR_TRANSMIT",offsetof(wanif_conf_t, xon_xoff_hs_for_transmit), DTYPE_UCHAR},
+  { "DCD_HS_FOR_TRANSMIT",     offsetof(wanif_conf_t, dcd_hs_for_transmit), DTYPE_UCHAR},	
+  { "CTS_HS_FOR_TRANSMIT",     offsetof(wanif_conf_t, cts_hs_for_transmit), DTYPE_UCHAR},
+  { "TX_BITS_PER_CHAR",        offsetof(wanif_conf_t, tx_bits_per_char),    DTYPE_UINT },
+  { "RX_BITS_PER_CHAR",        offsetof(wanif_conf_t, rx_bits_per_char),    DTYPE_UINT },
+  { "STOP_BITS",               offsetof(wanif_conf_t, stop_bits),    DTYPE_UINT },
+  { "PARITY",                  offsetof(wanif_conf_t, parity),    DTYPE_UCHAR },
+  { "BREAK_TIMER",             offsetof(wanif_conf_t, break_timer),    DTYPE_UINT },	
+  { "INTER_CHAR_TIMER",        offsetof(wanif_conf_t, inter_char_timer),    DTYPE_UINT },
+  { "RX_COMPLETE_LENGTH",      offsetof(wanif_conf_t, rx_complete_length),    DTYPE_UINT },
+  { "XON_CHAR",                offsetof(wanif_conf_t, xon_char),    DTYPE_UINT },	
+  { "XOFF_CHAR",               offsetof(wanif_conf_t, xoff_char),    DTYPE_UINT },	
+  //{ "MPPP_PROT",	       offsetof(wanif_conf_t, protocol),  DTYPE_UCHAR},
+  { "PROTOCOL",      	       offsetof(wanif_conf_t, protocol),  DTYPE_UCHAR},	//note!! it is read, ignored and
   										//NOT written for everything but 
 										//LIP ATM!
   
-  { "ACTIVE_CH",	       	smemof(wanif_conf_t, active_ch),  	DTYPE_UINT},
-  { "SW_DEV_NAME",	       	smemof(wanif_conf_t, sw_dev_name),  	DTYPE_STR},
+  { "ACTIVE_CH",	       	offsetof(wanif_conf_t, active_ch),  	DTYPE_ULONG},
+  { "SW_DEV_NAME",	       	offsetof(wanif_conf_t, sw_dev_name),  	DTYPE_STR},
 
-  { "DLCI_TRACE_QUEUE",		smemof(wanif_conf_t, max_trace_queue), DTYPE_UINT},
-  { "MAX_TRACE_QUEUE",		smemof(wanif_conf_t, max_trace_queue), DTYPE_UINT},
+  { "DLCI_TRACE_QUEUE",		offsetof(wanif_conf_t, max_trace_queue), DTYPE_UINT},
+  { "MAX_TRACE_QUEUE",		offsetof(wanif_conf_t, max_trace_queue), DTYPE_UINT},
 
-  { "TDMV_ECHO_OFF", offsetof(wanif_conf_t, tdmv)+smemof(wan_tdmv_if_conf_t, tdmv_echo_off), DTYPE_UCHAR},
-  { "TDMV_CODEC",    offsetof(wanif_conf_t, tdmv)+smemof(wan_tdmv_if_conf_t, tdmv_codec),    DTYPE_UCHAR},
-  { "TDMV_HWEC",     offsetof(wanif_conf_t, hwec)+smemof(wan_hwec_if_conf_t, enable),    DTYPE_UCHAR}, 
+  { "TDMV_ECHO_OFF",		offsetof(wanif_conf_t, tdmv_echo_off), 	DTYPE_UCHAR},
 
+  { "TDMV_HWEC_MAP", 		offsetof(wanif_conf_t, active_ch),  	DTYPE_ULONG},
+
+  //reusing 'xoff_char' here for HWEC yes/no
+  { "TDMV_HWEC",     		offsetof(wanif_conf_t, xoff_char), DTYPE_UCHAR},
+ 
   { NULL, 0, 0 }
 };
 
@@ -688,7 +679,6 @@
 	{ 0,			NULL,			}
 };
 
-
 /*
  * Configuration options values and their symbolic names.
  */
@@ -1003,14 +993,14 @@
 
   wan_xilinx_conf = &linkconf->u.aft;
   //wan_xilinx_conf->tdmv_span_no = 0;
-  linkconf->tdmv_conf.dchan = 0;//by default NOT used or DISABLED
+  wan_xilinx_conf->tdmv_dchan = 0;//by default NOT used or DISABLED
 				  //OR
 				  //the actual value will be read from conf file
   /*
-  linkconf->tdmv_conf.dchan = 24;//when media type will be known,
-  				//must be set to a default value: 24-T1, 16-E1
-				//OR
-				//the actual value will be read from conf file
+  wan_xilinx_conf->tdmv_dchan = 24;//when media type will be known,
+  				   //must be set to a default value: 24-T1, 16-E1
+				   //OR
+				   //the actual value will be read from conf file
   */
   //at this point hardware type is not known, so initialize the firmware to most common.
   //good for all except EduKit.
@@ -1085,19 +1075,16 @@
   sdla_te3_cfg_t* te3_cfg= &fe_cfg->cfg.te3_cfg; 
   #endif
  
-  Debug(DBG_CONF_FILE_READER, ("%s(): fe_cfg->media: %d\n",__FUNCTION__,
+  Debug(DBG_CONF_FILE_READER, ("form_fe_card_cfg_str(): fe_cfg->media: %d\n",
 	fe_cfg->media));
 
-  Debug(DBG_CONF_FILE_READER, ("%s(): fe_cfg->line_no: %d\n",__FUNCTION__,
-	fe_cfg->line_no));
-
-  Debug(DBG_CONF_FILE_READER, ("%s(): te3_cfg->fcs: %d\n",__FUNCTION__,
+  Debug(DBG_CONF_FILE_READER, ("form_fe_card_cfg_str(): te3_cfg->fcs: %d\n",
 	te3_cfg->fcs));
 
-  Debug(DBG_CONF_FILE_READER, ("%s(): te3_cfg->liu_cfg.rx_equal: %d\n",__FUNCTION__,
+  Debug(DBG_CONF_FILE_READER, ("form_fe_card_cfg_str(): te3_cfg->liu_cfg.rx_equal: %d\n",
 	te3_cfg->liu_cfg.rx_equal));
 
-  Debug(DBG_CONF_FILE_READER, ("%s(): te3_cfg->liu_cfg.taos: %d\n",__FUNCTION__,
+  Debug(DBG_CONF_FILE_READER, ("form_fe_card_cfg_str(): te3_cfg->liu_cfg.taos: %d\n",
  	te3_cfg->liu_cfg.taos));
 
   /////////////////////////////////////////////////////////////////////////////////////////////
@@ -1236,6 +1223,7 @@
     link_defs->linkconf->config_id = WANCONFIG_AFT;//WANCONFIG_AFT_56K;
     link_defs->card_version = AFT_ADPTR_56K;
     break;
+
   }
 
   Debug(DBG_CONF_FILE_READER, ("Updated link_defs->linkconf->config_id: %d\n",
@@ -1815,7 +1803,7 @@
 int conf_file_reader::set_conf_param (char* key, char* val, key_word_t* dtab, void* conf, link_def_t* lnks_def,
 				      chan_def_t* chan_def)
 {
-  unsigned int tmp = 0;
+  unsigned long tmp = 0;
 
 //  Debug(DBG_CONF_FILE_READER, ("conf_file_reader::set_conf_param()\n"));
 //  Debug(DBG_CONF_FILE_READER, ("key ::::%s\n", key));
@@ -1853,14 +1841,11 @@
   if( !isdigit(*val) ||
       strcmp(key, "ACTIVE_CH") == 0 ||
       strcmp(key, "LBO") == 0 ||
-      strcmp(key, "MEDIA") == 0 || /* old style for FE_MEDIA */
-      strcmp(key, "FE_MEDIA") == 0 ||
+      strcmp(key, "MEDIA") == 0 ||
       strcmp(key, "TDMV_HWEC_MAP") == 0 ) {
 	  
     look_up_t* sym;
-    unsigned int tmp_ch;
-
-	FUNC_DBG();
+    unsigned long tmp_ch;
 
     strupcase(val);
     for (sym = sym_table; sym->ptr && strcmp((char*)sym->ptr, val); ++sym){
@@ -1882,12 +1867,12 @@
 	    ERR_DBG_OUT(("Illegal active channel range for media type ! (%s).\n", val));
 	    return -1;
 	  }
-	  tmp = (unsigned int)tmp_ch;
+	  tmp = (unsigned long)tmp_ch;
         }
       }
 
       Debug(DBG_CONF_FILE_READER, ("Active Channels val: ")); Debug(DBG_CONF_FILE_READER, ("%s\n", val));
-      Debug(DBG_CONF_FILE_READER, ("Active Channels int tmp: ")); Debug(DBG_CONF_FILE_READER, ("0x%X\n", tmp));
+      Debug(DBG_CONF_FILE_READER, ("Active Channels int tmp: ")); Debug(DBG_CONF_FILE_READER, ("0x%lX\n", tmp));
       
       //Active Channels can be passed for both the 'device' and the 'channel'
       //Store the active channels string for display and modification by the user.
@@ -1914,49 +1899,40 @@
     }
     
   }else{
-	FUNC_DBG();
     tmp = strtoul(val, NULL, 0);
   }//if()
   
   switch (dtab->dtype) 
   {
   case DTYPE_INT:
-    SIZEOFASSERT(dtab, sizeof(int));     
     *(int*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_UINT:
-    SIZEOFASSERT(dtab, sizeof(unsigned int));     
     *(uint*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_LONG:
-    SIZEOFASSERT(dtab, sizeof(long));     
     *(long*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_ULONG:
-    SIZEOFASSERT(dtab, sizeof(unsigned long));     
     *(unsigned long*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_SHORT:
-    SIZEOFASSERT(dtab, sizeof(short));     
     *(short*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_USHORT:
-    SIZEOFASSERT(dtab, sizeof(unsigned short));     
     *(ushort*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_CHAR:
-    SIZEOFASSERT(dtab, sizeof(char));     
     *(char*)((char*)conf + dtab->offset) = tmp;
     break;
 
   case DTYPE_UCHAR:
-    SIZEOFASSERT(dtab, sizeof(unsigned char));     
     *(unsigned char*)((char*)conf + dtab->offset) = tmp;
     break;
 
@@ -2508,7 +2484,7 @@
 	}
 }
 
-/* Bug Fix by Ren�Scharfe <l.s.r@web.de>
+/* Bug Fix by René Scharfe <l.s.r@web.de>
  * removed strtok
  */
 int tokenize (char *str, char **tokens)
Only in wancfg: conf_file_reader.cpp~
diff -dur /root/3.1.X/wanpipe/util/wancfg/conf_file_reader.h wancfg/conf_file_reader.h
--- /root/3.1.X/wanpipe/util/wancfg/conf_file_reader.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/conf_file_reader.h	2006-11-21 18:31:51.000000000 -0500
@@ -82,7 +82,6 @@
 {
 	char*	keyword;	/* -> keyword */
 	uint	offset;		/* offset of the related parameter */
-	uint	size;		/* offset of the related parameter */
 	int	dtype;		/* data type */
 } key_word_t;
 
diff -dur /root/3.1.X/wanpipe/util/wancfg/conf_file_writer.cpp wancfg/conf_file_writer.cpp
--- /root/3.1.X/wanpipe/util/wancfg/conf_file_writer.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/conf_file_writer.cpp	2007-06-04 14:41:15.000000000 -0400
@@ -553,7 +553,7 @@
 );
       break;
 
-    case AFT_ADPTR_56K:
+     case AFT_ADPTR_56K:
       snprintf(tmp_buff, MAX_PATH_LENGTH,
 "\n\
 [devices]\n\
@@ -564,6 +564,8 @@
 );
       break;
 
+
+
     case A200_ADPTR_ANALOG:
       snprintf(tmp_buff, MAX_PATH_LENGTH,
 "\n\
@@ -1547,18 +1549,28 @@
         fe_cfg->cfg.remora.opermode_name);
       te1_cfg_string += tmp_buff;
     }
+   
 
+/* DAVIDY: Uncomment this when RM_BATTTHRESH and RM_BATTDEBOUNCE become available in 2.3.4 drivers*/ 
+#if 0
     snprintf(tmp_buff, MAX_PATH_LENGTH, "RM_BATTTHRESH	= %d\n",
         fe_cfg->cfg.remora.battthresh);
     te1_cfg_string += tmp_buff;
 
-    snprintf(tmp_buff, MAX_PATH_LENGTH, "RM_BATTDEBOUNCE= %d\n",
+    snprintf(tmp_buff, MAX_PATH_LENGTH, "RM_BATTDEBOUNCE = %d\n",
         fe_cfg->cfg.remora.battdebounce);
     te1_cfg_string += tmp_buff;
 
     break;
+#endif
+	
+    snprintf(tmp_buff, MAX_PATH_LENGTH, "RM_NETWORK_SYNC = %s\n",
+        fe_cfg->cfg.remora.network_sync == WANOPT_YES ? "YES" : "NO");
+    te1_cfg_string += tmp_buff;
 
-  default:
+     break;
+
+  default:	
     snprintf(tmp_buff, MAX_PATH_LENGTH, "FE_TXTRISTATE	= %s\n", 
 	(fe_cfg->tx_tristate_mode == WANOPT_YES ? "YES" : "NO"));
     te1_cfg_string += tmp_buff;
@@ -1581,12 +1593,10 @@
 {
   char			tmp_buff[MAX_PATH_LENGTH];
   wan_xilinx_conf_t 	*wan_xilinx_conf;
-  wan_tdmv_conf_t	*tdmv_conf;
 
   Debug(DBG_CONF_FILE_WRITER, ("form_wanpipe_card_miscellaneous_options_str()\n"));
 
   wan_xilinx_conf = &cfr->link_defs->linkconf->u.aft;
-  tdmv_conf = &cfr->link_defs->linkconf->tdmv_conf;
   
   switch(cfr->link_defs->linkconf->card_type)
   {
@@ -1660,11 +1670,11 @@
      is_there_a_voice_if == YES){
 
     snprintf(tmp_buff, MAX_PATH_LENGTH, "TDMV_SPAN\t= %u\n",
-       tdmv_conf->span_no);
+       wan_xilinx_conf->tdmv_span_no);
     misc_opt_string += tmp_buff;
 
     snprintf(tmp_buff, MAX_PATH_LENGTH, "TDMV_DCHAN\t= %u\n",
-       tdmv_conf->dchan);
+       wan_xilinx_conf->tdmv_dchan);
     misc_opt_string += tmp_buff;
   }
 
@@ -1673,7 +1683,7 @@
     //if(is_there_a_voice_if == YES){
     //the analog card is AWAYS in some "SPAN" !!!
       snprintf(tmp_buff, MAX_PATH_LENGTH, "TDMV_SPAN\t= %u\n",
-         tdmv_conf->span_no);
+         wan_xilinx_conf->tdmv_span_no);
       misc_opt_string += tmp_buff;
     //}
   }
@@ -2400,7 +2410,7 @@
       wp_interface += get_keyword_from_key_word_t_table(chan_conftab,
                                                         offsetof(wanif_conf_t, network_number));
       wp_interface += "\t= ";
-      snprintf(tmp_buff, MAX_PATH_LENGTH, "0x%08X\n", list_el_chan_def->data.chanconf->network_number);
+      snprintf(tmp_buff, MAX_PATH_LENGTH, "0x%08lX\n", list_el_chan_def->data.chanconf->network_number);
       wp_interface += tmp_buff;
     }
   }
@@ -2688,7 +2698,7 @@
       wp_interface += "\t= ";
       snprintf(tmp_buff, MAX_PATH_LENGTH, "%s",
         get_keyword_from_look_up_t_table( yes_no_options_table,
-		     			  chandef->chanconf->tdmv.tdmv_echo_off));
+		     			  chandef->chanconf->tdmv_echo_off));
       wp_interface += tmp_buff;
       wp_interface += "\n";
     }
@@ -2697,7 +2707,7 @@
     if(chandef->usedby == TDM_VOICE || chandef->usedby == TDM_API || chandef->usedby == API){
       snprintf(tmp_buff, MAX_PATH_LENGTH, "TDMV_HWEC\t= %s\n",
 		get_keyword_from_look_up_t_table(yes_no_options_table,
-       					 chandef->chanconf->hwec.enable));	//chandef->chanconf->xoff_char));
+       					 chandef->chanconf->xoff_char));
       wp_interface += tmp_buff;
 /*
       if(chandef->hwec_flag == WANOPT_YES){
Only in wancfg: conf_file_writer.cpp~
diff -dur /root/3.1.X/wanpipe/util/wancfg/list_element_chan_def.h wancfg/list_element_chan_def.h
--- /root/3.1.X/wanpipe/util/wancfg/list_element_chan_def.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/list_element_chan_def.h	2006-11-21 18:31:51.000000000 -0500
@@ -93,8 +93,7 @@
 
     //FIXME: David to set active_ch to ALL for VOICE and 1 for API
     //       For now 99% is VOICE which should have ALL set
-    if(global_card_type == WANOPT_AFT  &&  
-       (global_card_version == A200_ADPTR_ANALOG||global_card_version == A400_ADPTR_ANALOG)){
+    if(global_card_type == WANOPT_AFT  &&  global_card_version == A200_ADPTR_ANALOG){
       snprintf(data.active_channels_string, MAX_LEN_OF_ACTIVE_CHANNELS_STRING, "ALL");
       data.chanconf->active_ch = ENABLE_ALL_CHANNELS;
     }else{
diff -dur /root/3.1.X/wanpipe/util/wancfg/list_element_sangoma_card.h wancfg/list_element_sangoma_card.h
--- /root/3.1.X/wanpipe/util/wancfg/list_element_sangoma_card.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/list_element_sangoma_card.h	2006-11-21 18:31:51.000000000 -0500
@@ -140,7 +140,6 @@
     switch(card_version)
     {
     case A200_ADPTR_ANALOG:
-    case A400_ADPTR_ANALOG:
       	printf("\tSpan: %d, Line: Analog, Law: %s.\n", 
 		spanno, (fe_cfg.tdmv_law == ZT_LAW_MULAW ? "MuLaw" : "ALaw"));
       	break;
diff -dur /root/3.1.X/wanpipe/util/wancfg/main.cpp wancfg/main.cpp
--- /root/3.1.X/wanpipe/util/wancfg/main.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/main.cpp	2007-06-04 14:41:50.000000000 -0400
@@ -731,10 +731,10 @@
 	break;
     case A200_ADPTR_ANALOG:
     	snprintf(card_type_name, MAX_PATH_LENGTH, "A200/A400-Analog");
-	break;
-    case AFT_ADPTR_56K:
-    	snprintf(card_type_name, MAX_PATH_LENGTH, "A056-56k DDS");
-	break;
+	break;
+    case AFT_ADPTR_56K:
+    	snprintf(card_type_name, MAX_PATH_LENGTH, "A056-56k DDS");
+	break;
     default:
         ERR_DBG_OUT(("Invalid AFT card version: 0x%x!\n", card_version));
     }
@@ -1694,14 +1694,14 @@
  *
  * Return ULONG value, that include 1 in position `i` if channels i is active.
  */
-unsigned int parse_active_channel(char* val, unsigned char media_type)
+unsigned long parse_active_channel(char* val, unsigned char media_type)
 {
 #define SINGLE_CHANNEL	0x2
 #define RANGE_CHANNEL	  0x1
 	int channel_flag = 0;
 	char* ptr = val;
 	int channel = 0, start_channel = 0;
-	unsigned int tmp = 0;
+	unsigned long tmp = 0;
 
   Debug(DBG_WANCFG_MAIN, ("parse_active_channel(): input: %s, media_type: %d\n", val, media_type));
 
@@ -1761,11 +1761,11 @@
 /*============================================================================
  * TE1
  */
-unsigned int get_active_channels(int channel_flag, int start_channel,
+unsigned long get_active_channels(int channel_flag, int start_channel,
                                   int stop_channel,  unsigned char media_type)
 {
 	int i = 0;
-	unsigned int tmp = 0, mask = 0;
+	unsigned long tmp = 0, mask = 0;
 
 	if ((channel_flag & (SINGLE_CHANNEL | RANGE_CHANNEL)) == 0)
 		return tmp;
@@ -1973,7 +1973,7 @@
   te1_cfg->lbo = WAN_T1_LBO_0_DB;
   te1_cfg->te_clock = WAN_NORMAL_CLK;
   te1_cfg->active_ch = ENABLE_ALL_CHANNELS;
-  te1_cfg->high_impedance_mode = WANOPT_NO;
+  te1_cfg->high_impedance_mode = WANOPT_NO;
 }
 /*
 EncapMode	= ETH_LLC_OA
@@ -2116,7 +2116,7 @@
   Debug(DBG_WANCFG_MAIN, ("%s: main()\n", WANCFG_PROGRAM_NAME));
 
   if(argc == 2 && !strcmp(argv[1], "version")){
-    printf("\nwancfg version: 1.30\n");
+    printf("\nwancfg version: 1.28\n");
     return EXIT_SUCCESS;
   }
 
diff -dur /root/3.1.X/wanpipe/util/wancfg/Makefile wancfg/Makefile
--- /root/3.1.X/wanpipe/util/wancfg/Makefile	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/Makefile	2007-03-29 19:00:04.000000000 -0400
@@ -16,16 +16,14 @@
 
 # Project file paths. Initilize to compile in develpment environment.
 # Changed when Setup script is running.
-SYSINC=/lib/modules/$(shell uname -r)/build/include
+SYSINC	= ../../patches/kdrivers/include
 WAN_VIRTUAL=
 ENABLE_ZAPTEL_PARSER=
 ZAPINC=/usr/src/zaptel
 
 # Tools options.
-#CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I$(SYSINC) -I. \
-         -D__LINUX__ -DSTATIC_LIBS=$(GD_STATIC) $(OGR_STATIC) $(PROTOCOL_DEFINES)
-
-CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I. -D__LINUX__ -I$(SYSINC) $(PROTOCOL_DEFINES)
+CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I$(SYSINC) -I. \
+         -D__LINUX__ -DSTATIC_LIBS= $(GD_STATIC) $(OGR_STATIC) $(PROTOCOL_DEFINES)
 
 #uncomment this to compile from CVS, also may change to your zaptel installation directory
 #CFLAGS += -I/usr/src/zaptel
@@ -78,6 +76,7 @@
 net_interface_file_reader.cpp\
 menu_advanced_pci_configuration.cpp\
 menu_hardware_cpu_number.cpp\
+menu_hardware_select_comms_port.cpp\
 menu_wan_channel_cfg.cpp\
 menu_frame_relay_basic_cfg.cpp\
 menu_frame_relay_signalling.cpp\
@@ -96,6 +95,7 @@
 menu_ppp_select_authentication_protocol.cpp\
 menu_net_interfaces_list.cpp\
 menu_net_interface_setup.cpp\
+net_interface_file_reader.cpp\
 menu_net_interface_ip_configuration.cpp\
 menu_net_interface_operation_mode.cpp\
 menu_net_interface_miscellaneous_options.cpp\
@@ -132,8 +132,9 @@
 all:	wancfg
 	@echo "Ok."
 
-wancfg: 
-	$(CC) $(FILES) $(CFLAGS) -o $@ $^ -lfl -lm
+wancfg: $(FILES)
+
+	$(CC) $(CFLAGS) -o $@ $^ -lfl -lm
 
 clean:
 	rm -f wancfg
diff -dur /root/3.1.X/wanpipe/util/wancfg/Makefile.Linux wancfg/Makefile.Linux
--- /root/3.1.X/wanpipe/util/wancfg/Makefile.Linux	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/Makefile.Linux	2007-03-29 19:00:04.000000000 -0400
@@ -16,16 +16,14 @@
 
 # Project file paths. Initilize to compile in develpment environment.
 # Changed when Setup script is running.
-SYSINC=/lib/modules/$(shell uname -r)/build/include
+SYSINC	= ../../patches/kdrivers/include
 WAN_VIRTUAL=
 ENABLE_ZAPTEL_PARSER=
 ZAPINC=/usr/src/zaptel
 
 # Tools options.
-#CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I$(SYSINC) -I. \
-         -D__LINUX__ -DSTATIC_LIBS=$(GD_STATIC) $(OGR_STATIC) $(PROTOCOL_DEFINES)
-
-CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I. -D__LINUX__ -I$(SYSINC) $(PROTOCOL_DEFINES)
+CFLAGS = -Wall -O2 -D$(OS_TYPE) -D_DEBUG_=$(DEBUG) -D_GNUC_ -I$(SYSINC) -I. \
+         -D__LINUX__ -DSTATIC_LIBS= $(GD_STATIC) $(OGR_STATIC) $(PROTOCOL_DEFINES)
 
 #uncomment this to compile from CVS, also may change to your zaptel installation directory
 #CFLAGS += -I/usr/src/zaptel
@@ -78,6 +76,7 @@
 net_interface_file_reader.cpp\
 menu_advanced_pci_configuration.cpp\
 menu_hardware_cpu_number.cpp\
+menu_hardware_select_comms_port.cpp\
 menu_wan_channel_cfg.cpp\
 menu_frame_relay_basic_cfg.cpp\
 menu_frame_relay_signalling.cpp\
@@ -96,6 +95,7 @@
 menu_ppp_select_authentication_protocol.cpp\
 menu_net_interfaces_list.cpp\
 menu_net_interface_setup.cpp\
+net_interface_file_reader.cpp\
 menu_net_interface_ip_configuration.cpp\
 menu_net_interface_operation_mode.cpp\
 menu_net_interface_miscellaneous_options.cpp\
@@ -132,8 +132,9 @@
 all:	wancfg
 	@echo "Ok."
 
-wancfg: 
-	$(CC) $(FILES) $(CFLAGS) -o $@ $^ -lfl -lm
+wancfg: $(FILES)
+
+	$(CC) $(CFLAGS) -o $@ $^ -lfl -lm
 
 clean:
 	rm -f wancfg
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_card_type.cpp wancfg/menu_hardware_card_type.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_card_type.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_card_type.cpp	2007-06-04 14:46:34.000000000 -0400
@@ -281,17 +281,16 @@
           case A200_ADPTR_ANALOG:
 	    fe_cfg->media = WAN_MEDIA_FXOFXS;
 	    fe_cfg->tdmv_law = WAN_TDMV_MULAW;
-	    snprintf(fe_cfg->cfg.remora.opermode_name, WAN_RM_OPERMODE_LEN, "%s", "FCC");
-		fe_cfg->cfg.remora.battthresh = 3;
-		fe_cfg->cfg.remora.battdebounce = 16;
-	    break;
-	  case AFT_ADPTR_56K:
-	    fe_cfg->media = WAN_MEDIA_56K;
-		break;
+	    snprintf(fe_cfg->cfg.remora.opermode_name, WAN_RM_OPERMODE_LEN, "%s", "FCC");
+	    break;
+
+	  case AFT_ADPTR_56K:
+	    fe_cfg->media = WAN_MEDIA_56K;
+	    break;
 	  }
 	  break;
 	  
-	case WANOPT_ADSL:
+	 case WANOPT_ADSL:
 	  set_default_adsl_configuration(adsl_cfg);
 	  break;
 	  
@@ -349,17 +348,15 @@
 	    set_default_t3_configuration(fe_cfg);
 	    break;
 
-      case A200_ADPTR_ANALOG:
+          case A200_ADPTR_ANALOG:
 	    fe_cfg->media = WAN_MEDIA_FXOFXS;
 	    fe_cfg->tdmv_law = WAN_TDMV_MULAW;
-	    snprintf(fe_cfg->cfg.remora.opermode_name, WAN_RM_OPERMODE_LEN, "%s", "FCC");
-		fe_cfg->cfg.remora.battthresh = 3;
-		fe_cfg->cfg.remora.battdebounce = 16;
-	    break;
-
-	  case AFT_ADPTR_56K:
-	    fe_cfg->media = WAN_MEDIA_56K;
-		break;
+	    snprintf(fe_cfg->cfg.remora.opermode_name, WAN_RM_OPERMODE_LEN, "%s", "FCC");
+	    break;
+
+	  case AFT_ADPTR_56K:
+	    fe_cfg->media = WAN_MEDIA_56K;
+            break;
 	  }
 	  break;
 
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_probe.cpp wancfg/menu_hardware_probe.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_probe.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_probe.cpp	2007-07-18 15:17:41.000000000 -0400
@@ -583,7 +583,7 @@
       strstr(selected_card_line, "AFT-A301") != NULL ||
       strstr(selected_card_line, "AFT-A300") != NULL){
     rc = YES;
-    *card_type = WANOPT_AFT;
+    *card_type = WANOPT_AFT;
     *card_version = A300_ADPTR_U_1TE3;//WAN_MEDIA_DS3;//indicates A105
     goto done;
   }
@@ -591,8 +591,8 @@
   //
   //Analog card
   //
-  if( strstr(selected_card_line, "AFT-A200-SH") != NULL ||
-      strstr(selected_card_line, "AFT-A400-SH") != NULL   ){
+  if( strstr(selected_card_line, "AFT-A200-SH") != NULL || 
+      strstr(selected_card_line, "AFT-A400-SH") != NULL){
     rc = YES;
     *card_type = WANOPT_AFT;
     *card_version = A200_ADPTR_ANALOG;
@@ -608,19 +608,18 @@
       global_hw_ec_max_num = atoi(hw_ec_max_num_ptr);
       Debug(DBG_MENU_HARDWARE_PROBE, ("global_hw_ec_max_num: %d\n", global_hw_ec_max_num));
     }
-
     goto done;
-  }
-
-  //
-  //A056 (AFT) 56k DDS card
-  //
-  if( strstr(selected_card_line, "AFT-A056-SH") != NULL){
-    rc = YES;
-    *card_type = WANOPT_AFT;
-    *card_version = AFT_ADPTR_56K;
-    goto done;
-  }
+    }	
+  //
+  //A056 (AFT) 56k DDS card
+  //
+ 
+  if( strstr(selected_card_line, "AFT-A056-SH") != NULL){
+    rc = YES;
+    *card_type = WANOPT_AFT;
+    *card_version = AFT_ADPTR_56K;
+    goto done;
+   }
 
 done:
 
@@ -752,7 +751,7 @@
   return YES;
 }
 
-int menu_hardware_probe::get_port_from_str(char * str_buff, unsigned int* comm_port)
+int menu_hardware_probe::get_port_from_str(char * str_buff, int* comm_port)
 {
   char * tmp = str_buff;
   
@@ -802,9 +801,7 @@
     *comm_port = 1;
     Debug(DBG_MENU_HARDWARE_PROBE, ("get_port_from_str(): PORT : SEC\n"));
   }else{
-    Debug(DBG_MENU_HARDWARE_PROBE, ("get_port_from_str(): Invalid Port!!\n"));
-    ERR_DBG_OUT(("Failed to get 'comm_port' from line: %s!\n", str_buff));
-    return NO;
+    *comm_port = 0;
   }
   return YES;
 }
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_probe.h wancfg/menu_hardware_probe.h
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_probe.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_probe.h	2006-11-21 18:31:51.000000000 -0500
@@ -48,7 +48,7 @@
 		  			  link_def_t * link_def,
                                           char* selected_card_line);
 
-  int get_port_from_str(char * str_buff, unsigned int* comm_port);
+  int get_port_from_str(char * str_buff, int* comm_port);
   
   int get_line_number_from_str(char * str_buff, unsigned int* line_no);
 
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_setup.cpp wancfg/menu_hardware_setup.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_setup.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_setup.cpp	2007-06-04 12:29:59.000000000 -0400
@@ -170,7 +170,7 @@
   TIMESLOT_GROUP_CFG,
   ADVANCED_PCI_CFG,
   TDMV_LAW_SELECT,
-  TDMV_OPERMODE,
+  TDMV_OPERMODE,
   AFT_ANALOG_ADVANCED
 };
 
@@ -353,7 +353,7 @@
       menu_str += tmp_buff;
       number_of_items++;
       break;
-
+
     case A200_ADPTR_ANALOG:
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TDMV_LAW_SELECT);
       menu_str += tmp_buff;
@@ -378,11 +378,11 @@
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \" \" ");
       menu_str += tmp_buff;
       number_of_items++;
-
-      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", AFT_ANALOG_ADVANCED);
-      menu_str += tmp_buff;
-      menu_str += " \"Advanced Physical Medium Configuration\" ";
-      number_of_items++;
+
+      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", AFT_ANALOG_ADVANCED);
+      menu_str += tmp_buff;
+      menu_str += " \"Advanced Physical Medium Configuration\" ";
+      number_of_items++;
 
       //timeslot group configuration
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TIMESLOT_GROUP_CFG);
@@ -700,17 +700,17 @@
         }
       }
       break;
-
-    case AFT_ANALOG_ADVANCED:
-      {
-        menu_hardware_analog_card_advanced_options hardware_analog_card_advanced_options(
-                                                                  lxdialog_path, cfr);
-        if(hardware_analog_card_advanced_options.run(selection_index) == NO){
-          rc = NO;
-          exit_dialog = YES;
-        }
-      }
-      break;
+
+    case AFT_ANALOG_ADVANCED:
+      {
+        menu_hardware_analog_card_advanced_options hardware_analog_card_advanced_options(
+                                                                  lxdialog_path, cfr);
+        if(hardware_analog_card_advanced_options.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
     case AFT_TE3_ADVANCED:
       {
Only in wancfg: menu_hardware_setup.cpp~
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_te1_card_advanced_options.cpp wancfg/menu_hardware_te1_card_advanced_options.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_te1_card_advanced_options.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_te1_card_advanced_options.cpp	2007-06-04 12:43:27.000000000 -0400
@@ -1,18 +1,18 @@
 /***************************************************************************
-		 menu_hardware_te1_card_advanced_options.cpp  -  description
-							 -------------------
-	begin				 : Thu Apr 1 2004
-	copyright			 : (C) 2004 by David Rokhvarg
-	email				 : davidr@sangoma.com
+                          menu_hardware_te1_card_advanced_options.cpp  -  description
+                             -------------------
+    begin                : Thu Apr 1 2004
+    copyright            : (C) 2004 by David Rokhvarg
+    email                : davidr@sangoma.com
  ***************************************************************************/
 
 /***************************************************************************
- *																		   *
- *	 This program is free software; you can redistribute it and/or modify  *
- *	 it under the terms of the GNU General Public License as published by  *
- *	 the Free Software Foundation; either version 2 of the License, or	   *
- *	 (at your option) any later version.								   *
- *																		   *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
  ***************************************************************************/
 
 #include "menu_hardware_te1_card_advanced_options.h"
@@ -113,12 +113,12 @@
 "IMPORTANT: When start and stopping devices\n"
 "START:  Master(wanpipe1) then Slave(wanpipe2)\n"
 "STOP:   Slave(wanpipe2) then Master(wanpipe1)\n"
-"\n"			  
+"\n"		      
 "This is done automatically by the wanrouter\n"
 "startup script.\n" 
 "i.e: wanrouter stop: will stop devices in\n" 
 "inverse order.\n"
-"\n"			 
+"\n"		     
 "IMPORTANT:\n"
 "	If the wanpipe1 device is stopped, the\n"
 "	wanpipe2 device, that is using the clock\n"
@@ -134,20 +134,19 @@
 	E1_LBO,
 	TE1_CLOCK,
 	TE1_ACTIVE_CH,
-	AFT_FE_TXTRISTATE,
+  	AFT_FE_TXTRISTATE,
 	TE_REF_CLOCK,
-	E1_SIG_MODE,
-	TE_HIGHIMPEDANCE
+	E1_SIG_MODE
 };
 
 #define DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS 1
 
 menu_hardware_te1_card_advanced_options::
 	menu_hardware_te1_card_advanced_options(  IN char * lxdialog_path,
-											IN conf_file_reader* ptr_cfr)
+                                            IN conf_file_reader* ptr_cfr)
 {
   Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
-	("menu_hardware_te1_card_advanced_options::menu_hardware_te1_card_advanced_options()\n"));
+    ("menu_hardware_te1_card_advanced_options::menu_hardware_te1_card_advanced_options()\n"));
 
   snprintf(this->lxdialog_path, MAX_PATH_LENGTH, "%s", lxdialog_path);
   this->cfr = ptr_cfr;
@@ -156,7 +155,7 @@
 menu_hardware_te1_card_advanced_options::~menu_hardware_te1_card_advanced_options()
 {
   Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
-	("menu_hardware_te1_card_advanced_options::~menu_hardware_te1_card_advanced_options()\n"));
+    ("menu_hardware_te1_card_advanced_options::~menu_hardware_te1_card_advanced_options()\n"));
 }
 
 int menu_hardware_te1_card_advanced_options::run(OUT int * selection_index)
@@ -196,15 +195,15 @@
   te_cfg = &linkconf->fe_cfg.cfg.te_cfg;
 
   Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
-	("cfr->link_defs->name: %s\n", link_def->name));
+    ("cfr->link_defs->name: %s\n", link_def->name));
 
   if(linkconf->fe_cfg.media == WAN_MEDIA_T1){
-	number_of_items = 7;
+    number_of_items = 7;
   }else if(linkconf->fe_cfg.media == WAN_MEDIA_E1){
-	number_of_items = 7;
+    number_of_items = 7;
   }else{
-	ERR_DBG_OUT(("Unknown Media Type!! te_cfg.media: 0x%X\n", linkconf->fe_cfg.media));
-	return NO;
+    ERR_DBG_OUT(("Unknown Media Type!! te_cfg.media: 0x%X\n", linkconf->fe_cfg.media));
+    return NO;
   }
 
   menu_str = "";
@@ -213,7 +212,7 @@
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE1_MEDIA);
   menu_str += tmp_buff;
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Physical Medium--> %s\" ",
-			MEDIA_DECODE(&linkconf->fe_cfg));
+    		MEDIA_DECODE(&linkconf->fe_cfg));
   menu_str += tmp_buff;
 
   //////////////////////////////////////////////////////////////////////////////////////
@@ -222,7 +221,7 @@
   menu_str += tmp_buff;
 
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Line decoding----> %s\" ", 
-			LCODE_DECODE(&linkconf->fe_cfg));
+		  	LCODE_DECODE(&linkconf->fe_cfg));
   menu_str += tmp_buff;
 
   //////////////////////////////////////////////////////////////////////////////////////
@@ -236,10 +235,10 @@
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE1_CLOCK);
   menu_str += tmp_buff;
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"TE clock mode----> %s\" ",
-			TECLK_DECODE(&linkconf->fe_cfg));
+    		TECLK_DECODE(&linkconf->fe_cfg));
 #if 0
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"TE clock mode----> %s\" ",
-	(linkconf->fe_cfg.cfg.te_cfg.te_clock == WANOPT_NORMAL_CLK ? "Normal" : "Master"));
+    (linkconf->fe_cfg.cfg.te_cfg.te_clock == WANOPT_NORMAL_CLK ? "Normal" : "Master"));
 #endif
   menu_str += tmp_buff;
   //////////////////////////////////////////////////////////////////////////////////////
@@ -247,85 +246,78 @@
   //on AFT it must be 'ALL' because channelization is done on per-group-of-channels basis.
   //on S514-cards it is configurable here
   if(linkconf->card_type == WANOPT_S51X){
-	
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE1_ACTIVE_CH);
-	menu_str += tmp_buff;
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Act. channels----> %s\" ",
-	  link_def->active_channels_string);
-	menu_str += tmp_buff;
+    
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE1_ACTIVE_CH);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Act. channels----> %s\" ",
+      link_def->active_channels_string);
+    menu_str += tmp_buff;
   }
 
   //////////////////////////////////////////////////////////////////////////////////////
   if(linkconf->fe_cfg.media == WAN_MEDIA_T1){
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", T1_LBO);
-	menu_str += tmp_buff;
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"LBO--------------> %s\" ", 
-			LBO_DECODE(&linkconf->fe_cfg));
-	menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", T1_LBO);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"LBO--------------> %s\" ", 
+		    LBO_DECODE(&linkconf->fe_cfg));
+    menu_str += tmp_buff;
   }else{
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", E1_LBO);
-	menu_str += tmp_buff;
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"LBO--------------> %s\" ", 
-			LBO_DECODE(&linkconf->fe_cfg));
-	menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", E1_LBO);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"LBO--------------> %s\" ", 
+		    LBO_DECODE(&linkconf->fe_cfg));
+    menu_str += tmp_buff;
 
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", E1_SIG_MODE);
-	menu_str += tmp_buff;
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Signalling Mode--> %s\" ", 
-		(FE_SIG_MODE(&linkconf->fe_cfg) == WAN_TE1_SIG_CCS ? "CCS":"CAS"));
-	menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", E1_SIG_MODE);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Signalling Mode--> %s\" ", 
+	    (FE_SIG_MODE(&linkconf->fe_cfg) == WAN_TE1_SIG_CCS ? "CCS":"CAS"));
+    menu_str += tmp_buff;
   }
 
   //////////////////////////////////////////////////////////////////////////////////////
-  if(linkconf->card_type == WANOPT_AFT	  ||
-	 linkconf->card_type == WANOPT_AFT104  ){
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", AFT_FE_TXTRISTATE);
-	menu_str += tmp_buff;
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Disable Transmitter---> %s\" ",
-	  (linkconf->fe_cfg.tx_tristate_mode == WANOPT_YES ? "YES" : "NO"));
-	menu_str += tmp_buff;
+  if(linkconf->card_type == WANOPT_AFT    ||
+     linkconf->card_type == WANOPT_AFT104  ){
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", AFT_FE_TXTRISTATE);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Disable Transmitter---> %s\" ",
+      (linkconf->fe_cfg.tx_tristate_mode == WANOPT_YES ? "YES" : "NO"));
+    menu_str += tmp_buff;
 
-	snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE_REF_CLOCK);
-	menu_str += tmp_buff;
-	if(te_cfg->te_ref_clock == 0){
-	  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Reference Clock Port--> %s\" ",  "Not Used");
-	}else{
-	  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Reference Clock Port--> %d\" ", 
-		te_cfg->te_ref_clock);
-	}
-	menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE_REF_CLOCK);
+    menu_str += tmp_buff;
+    if(te_cfg->te_ref_clock == 0){
+      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Reference Clock Port--> %s\" ",  "Not Used");
+    }else{
+      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Reference Clock Port--> %d\" ", 
+        te_cfg->te_ref_clock);
+    }
+    menu_str += tmp_buff;
   }
 
   //////////////////////////////////////////////////////////////////////////////////////
-  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TE_HIGHIMPEDANCE);
-  menu_str += tmp_buff;
-  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"High Impedance----------> %s\" ", 
-	  (te_cfg->high_impedance_mode == WANOPT_YES ? "YES" : "NO"));
-  menu_str += tmp_buff;
-
-  //////////////////////////////////////////////////////////////////////////////////////
   //create the explanation text for the menu
   snprintf(tmp_buff, MAX_PATH_LENGTH,
 "\n------------------------------------------\
 \nAdvanced Hardware settings for: %s.", link_def->name);
 
   if(set_configuration(   YES,//indicates to call V2 of the function
-						  MENU_BOX_BACK,//MENU_BOX_SELECT,
-						  lxdialog_path,
-						  "T1/E1 ADVANCED CONFIGURATION OPTIONS",
-						  WANCFG_PROGRAM_NAME,
-						  tmp_buff,
-						  MENU_HEIGTH, MENU_WIDTH,
-						  number_of_items,
-						  (char*)menu_str.c_str()
-						  ) == NO){
-	rc = NO;
-	goto cleanup;
+                          MENU_BOX_BACK,//MENU_BOX_SELECT,
+                          lxdialog_path,
+                          "T1/E1 ADVANCED CONFIGURATION OPTIONS",
+                          WANCFG_PROGRAM_NAME,
+                          tmp_buff,
+                          MENU_HEIGTH, MENU_WIDTH,
+                          number_of_items,
+                          (char*)menu_str.c_str()
+                          ) == NO){
+    rc = NO;
+    goto cleanup;
   }
 
   if(show(selection_index) == NO){
-	rc = NO;
-	goto cleanup;
+    rc = NO;
+    goto cleanup;
   }
   //////////////////////////////////////////////////////////////////////////////////////
 
@@ -333,225 +325,200 @@
   switch(*selection_index)
   {
   case MENU_BOX_BUTTON_SELECT:
-	Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
-	  ("hardware_setup: option selected for editing: %s\n", get_lxdialog_output_string()));
-
-	switch(atoi(get_lxdialog_output_string()))
-	{
-	case TE1_MEDIA:
-	  {
-		menu_te1_select_media te1_select_media(lxdialog_path, cfr);
-		if(te1_select_media.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
-
-	case TE1_LCODE:
-	  {
-		menu_te_select_line_decoding te1_select_line_decoding(lxdialog_path, cfr);
-		if(te1_select_line_decoding.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
-
-	case TE1_FRAME:
-	  {
-		menu_te_select_framing te1_select_framing(lxdialog_path, cfr);
-		if(te1_select_framing.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
+    Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
+      ("hardware_setup: option selected for editing: %s\n", get_lxdialog_output_string()));
 
-	case T1_LBO:
-	  {
-		menu_t1_lbo t1_lbo(lxdialog_path, cfr);
-		if(t1_lbo.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
+    switch(atoi(get_lxdialog_output_string()))
+    {
+    case TE1_MEDIA:
+      {
+        menu_te1_select_media te1_select_media(lxdialog_path, cfr);
+        if(te1_select_media.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	case E1_LBO:
-	  {
-		menu_e1_lbo e1_lbo(lxdialog_path, cfr);
-		if(e1_lbo.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
+    case TE1_LCODE:
+      {
+        menu_te_select_line_decoding te1_select_line_decoding(lxdialog_path, cfr);
+        if(te1_select_line_decoding.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	case E1_SIG_MODE:
-	  {
-		menu_e1_signalling_mode e1_signalling_mode(lxdialog_path, cfr);
-		if(e1_signalling_mode.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
+    case TE1_FRAME:
+      {
+        menu_te_select_framing te1_select_framing(lxdialog_path, cfr);
+        if(te1_select_framing.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	case TE1_CLOCK:
-	  {
-		menu_te1_clock_mode te1_clock_mode(lxdialog_path, cfr);
-		if(te1_clock_mode.run(selection_index) == NO){
-		  rc = NO;
-		  exit_dialog = YES;
-		}
-	  }
-	  break;
+    case T1_LBO:
+      {
+        menu_t1_lbo t1_lbo(lxdialog_path, cfr);
+        if(t1_lbo.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	case TE_HIGHIMPEDANCE:
-	  snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s High Impedance mode?",
-			(te_cfg->high_impedance_mode == WANOPT_NO ? "Enable" : "Disable"));
+    case E1_LBO:
+      {
+        menu_e1_lbo e1_lbo(lxdialog_path, cfr);
+        if(e1_lbo.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	  if(yes_no_question(	selection_index,
-							lxdialog_path,
-							NO_PROTOCOL_NEEDED,
-							tmp_buff) == NO){
-		return NO;
-	  }
+    case E1_SIG_MODE:
+      {
+        menu_e1_signalling_mode e1_signalling_mode(lxdialog_path, cfr);
+        if(e1_signalling_mode.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	  switch(*selection_index)
-	  {
-	  case YES_NO_TEXT_BOX_BUTTON_YES:
-		if(te_cfg->high_impedance_mode == WANOPT_NO){
-		  //was disabled - enable
-		  te_cfg->high_impedance_mode = WANOPT_YES;
-		}else{
-		  //was enabled - disable
-		  te_cfg->high_impedance_mode = WANOPT_NO;
-		}
-		break;
-	  }
-	  break;
+    case TE1_CLOCK:
+      {
+        menu_te1_clock_mode te1_clock_mode(lxdialog_path, cfr);
+        if(te1_clock_mode.run(selection_index) == NO){
+          rc = NO;
+          exit_dialog = YES;
+        }
+      }
+      break;
 
-	case TE_REF_CLOCK:
-	  {
+    case TE_REF_CLOCK:
+      {
 	unsigned int ref_clock_port;
 
 show_ref_clock_input_box:
-		snprintf(explanation_text, MAX_PATH_LENGTH, "Please specify Reference Clock Port (0 to disable).\
+        snprintf(explanation_text, MAX_PATH_LENGTH, "Please specify Reference Clock Port (0 to disable).\
 If this option is used, TE1 Clock MUST be set to Master!");
-		snprintf(initial_text, MAX_PATH_LENGTH, "%d", te_cfg->te_ref_clock);
+        snprintf(initial_text, MAX_PATH_LENGTH, "%d", te_cfg->te_ref_clock);
 
-		inb.set_configuration(lxdialog_path,
-							  backtitle,
-							  explanation_text,
-							  INPUT_BOX_HIGTH,
-							  INPUT_BOX_WIDTH,
-							  initial_text);
+        inb.set_configuration(lxdialog_path,
+                              backtitle,
+                              explanation_text,
+                              INPUT_BOX_HIGTH,
+                              INPUT_BOX_WIDTH,
+                              initial_text);
 
-		inb.show(selection_index);
+        inb.show(selection_index);
 
-		switch(*selection_index)
-		{
-		case INPUT_BOX_BUTTON_OK:
-		  ref_clock_port = atoi(remove_spaces_in_int_string(inb.get_lxdialog_output_string()));
+        switch(*selection_index)
+        {
+        case INPUT_BOX_BUTTON_OK:
+          ref_clock_port = atoi(remove_spaces_in_int_string(inb.get_lxdialog_output_string()));
 
-		  if(ref_clock_port < 0 || ref_clock_port > 4){
-			tb.show_error_message(lxdialog_path, WANCONFIG_AFT, "Invalid Reference Clock Port!");
-			goto show_ref_clock_input_box;
-		  }else{
-			te_cfg->te_ref_clock = ref_clock_port;
-		  }
-		  break;
+          if(ref_clock_port < 0 || ref_clock_port > 4){
+            tb.show_error_message(lxdialog_path, WANCONFIG_AFT, "Invalid Reference Clock Port!");
+            goto show_ref_clock_input_box;
+          }else{
+            te_cfg->te_ref_clock = ref_clock_port;
+          }
+          break;
 
-		case INPUT_BOX_BUTTON_HELP:
-		  tb.show_help_message(lxdialog_path, WANCONFIG_AFT, te1_options_help_str);
-		  goto show_ref_clock_input_box;
-		}//switch(*selection_index)
-	  }
-	  break;
+        case INPUT_BOX_BUTTON_HELP:
+          tb.show_help_message(lxdialog_path, WANCONFIG_AFT, te1_options_help_str);
+          goto show_ref_clock_input_box;
+        }//switch(*selection_index)
+      }
+      break;
 
-	case TE1_ACTIVE_CH:
-	  Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
-		("cfr->link_defs->linkconf->config_id: %d\n", cfr->link_defs->linkconf->config_id));
-	  if(cfr->link_defs->linkconf->config_id == WANCONFIG_AFT){
-		//must be alwayse ALL channels
-		break;
-	  }
+    case TE1_ACTIVE_CH:
+      Debug(DBG_MENU_HARDWARE_TE1_CARD_ADVANCED_OPTIONS,
+        ("cfr->link_defs->linkconf->config_id: %d\n", cfr->link_defs->linkconf->config_id));
+      if(cfr->link_defs->linkconf->config_id == WANCONFIG_AFT){
+        //must be alwayse ALL channels
+        break;
+      }
 
-	  if(act_channels_ip.show(	lxdialog_path,
-								linkconf->config_id,
-								link_def->active_channels_string,//initial text
-								selection_index,
-								linkconf->fe_cfg.media) == NO){
-		rc = NO;
-	  }else{
+      if(act_channels_ip.show(  lxdialog_path,
+                                linkconf->config_id,
+                                link_def->active_channels_string,//initial text
+                                selection_index,
+                                linkconf->fe_cfg.media) == NO){
+        rc = NO;
+      }else{
 
-		switch(*selection_index)
-		{
-		case INPUT_BOX_BUTTON_OK:
-		  snprintf(link_def->active_channels_string, MAX_LEN_OF_ACTIVE_CHANNELS_STRING,
-				act_channels_ip.get_lxdialog_output_string());
+        switch(*selection_index)
+        {
+        case INPUT_BOX_BUTTON_OK:
+          snprintf(link_def->active_channels_string, MAX_LEN_OF_ACTIVE_CHANNELS_STRING,
+                act_channels_ip.get_lxdialog_output_string());
 
-		  break;
+          break;
 
-		case INPUT_BOX_BUTTON_HELP:
-		  tb.show_help_message(lxdialog_path, WANCONFIG_AFT, active_te1_channels_help_str);
-		  break;
-		}
-		goto again;
-	  }
-	  break;
+        case INPUT_BOX_BUTTON_HELP:
+          tb.show_help_message(lxdialog_path, WANCONFIG_AFT, active_te1_channels_help_str);
+          break;
+        }
+        goto again;
+      }
+      break;
 
-	case AFT_FE_TXTRISTATE:
-	  snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s transmitter?",
+    case AFT_FE_TXTRISTATE:
+      snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s transmitter?",
 	(linkconf->fe_cfg.tx_tristate_mode == WANOPT_NO ? "Disable" : "Enable"));
 
-	  if(yes_no_question( selection_index,
-						  lxdialog_path,
-						  NO_PROTOCOL_NEEDED,
-						  tmp_buff) == NO){
+      if(yes_no_question( selection_index,
+                          lxdialog_path,
+                          NO_PROTOCOL_NEEDED,
+                          tmp_buff) == NO){
 	//error displaying dialog
 	rc = NO;
 	goto cleanup;
-	  }
+      }
 
-	  switch(*selection_index)
-	  {
-	  case YES_NO_TEXT_BOX_BUTTON_YES:
+      switch(*selection_index)
+      {
+      case YES_NO_TEXT_BOX_BUTTON_YES:
 	if(linkconf->fe_cfg.tx_tristate_mode == WANOPT_NO){
 	  //transmitter enabled, user wants to disable
 	  linkconf->fe_cfg.tx_tristate_mode = WANOPT_YES;
 	}else{
 	  linkconf->fe_cfg.tx_tristate_mode = WANOPT_NO;
 	}
-		break;
+        break;
 
-	  case YES_NO_TEXT_BOX_BUTTON_NO:
+      case YES_NO_TEXT_BOX_BUTTON_NO:
 	//don't do anything
 	break;
-	  }
-	  break;
+      }
+      break;
 
-	default:
-	  ERR_DBG_OUT(("Invalid option selected for editing!! selection: %s\n",
-		get_lxdialog_output_string()));
-	  rc = NO;
-	  exit_dialog = YES;
-	}
-	break;
+    default:
+      ERR_DBG_OUT(("Invalid option selected for editing!! selection: %s\n",
+        get_lxdialog_output_string()));
+      rc = NO;
+      exit_dialog = YES;
+    }
+    break;
 
   case MENU_BOX_BUTTON_HELP:
-	tb.show_help_message(lxdialog_path, NO_PROTOCOL_NEEDED, te1_options_help_str);
-	break;
+    tb.show_help_message(lxdialog_path, NO_PROTOCOL_NEEDED, te1_options_help_str);
+    break;
 
   case MENU_BOX_BUTTON_EXIT:
-	exit_dialog = YES;
-	break;
+    exit_dialog = YES;
+    break;
   }//switch(*selection_index)
 
   if(exit_dialog == NO){
-	goto again;
+    goto again;
   }
 
 cleanup:
@@ -566,7 +533,8 @@
 
 enum {
 	RM_BATTTHRESH=1,
-	RM_BATTDEBOUNCE
+	RM_BATTDEBOUNCE,
+	RM_NETWORK_SYNC
 };
 
 menu_hardware_analog_card_advanced_options::
@@ -606,9 +574,11 @@
 
   input_box inb;
   char backtitle[MAX_PATH_LENGTH];
+/* DAVIDY: Uncomment this when RM_BATTTHRESH and RM_BATTDEBOUNCE become available in 2.3.4 drivers*/ 
+#if 0
   char explanation_text[MAX_PATH_LENGTH];
   char initial_text[MAX_PATH_LENGTH];
-
+#endif
   snprintf(backtitle, MAX_PATH_LENGTH, "WANPIPE Configuration Utility");
 
   Debug(DBG_MENU_HARDWARE_ANALOG_CARD_ADVANCED_OPTIONS, ("menu_net_interface_setup::%s()\n", __FUNCTION__));
@@ -628,6 +598,8 @@
 
   menu_str = "";
 
+/* DAVIDY: Uncomment this when RM_BATTTHRESH and RM_BATTDEBOUNCE become available in 2.3.4 drivers*/ 
+#if 0
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", RM_BATTTHRESH);
   menu_str += tmp_buff;
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Battery Threshold--> %d\" ", 
@@ -641,6 +613,14 @@
     	remora_cfg->battdebounce);
   menu_str += tmp_buff;
   number_of_items++;
+#endif
+
+  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", RM_NETWORK_SYNC);
+  menu_str += tmp_buff;
+  snprintf(tmp_buff, MAX_PATH_LENGTH, " \"External Network Sync--> %s\" ",
+	(remora_cfg->network_sync == WANOPT_YES ? "Yes" : "No"));
+  menu_str += tmp_buff;
+  number_of_items++;
 
   //////////////////////////////////////////////////////////////////////////////////////
   //create the explanation text for the menu
@@ -677,6 +657,8 @@
 
 	switch(atoi(get_lxdialog_output_string()))
 	{
+/* DAVIDY: Uncomment this when RM_BATTTHRESH and RM_BATTDEBOUNCE become available in 2.3.4 drivers*/ 
+#if 0
 	case RM_BATTTHRESH:
 		unsigned int battery_threshold;
 
@@ -749,6 +731,32 @@
 		}//switch(*selection_index)
 		break;
 
+#endif
+	case RM_NETWORK_SYNC:
+		snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s External Network Sync?",
+		(remora_cfg->network_sync == WANOPT_NO ? "Enable" : "Disable"));
+
+		if(yes_no_question( selection_index,
+				lxdialog_path,
+				NO_PROTOCOL_NEEDED,
+				tmp_buff) == NO){
+			return NO;
+		}
+		
+		switch(*selection_index)
+		{
+		case YES_NO_TEXT_BOX_BUTTON_YES:
+			if(remora_cfg->network_sync == WANOPT_NO){
+				//was disabled - enable
+				remora_cfg->network_sync = WANOPT_YES;
+			}else{
+				//was enabled - disable
+				remora_cfg->network_sync = WANOPT_NO;
+			}
+			break;
+		}
+		break;
+
 	default:
 	  ERR_DBG_OUT(("Invalid option selected for editing!! selection: %s\n",
 		get_lxdialog_output_string()));
@@ -773,3 +781,4 @@
 cleanup:
   return rc;
 }
+
Only in wancfg: menu_hardware_te1_card_advanced_options.cpp~
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_hardware_te1_card_advanced_options.h wancfg/menu_hardware_te1_card_advanced_options.h
--- /root/3.1.X/wanpipe/util/wancfg/menu_hardware_te1_card_advanced_options.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_hardware_te1_card_advanced_options.h	2007-06-04 12:20:37.000000000 -0400
@@ -40,7 +40,6 @@
   int run(OUT int * selection_index);
 };
 
-
 class menu_hardware_analog_card_advanced_options : public menu_base  {
 
   char lxdialog_path[MAX_PATH_LENGTH];
Only in wancfg: menu_hardware_te1_card_advanced_options.h~
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_net_interface_miscellaneous_options.cpp wancfg/menu_net_interface_miscellaneous_options.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_net_interface_miscellaneous_options.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_net_interface_miscellaneous_options.cpp	2006-11-21 18:31:51.000000000 -0500
@@ -169,7 +169,7 @@
       if(chanconf->network_number == 0x00){
         chanconf->network_number = 0xABCDEFAB;
       }
-      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"IPX Network Addr---> 0x%X\" ",
+      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"IPX Network Addr---> 0x%lX\" ",
         chanconf->network_number);
       menu_str += tmp_buff;
     }
@@ -331,7 +331,7 @@
       /////////////////////////////////////////////////////////////
 show_ipx_addr_input_box:
       snprintf(explanation_text, MAX_PATH_LENGTH, "Please specify you IPX Network Number");
-      snprintf(initial_text, MAX_PATH_LENGTH, "0x%X", chanconf->network_number);
+      snprintf(initial_text, MAX_PATH_LENGTH, "0x%lX", chanconf->network_number);
 
       inb.set_configuration(  lxdialog_path,
                               backtitle,
@@ -350,14 +350,14 @@
 
 
         conversion_count = sscanf(  inb.get_lxdialog_output_string(),
-                                    "%x",
+                                    "%lx",
                                     &chanconf->network_number);
 
         Debug(DBG_MENU_NET_INTERFACE_MISCELLANEOUS_OPTIONS,
           ("conversion_count: %d\n", conversion_count));
 
         Debug(DBG_MENU_NET_INTERFACE_MISCELLANEOUS_OPTIONS,
-          ("IPX addr in Hex: 0x%X\n", chanconf->network_number));
+          ("IPX addr in Hex: 0x%lX\n", chanconf->network_number));
 
         if(conversion_count != 1 || (strlen(inb.get_lxdialog_output_string()) != 8+2)){
 
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_net_interface_setup.cpp wancfg/menu_net_interface_setup.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_net_interface_setup.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_net_interface_setup.cpp	2006-11-21 18:31:51.000000000 -0500
@@ -187,7 +187,7 @@
   chan_def_t* chandef;
 
   conf_file_reader* local_cfr = (conf_file_reader*)global_conf_file_reader_ptr;
-  wan_tdmv_conf_t* tdmv_conf = &local_cfr->link_defs->linkconf->tdmv_conf;
+  wan_xilinx_conf_t* wan_xilinx_conf = &local_cfr->link_defs->linkconf->u.aft;
   sdla_fe_cfg_t*  fe_cfg = &local_cfr->link_defs->linkconf->fe_cfg;
   link_def_t * link_defs = local_cfr->link_defs;
  
@@ -288,7 +288,7 @@
     snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TDMV_SPAN_NUMBER);
     menu_str += tmp_buff;
     snprintf(tmp_buff, MAX_PATH_LENGTH, " \"TDM Voice Span-----------------> %d\" ", 
-		    tdmv_conf->span_no);
+		    wan_xilinx_conf->tdmv_span_no);
     menu_str += tmp_buff;
 
     //if(link_defs->card_version != A200_ADPTR_ANALOG){
@@ -304,12 +304,12 @@
         snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TDMV_D_CHANNEL);
         menu_str += tmp_buff;
    
-        if(tdmv_conf->dchan != 0){
+        if(wan_xilinx_conf->tdmv_dchan != 0){
           snprintf(tmp_buff, MAX_PATH_LENGTH, " \"TDM PRI HW-HDLC Timeslot-------> %d\" ", 
-		    tdmv_conf->dchan);
+		    wan_xilinx_conf->tdmv_dchan);
         }else{
           snprintf(tmp_buff, MAX_PATH_LENGTH, " \"TDM PRI HW-HDLC Timeslot-------> %d Not Used\" ", 
-		    tdmv_conf->dchan);
+		    wan_xilinx_conf->tdmv_dchan);
         }
         menu_str += tmp_buff;
       }
@@ -572,7 +572,7 @@
                                 "Invalid TDMV Span Number. Min: 1");
           goto show_tdm_spanno_input_box;
         }else{
-          tdmv_conf->span_no = tdm_spanno;
+          wan_xilinx_conf->tdmv_span_no = tdm_spanno;
         }
         break;
 
@@ -590,7 +590,7 @@
       //E1 - 1-31, 16 is default
       int tdm_dchan;
       snprintf(explanation_text, MAX_PATH_LENGTH, "PRI Timeslot (set to 0 to disable)");
-      snprintf(initial_text, MAX_PATH_LENGTH, "%d", tdmv_conf->dchan);
+      snprintf(initial_text, MAX_PATH_LENGTH, "%d", wan_xilinx_conf->tdmv_dchan);
 
 show_tdm_dchan_input_box:
       inb.set_configuration(  lxdialog_path,
@@ -631,7 +631,7 @@
 	  break;
 
 	}
-	tdmv_conf->dchan = tdm_dchan;
+	wan_xilinx_conf->tdmv_dchan = tdm_dchan;
         break;
 
       case INPUT_BOX_BUTTON_HELP:
@@ -647,7 +647,7 @@
 	
     case TDMV_ECHO_OPTIONS:
       snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s Echo Cancel option?",
-	(chandef->chanconf->tdmv.tdmv_echo_off == WANOPT_NO ? "Enable" : "Disable"));
+	(chandef->chanconf->tdmv_echo_off == WANOPT_NO ? "Enable" : "Disable"));
 
       if(yes_no_question(   selection_index,
                             lxdialog_path,
@@ -659,12 +659,12 @@
       switch(*selection_index)
       {
       case YES_NO_TEXT_BOX_BUTTON_YES:
-        if(chandef->chanconf->tdmv.tdmv_echo_off == WANOPT_NO){
+        if(chandef->chanconf->tdmv_echo_off == WANOPT_NO){
           //was disabled - enable
-          chandef->chanconf->tdmv.tdmv_echo_off = WANOPT_YES;
+          chandef->chanconf->tdmv_echo_off = WANOPT_YES;
         }else{
           //was enabled - disable
-          chandef->chanconf->tdmv.tdmv_echo_off = WANOPT_NO;
+          chandef->chanconf->tdmv_echo_off = WANOPT_NO;
         }
         break;
       }
@@ -701,7 +701,7 @@
 //old version - when HWEC MAP was in [device] section
     case TDMV_HWEC:
       snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s Hardware Echo Cancellation?",
-	(tdmv_conf->hwec == WANOPT_NO ? "Enable" : "Disable"));
+	(wan_xilinx_conf->tdmv_hwec == WANOPT_NO ? "Enable" : "Disable"));
 
       if(yes_no_question(   selection_index,
                             lxdialog_path,
@@ -713,12 +713,12 @@
       switch(*selection_index)
       {
       case YES_NO_TEXT_BOX_BUTTON_YES:
-        if(tdmv_conf->hwec == WANOPT_NO){
+        if(wan_xilinx_conf->tdmv_hwec == WANOPT_NO){
           //was disabled - enable
-          tdmv_conf->hwec = WANOPT_YES;
+          wan_xilinx_conf->tdmv_hwec = WANOPT_YES;
         }else{
           //was enabled - disable
-          tdmv_conf->hwec = WANOPT_NO;
+          wan_xilinx_conf->tdmv_hwec = WANOPT_NO;
         }
         break;
       }
@@ -755,7 +755,7 @@
 #endif
     case TDMV_HWEC:
       snprintf(tmp_buff, MAX_PATH_LENGTH, "Do you want to %s Hardware Echo Cancellation?",
-	(chandef->chanconf->hwec.enable == WANOPT_NO ? "Enable" : "Disable"));
+	(chandef->chanconf->xoff_char == WANOPT_NO ? "Enable" : "Disable"));
 
       if(yes_no_question(   selection_index,
                             lxdialog_path,
@@ -767,15 +767,15 @@
       switch(*selection_index)
       {
       case YES_NO_TEXT_BOX_BUTTON_YES:
-        if(chandef->chanconf->hwec.enable == WANOPT_NO){
+        if(chandef->chanconf->xoff_char == WANOPT_NO){
           //was disabled - enable
-          chandef->chanconf->hwec.enable = WANOPT_YES;
+          chandef->chanconf->xoff_char = WANOPT_YES;
 	  //suggest to user HWEC chan MAP to be the same as active chans for the group
           strncpy(chandef->active_hwec_channels_string, chandef->active_channels_string,
 		 MAX_LEN_OF_ACTIVE_CHANNELS_STRING);
         }else{
           //was enabled - disable
-          chandef->chanconf->hwec.enable = WANOPT_NO;
+          chandef->chanconf->xoff_char = WANOPT_NO;
         }
         break;
       }
@@ -903,10 +903,10 @@
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TDMV_HWEC);
   menu_str += tmp_buff;
   snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Echo Cancellation------> %s\" ",
-        (chandef->chanconf->hwec.enable == WANOPT_YES ? "Yes" : "No"));
+        (chandef->chanconf->xoff_char == WANOPT_YES ? "Yes" : "No"));
   menu_str += tmp_buff;
   /*     
-  if(chandef->chanconf->hwec.enable == WANOPT_YES){
+  if(chandef->chanconf->xoff_char == WANOPT_YES){
     snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", TDMV_HWEC_MAP);
     menu_str += tmp_buff;
     snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Echo Cancellation Map--> %s\" ", 
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_new_device_configuration.cpp wancfg/menu_new_device_configuration.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_new_device_configuration.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_new_device_configuration.cpp	2007-06-04 14:49:48.000000000 -0400
@@ -112,6 +112,7 @@
   list_element_chan_def*  list_el_chan_def;
   sdla_fe_cfg_t*	  fe_cfg;
   
+
 again:
   rc = YES;
   exit_dialog = NO;
@@ -182,19 +183,15 @@
       break;
 
     case A104_ADPTR_4TE1:
+    case A200_ADPTR_ANALOG:
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Setup--> %s (Line No: %d)\" ",
         get_card_type_string(linkconf->card_type, link_def->card_version), fe_cfg->line_no);
       break;
 
-    case A200_ADPTR_ANALOG:
+    case AFT_ADPTR_56K:
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Setup--> %s\" ",
-        get_card_type_string(linkconf->card_type, link_def->card_version));
+	get_card_type_string(linkconf->card_type, link_def->card_version));
       break;
-
-    case AFT_ADPTR_56K:
-      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Setup--> %s\" ",
-        get_card_type_string(linkconf->card_type, link_def->card_version));
-      break;
 
     default:
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"Hardware Setup--> %s\" ",
@@ -785,7 +782,7 @@
   chan_def_t* chandef;
   text_box tb;
   char tmp_buff[MAX_PATH_LENGTH];
-  wan_tdmv_conf_t* tdmv_conf=&cfr->link_defs->linkconf->tdmv_conf;
+  wan_xilinx_conf_t* wan_xilinx_conf = &cfr->link_defs->linkconf->u.aft;
   char local_is_there_a_voice_if = NO;
   
   Debug(DBG_MENU_NEW_DEVICE_CONFIG,
@@ -806,7 +803,7 @@
     chandef = &list_el_chan_def->data;
 
     Debug(DBG_MENU_NEW_DEVICE_CONFIG, ("chandef->usedby: %d, tdmv_span_no: %d\n",
-      chandef->usedby,tdmv_conf->span_no));
+      chandef->usedby, wan_xilinx_conf->tdmv_span_no));
   
     //some special checks may be needed, depending how 'group' is actually used.
     switch(chandef->usedby)
@@ -814,7 +811,7 @@
     case TDM_VOICE:
       local_is_there_a_voice_if = YES;
       
-      if(tdmv_conf->span_no == 0){
+      if(wan_xilinx_conf->tdmv_span_no == 0){
 	//user must initialize the span_no!
         snprintf(tmp_buff, MAX_PATH_LENGTH, "Error: Span Number not set!\n\
 Must be a non-zero number.\n\
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_select_protocol.cpp wancfg/menu_select_protocol.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_select_protocol.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_select_protocol.cpp	2007-06-04 14:53:11.000000000 -0400
@@ -154,15 +154,15 @@
     snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%s\" ", get_protocol_string(WANCONFIG_MFR));
     menu_str += tmp_buff;
     num_of_items++;
-
-#if defined(CONFIG_PRODUCT_WANPIPE_LIP_ATM)
-	if(link_defs->card_version != AFT_ADPTR_56K){
-      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", WANCONFIG_LIP_ATM);
-      menu_str += tmp_buff;
-      snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%s\" ", get_protocol_string(WANCONFIG_LIP_ATM));
-      menu_str += tmp_buff;
-      num_of_items++;
-	}
+
+#if defined(CONFIG_PRODUCT_WANPIPE_LIP_ATM)
+   if(link_defs->card_version != AFT_ADPTR_56K){
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", WANCONFIG_LIP_ATM);
+    menu_str += tmp_buff;
+    snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%s\" ", get_protocol_string(WANCONFIG_LIP_ATM));
+    menu_str += tmp_buff;
+    num_of_items++;
+   }
 #endif
   }
 
@@ -249,9 +249,9 @@
            
       num_of_items += 2;
       break;
-
-	case A300_ADPTR_U_1TE3://WAN_MEDIA_DS3:
-	case AFT_ADPTR_56K:
+
+    case A300_ADPTR_U_1TE3://WAN_MEDIA_DS3:
+    case AFT_ADPTR_56K:
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%d\" ", WANCONFIG_HDLC);
       menu_str += tmp_buff;
       snprintf(tmp_buff, MAX_PATH_LENGTH, " \"%s\" ", get_protocol_string(WANCONFIG_HDLC));
diff -dur /root/3.1.X/wanpipe/util/wancfg/menu_te1_select_media.cpp wancfg/menu_te1_select_media.cpp
--- /root/3.1.X/wanpipe/util/wancfg/menu_te1_select_media.cpp	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/menu_te1_select_media.cpp	2006-11-21 18:31:51.000000000 -0500
@@ -133,9 +133,9 @@
           cfr->link_defs->linkconf->card_type != WANOPT_S50X &&
           cfr->link_defs->linkconf->card_type != WANOPT_S51X){
           
-	  wan_tdmv_conf_t *tdmv_conf = &cfr->link_defs->linkconf->tdmv_conf;
+	  wan_xilinx_conf_t* wan_xilinx_conf = &cfr->link_defs->linkconf->u.aft;
           //wan_xilinx_conf->tdmv_dchan = 24;
-          tdmv_conf->dchan = 0;//user will have manually set/enable this option
+          wan_xilinx_conf->tdmv_dchan = 0;//user will have manually set/enable this option
         }	
       }
       exit_dialog = YES;
@@ -155,9 +155,9 @@
           cfr->link_defs->linkconf->card_type != WANOPT_S50X &&
           cfr->link_defs->linkconf->card_type != WANOPT_S51X){
           
-	  wan_tdmv_conf_t *tdmv_conf = &cfr->link_defs->linkconf->tdmv_conf;
+	  wan_xilinx_conf_t* wan_xilinx_conf = &cfr->link_defs->linkconf->u.aft;
           //wan_xilinx_conf->tdmv_dchan = 16;
-          tdmv_conf->dchan = 0;//user will have to manually set/enable this option
+          wan_xilinx_conf->tdmv_dchan = 0;//user will have to manually set/enable this option
         }
       }
       exit_dialog = YES;
diff -dur /root/3.1.X/wanpipe/util/wancfg/wancfg.h wancfg/wancfg.h
--- /root/3.1.X/wanpipe/util/wancfg/wancfg.h	2007-04-13 19:15:45.000000000 -0400
+++ wancfg/wancfg.h	2006-11-21 18:31:51.000000000 -0500
@@ -61,11 +61,6 @@
 #include "cpp_string.h" //class for strings handling. had to do it because
                         //C++ 'string' is NOT istalled on all systems.
 
-#if defined(__LINUX__)
-//need by some compilers
-#include <iostream>
-#endif
-
 //C includes:
 #include <string.h>
 #include <stdlib.h>
@@ -157,12 +152,6 @@
 //#define Debug(dbg_flag, message) if(dbg_flag){printf message;}
 #define Debug(dbg_flag, message)
 
-#if DBG_FLAG
-#define FUNC_DBG()	printf("%s(), Line: %d\n", __FUNCTION__, __LINE__)
-#else
-#define FUNC_DBG()
-#endif
-
 #define MENUINSTR_EXIT "------------------------------------------ \
 Use arrows to navigate through the options. \
 Press <Enter> to select highlighted opt. \
@@ -375,8 +364,8 @@
 void tokenize_string(char* input_buff, char* delimeter_str, char* output_buff, int buff_length);
 char* replace_char_with_other_char_in_str(char* str, char old_char, char new_char);
 char* get_date_and_time();
-unsigned int parse_active_channel(char* val, unsigned char media_type);
-unsigned int get_active_channels(int channel_flag, int start_channel,
+unsigned long parse_active_channel(char* val, unsigned char media_type);
+unsigned long get_active_channels(int channel_flag, int start_channel,
                                   int stop_channel, unsigned char media_type);
 int check_channels(int channel_flag, unsigned int start_channel,
                    unsigned int stop_channel, unsigned char media_type);
